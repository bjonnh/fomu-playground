/* Generated by Yosys 0.8+471 (git sha1 b6345b11, gcc 7.3.0-27ubuntu1~18.04 -fPIC -Os) */

(* \nmigen.hierarchy  = "minerva_cpu.a" *)
(* generator = "nMigen" *)
module a(rst, valid, stall, kill, payload__branch_predict_taken, \valid$1 , \stall$2 , m_branch_taken, \valid$3 , clk);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$4 ;
  wire \$6 ;
  wire \$9 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\kill ;
  (* src = "minerva/minerva/stage.py:58" *)
  reg \$next\kill$8 ;
  (* src = "minerva/minerva/stage.py:59" *)
  reg \$next\stall$2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\valid ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output kill;
  (* src = "minerva/minerva/stage.py:58" *)
  wire \kill$8 ;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  input m_branch_taken;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input payload__branch_predict_taken;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input stall;
  (* src = "minerva/minerva/stage.py:59" *)
  output \stall$2 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output valid;
  reg valid = 1'h0;
  (* src = "minerva/minerva/stage.py:60" *)
  input \valid$1 ;
  (* src = "minerva/minerva/stage.py:60" *)
  input \valid$3 ;
  assign \$9  = \$6  | (* src = "minerva/minerva/stage.py:90" *) \kill$8 ;
  assign \$11  = ~ (* src = "minerva/minerva/core.py:566" *) m_branch_taken;
  assign \$13  = payload__branch_predict_taken & (* src = "minerva/minerva/core.py:566" *) \$11 ;
  assign \$15  = \$13  & (* src = "minerva/minerva/core.py:566" *) \valid$3 ;
  assign \$17  = 1'h0 | (* src = "minerva/minerva/stage.py:95" *) \$15 ;
  assign \$19  = ~ (* src = "minerva/minerva/core.py:568" *) payload__branch_predict_taken;
  assign \$21  = \$19  & (* src = "minerva/minerva/core.py:568" *) m_branch_taken;
  assign \$23  = \$21  & (* src = "minerva/minerva/core.py:568" *) \valid$3 ;
  assign \$25  = \$17  | (* src = "minerva/minerva/stage.py:95" *) \$23 ;
  assign \$27  = 1'h0 | (* src = "minerva/minerva/stage.py:98" *) stall;
  assign \$4  = ~ (* src = "minerva/minerva/stage.py:88" *) \stall$2 ;
  assign \$6  = ~ (* src = "minerva/minerva/stage.py:90" *) stall;
  always @(posedge clk)
      valid <= \$next\valid ;
  always @* begin
    \$next\valid  = valid;
    casez ({ \$9 , \$4  })
      2'bz1:
          \$next\valid  = \valid$1 ;
      2'b1z:
          \$next\valid  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill  = 1'h0;
    \$next\kill  = \kill$8 ;
  end
  always @* begin
    \$next\kill$8  = 1'h0;
    \$next\kill$8  = \$25 ;
  end
  always @* begin
    \$next\stall$2  = 1'h0;
    \$next\stall$2  = \$27 ;
  end
  assign \stall$2  = \$next\stall$2 ;
  assign \kill$8  = \$next\kill$8 ;
  assign kill = \$next\kill ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.adder" *)
(* generator = "nMigen" *)
module adder(src1, src2, result, overflow, carry, sub);
  wire [32:0] \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire [32:0] \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "minerva/minerva/units/adder.py:14" *)
  reg \$next\carry ;
  (* src = "minerva/minerva/units/adder.py:15" *)
  reg \$next\overflow ;
  (* src = "minerva/minerva/units/adder.py:13" *)
  reg [31:0] \$next\result ;
  (* src = "minerva/minerva/units/adder.py:14" *)
  output carry;
  (* src = "minerva/minerva/units/adder.py:15" *)
  output overflow;
  (* src = "minerva/minerva/units/adder.py:13" *)
  output [31:0] result;
  (* src = "minerva/minerva/units/adder.py:10" *)
  input [31:0] src1;
  (* src = "minerva/minerva/units/adder.py:11" *)
  input [31:0] src2;
  (* src = "minerva/minerva/units/adder.py:9" *)
  input sub;
  assign \$9  = \$5  & (* src = "minerva/minerva/units/adder.py:23" *) \$7 ;
  assign \$11  = ~ (* src = "minerva/minerva/units/adder.py:28" *) src1[31];
  assign \$13  = \$11  & (* src = "minerva/minerva/units/adder.py:28" *) src2[31];
  assign \$15  = \$13  & (* src = "minerva/minerva/units/adder.py:28" *) result[31];
  assign \$1  = src1 - (* src = "minerva/minerva/units/adder.py:22" *) src2;
  assign \$3  = src1 + (* src = "minerva/minerva/units/adder.py:27" *) src2;
  assign \$5  = src1[31] != (* src = "minerva/minerva/units/adder.py:23" *) src2[31];
  assign \$7  = result[31] == (* src = "minerva/minerva/units/adder.py:23" *) src2[31];
  always @* begin
    \$next\result  = 32'd0;
    \$next\carry  = 1'h0;
    casez (sub)
      1'h1:
          { \$next\carry , \$next\result  } = \$1 ;
      1'hz:
          { \$next\carry , \$next\result  } = \$3 ;
    endcase
  end
  always @* begin
    \$next\overflow  = 1'h0;
    casez (sub)
      1'h1:
          \$next\overflow  = \$9 ;
      1'hz:
          \$next\overflow  = \$15 ;
    endcase
  end
  assign overflow = \$next\overflow ;
  assign result = \$next\result ;
  assign carry = \$next\carry ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.fetch.anonymous" *)
(* generator = "nMigen" *)
module anonymous(d_branch_predict_taken, d_branch_target, d_valid, x_pc, m_branch_predict_taken, m_branch_taken, m_valid, m_branch_target, a_pc, a_misaligned_fetch, f_pc);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire [30:0] \$15 ;
  wire [30:0] \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "minerva/minerva/units/fetch.py:27" *)
  reg \$next\a_misaligned_fetch ;
  (* src = "minerva/minerva/units/fetch.py:26" *)
  reg [29:0] \$next\a_pc ;
  (* src = "minerva/minerva/units/fetch.py:27" *)
  output a_misaligned_fetch;
  (* src = "minerva/minerva/units/fetch.py:26" *)
  output [29:0] a_pc;
  (* src = "minerva/minerva/units/fetch.py:17" *)
  input d_branch_predict_taken;
  (* src = "minerva/minerva/units/fetch.py:18" *)
  input [31:0] d_branch_target;
  (* src = "minerva/minerva/units/fetch.py:19" *)
  input d_valid;
  (* src = "minerva/minerva/units/fetch.py:15" *)
  input [29:0] f_pc;
  (* src = "minerva/minerva/units/fetch.py:23" *)
  input m_branch_predict_taken;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  input m_branch_taken;
  (* src = "minerva/minerva/units/fetch.py:22" *)
  input [31:0] m_branch_target;
  (* src = "minerva/minerva/units/fetch.py:24" *)
  input m_valid;
  (* src = "minerva/minerva/units/fetch.py:20" *)
  input [29:0] x_pc;
  assign \$9  = ~ (* src = "minerva/minerva/units/fetch.py:41" *) m_branch_predict_taken;
  assign \$11  = \$9  & (* src = "minerva/minerva/units/fetch.py:41" *) m_branch_taken;
  assign \$13  = \$11  & (* src = "minerva/minerva/units/fetch.py:41" *) m_valid;
  assign \$16  = f_pc + (* src = "minerva/minerva/units/fetch.py:47" *) 1'h1;
  assign \$18  = d_branch_predict_taken & (* src = "minerva/minerva/units/fetch.py:34" *) d_valid;
  assign \$1  = d_branch_predict_taken & (* src = "minerva/minerva/units/fetch.py:34" *) d_valid;
  assign \$20  = ~ (* src = "minerva/minerva/units/fetch.py:39" *) m_branch_taken;
  assign \$22  = m_branch_predict_taken & (* src = "minerva/minerva/units/fetch.py:39" *) \$20 ;
  assign \$24  = \$22  & (* src = "minerva/minerva/units/fetch.py:39" *) m_valid;
  assign \$26  = ~ (* src = "minerva/minerva/units/fetch.py:41" *) m_branch_predict_taken;
  assign \$28  = \$26  & (* src = "minerva/minerva/units/fetch.py:41" *) m_branch_taken;
  assign \$30  = \$28  & (* src = "minerva/minerva/units/fetch.py:41" *) m_valid;
  assign \$32  = | (* src = "minerva/minerva/units/fetch.py:37" *) d_branch_target[1:0];
  assign \$34  = | (* src = "minerva/minerva/units/fetch.py:44" *) m_branch_target[1:0];
  assign \$3  = ~ (* src = "minerva/minerva/units/fetch.py:39" *) m_branch_taken;
  assign \$5  = m_branch_predict_taken & (* src = "minerva/minerva/units/fetch.py:39" *) \$3 ;
  assign \$7  = \$5  & (* src = "minerva/minerva/units/fetch.py:39" *) m_valid;
  always @* begin
    \$next\a_pc  = 30'h00000000;
    casez ({ \$13 , \$7 , \$1  })
      3'bzz1:
          \$next\a_pc  = d_branch_target[31:2];
      3'bz1z:
          \$next\a_pc  = x_pc;
      3'b1zz:
          \$next\a_pc  = m_branch_target[31:2];
      3'hz:
          \$next\a_pc  = \$15 [29:0];
    endcase
  end
  always @* begin
    \$next\a_misaligned_fetch  = 1'h0;
    casez ({ \$30 , \$24 , \$18  })
      3'bzz1:
          \$next\a_misaligned_fetch  = \$32 ;
      3'bz1z:
          /* empty */;
      3'b1zz:
          \$next\a_misaligned_fetch  = \$34 ;
    endcase
  end
  assign \$15  = \$16 ;
  assign a_misaligned_fetch = \$next\a_misaligned_fetch ;
  assign a_pc = \$next\a_pc ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.loadstore.anonymous" *)
(* generator = "nMigen" *)
module \anonymous$1 (x_store_operand, x_mask, w_address, w_load_mask, w_load_data, w_load_result, x_dbus_sel, x_store_data, x_address);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire [31:0] \$15 ;
  wire [31:0] \$17 ;
  wire [31:0] \$3 ;
  wire [31:0] \$5 ;
  wire [31:0] \$7 ;
  wire [31:0] \$9 ;
  (* src = "minerva/minerva/units/loadstore.py:34" *)
  reg [31:0] \$next\w_load_result ;
  (* src = "minerva/minerva/units/loadstore.py:30" *)
  reg [3:0] \$next\x_dbus_sel ;
  (* src = "minerva/minerva/units/loadstore.py:31" *)
  reg [31:0] \$next\x_store_data ;
  (* src = "minerva/minerva/units/loadstore.py:26" *)
  input [31:0] w_address;
  (* src = "minerva/minerva/units/loadstore.py:28" *)
  input [31:0] w_load_data;
  (* src = "minerva/minerva/units/loadstore.py:27" *)
  input [2:0] w_load_mask;
  (* src = "minerva/minerva/units/loadstore.py:34" *)
  output [31:0] w_load_result;
  (* src = "minerva/minerva/units/loadstore.py:19" *)
  input [31:0] x_address;
  (* src = "minerva/minerva/units/loadstore.py:30" *)
  output [3:0] x_dbus_sel;
  (* src = "minerva/minerva/units/loadstore.py:23" *)
  input [2:0] x_mask;
  (* src = "minerva/minerva/units/loadstore.py:31" *)
  output [31:0] x_store_data;
  (* src = "minerva/minerva/units/loadstore.py:22" *)
  input [31:0] x_store_operand;
  assign \$9  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) w_load_data[31:24];
  assign \$11  = ~ (* src = "minerva/minerva/units/loadstore.py:81" *) w_address[1];
  assign \$13  = ~ (* src = "minerva/minerva/units/loadstore.py:90" *) w_address[1];
  assign \$15  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) w_load_data[15:0];
  assign \$17  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) w_load_data[31:16];
  assign \$1  = ~ (* src = "minerva/minerva/units/loadstore.py:51" *) x_address[1];
  assign \$3  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) w_load_data[7:0];
  assign \$5  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) w_load_data[15:8];
  assign \$7  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) w_load_data[23:16];
  always @* begin
    \$next\x_dbus_sel  = 4'h0;
    casez (x_mask[1:0])
      2'h0:
          casez (x_address[1:0])
            2'h0:
                \$next\x_dbus_sel  = 4'h1;
            2'h1:
                \$next\x_dbus_sel  = 4'h2;
            2'h2:
                \$next\x_dbus_sel  = 4'h4;
            2'h3:
                \$next\x_dbus_sel  = 4'h8;
          endcase
      2'h1:
          casez (\$1 )
            1'h1:
                \$next\x_dbus_sel  = 4'h3;
            1'hz:
                \$next\x_dbus_sel  = 4'hc;
          endcase
      2'h2:
          \$next\x_dbus_sel  = 4'hf;
    endcase
  end
  always @* begin
    \$next\x_store_data  = 32'd0;
    casez (x_mask)
      3'h0:
          \$next\x_store_data  = { x_store_operand[7:0], x_store_operand[7:0], x_store_operand[7:0], x_store_operand[7:0] };
      3'h1:
          \$next\x_store_data  = { x_store_operand[15:0], x_store_operand[15:0] };
      3'h2:
          \$next\x_store_data  = x_store_operand;
    endcase
  end
  always @* begin
    \$next\w_load_result  = 32'd0;
    casez (w_load_mask)
      3'h0:
          casez (w_address[1:0])
            2'h0:
                \$next\w_load_result  = { w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7], w_load_data[7:0] };
            2'h1:
                \$next\w_load_result  = { w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15:8] };
            2'h2:
                \$next\w_load_result  = { w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23], w_load_data[23:16] };
            2'h3:
                \$next\w_load_result  = { w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31:24] };
          endcase
      3'h4:
          casez (w_address[1:0])
            2'h0:
                \$next\w_load_result  = \$3 ;
            2'h1:
                \$next\w_load_result  = \$5 ;
            2'h2:
                \$next\w_load_result  = \$7 ;
            2'h3:
                \$next\w_load_result  = \$9 ;
          endcase
      3'h1:
          casez (\$11 )
            1'h1:
                \$next\w_load_result  = { w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15], w_load_data[15:0] };
            1'hz:
                \$next\w_load_result  = { w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31], w_load_data[31:16] };
          endcase
      3'h5:
          casez (\$13 )
            1'h1:
                \$next\w_load_result  = \$15 ;
            1'hz:
                \$next\w_load_result  = \$17 ;
          endcase
      3'h2:
          \$next\w_load_result  = w_load_data;
    endcase
  end
  assign w_load_result = \$next\w_load_result ;
  assign x_store_data = \$next\x_store_data ;
  assign x_dbus_sel = \$next\x_dbus_sel ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.compare" *)
(* generator = "nMigen" *)
module compare(zero, negative, overflow, carry, condition_met, op);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "minerva/minerva/units/compare.py:17" *)
  reg \$next\condition_met ;
  (* src = "minerva/minerva/units/compare.py:15" *)
  input carry;
  (* src = "minerva/minerva/units/compare.py:17" *)
  output condition_met;
  (* src = "minerva/minerva/units/compare.py:13" *)
  input negative;
  (* src = "minerva/minerva/units/compare.py:11" *)
  input [2:0] op;
  (* src = "minerva/minerva/units/compare.py:14" *)
  input overflow;
  (* src = "minerva/minerva/units/compare.py:12" *)
  input zero;
  assign \$9  = negative == (* src = "minerva/minerva/units/compare.py:30" *) overflow;
  assign \$11  = ~ (* src = "minerva/minerva/units/compare.py:32" *) zero;
  assign \$13  = \$11  & (* src = "minerva/minerva/units/compare.py:32" *) carry;
  assign \$15  = ~ (* src = "minerva/minerva/units/compare.py:34" *) carry;
  assign \$1  = ~ (* src = "minerva/minerva/units/compare.py:26" *) zero;
  assign \$3  = ~ (* src = "minerva/minerva/units/compare.py:28" *) zero;
  assign \$5  = negative != (* src = "minerva/minerva/units/compare.py:28" *) overflow;
  assign \$7  = \$3  & (* src = "minerva/minerva/units/compare.py:28" *) \$5 ;
  always @* begin
    \$next\condition_met  = 1'h0;
    casez (op)
      3'h0:
          \$next\condition_met  = zero;
      3'h1:
          \$next\condition_met  = \$1 ;
      3'h4:
          \$next\condition_met  = \$7 ;
      3'h5:
          \$next\condition_met  = \$9 ;
      3'h6:
          \$next\condition_met  = \$13 ;
      3'h7:
          \$next\condition_met  = \$15 ;
    endcase
  end
  assign condition_met = \$next\condition_met ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.csrf" *)
(* generator = "nMigen" *)
module csrf(mepc_r__value, port__addr, port__en, \port__en$1 , \port__addr$2 , port__data, \port__data$3 , mstatus_r__uie, mstatus_r__sie, mstatus_r__mie, mstatus_r__upie, mstatus_r__spie, mstatus_r__mpie, mstatus_r__spp, mstatus_r__mpp, mstatus_r__fs, mstatus_r__xs, mstatus_r__mprv, mstatus_r__sum, mstatus_r__mxr, mstatus_r__tvm, mstatus_r__tw, mstatus_r__tsr, mstatus_r__sd, misa_r__extensions, misa_r__mxl, mie_r__usie, mie_r__ssie, mie_r__msie, mie_r__utie, mie_r__stie, mie_r__mtie, mie_r__ueie, mie_r__seie, mie_r__meie, mtvec_r__mode, mscratch_r__value, mcause_r__ecode, mcause_r__interrupt, mip_r__usip, mip_r__ssip, mip_r__msip, mip_r__utip, mip_r__stip, mip_r__mtip, mip_r__ueip, mip_r__seip, mip_r__meip, irq_mask_r__value, irq_pending_r__value, mstatus_w__uie, mstatus_w__sie, mstatus_w__wpri0, mstatus_r__wpri0, mstatus_w__mie, mstatus_w__upie, mstatus_w__spie, mstatus_w__wpri1, mstatus_r__wpri1, mstatus_w__mpie, mstatus_w__spp, mstatus_w__wpri2, mstatus_r__wpri2, mstatus_w__mpp, mstatus_w__fs, mstatus_w__xs, mstatus_w__mprv, mstatus_w__sum, mstatus_w__mxr, mstatus_w__tvm, mstatus_w__tw, mstatus_w__tsr, mstatus_w__wpri3, mstatus_r__wpri3, mstatus_w__sd, mstatus_we, misa_w__extensions, misa_w__wiri0, misa_r__wiri0, misa_w__mxl, misa_we, mie_w__usie, mie_w__ssie, mie_w__wpri0, mie_r__wpri0, mie_w__msie, mie_w__utie, mie_w__stie, mie_w__wpri1, mie_r__wpri1, mie_w__mtie, mie_w__ueie, mie_w__seie, mie_w__wpri2, mie_r__wpri2, mie_w__meie, mie_w__wpri3, mie_r__wpri3, mie_we, mtvec_w__mode, mtvec_w__base, mtvec_we, mscratch_w__value, mscratch_we, mepc_w__value, mepc_we, mcause_w__ecode, mcause_w__interrupt, mcause_we, mip_w__usip, mip_w__ssip, mip_w__wiri0, mip_r__wiri0, mip_w__msip, mip_w__utip, mip_w__stip, mip_w__wiri1, mip_r__wiri1, mip_w__mtip, mip_w__ueip, mip_w__seip, mip_w__wiri2, mip_r__wiri2, mip_w__meip, mip_w__wiri3, mip_r__wiri3, mip_we, irq_mask_w__value, irq_mask_we, irq_pending_w__value, irq_pending_we, mtvec_r__base);
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\dat_r__base ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \$next\dat_r__ecode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [25:0] \$next\dat_r__extensions ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_r__fs ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__interrupt ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__meie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__meip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__mie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_r__mode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__mpie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_r__mpp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__mprv ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__msie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__msip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__mtie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__mtip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_r__mxl ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__mxr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__sd ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__seie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__seip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__sie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__spie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__spp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__ssie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__ssip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__stie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__stip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__sum ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__tsr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__tvm ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__tw ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__ueie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__ueip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__uie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__upie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__usie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__usip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__utie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__utip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_r__value ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_r__value$10 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_r__value$11 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_r__value$8 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\dat_r__wiri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wiri0$9 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wiri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wiri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\dat_r__wiri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wpri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wpri0$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wpri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wpri1$5 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_r__wpri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_r__wpri2$6 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [7:0] \$next\dat_r__wpri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\dat_r__wpri3$7 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_r__xs ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\dat_w__base ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \$next\dat_w__ecode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [25:0] \$next\dat_w__extensions ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_w__fs ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__interrupt ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__meie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__meip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__mie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_w__mode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__mpie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_w__mpp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__mprv ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__msie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__msip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__mtie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__mtip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_w__mxl ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__mxr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__sd ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__seie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__seip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__sie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__spie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__spp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__ssie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__ssip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__stie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__stip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__sum ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__tsr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__tvm ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__tw ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__ueie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__ueip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__uie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__upie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__usie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__usip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__utie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__utip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_w__value ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_w__value$16 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_w__value$18 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dat_w__value$19 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\dat_w__wiri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wiri0$17 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wiri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wiri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\dat_w__wiri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wpri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wpri0$12 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wpri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wpri1$13 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_w__wpri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dat_w__wpri2$14 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [7:0] \$next\dat_w__wpri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\dat_w__wpri3$15 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dat_w__xs ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\irq_mask_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\irq_mask_w__value ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\irq_mask_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\irq_pending_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\irq_pending_w__value ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\irq_pending_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mcause_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \$next\mcause_w__ecode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mcause_w__interrupt ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mcause_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mepc_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\mepc_w__value ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mepc_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mie_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__meie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__msie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__mtie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__seie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__ssie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__stie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__ueie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__usie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__utie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__wpri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__wpri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_w__wpri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\mie_w__wpri3 ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mie_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mip_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__meip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__msip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__mtip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__seip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__ssip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__stip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__ueip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__usip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__utip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__wiri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__wiri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_w__wiri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\mip_w__wiri3 ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mip_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\misa_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [25:0] \$next\misa_w__extensions ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\misa_w__mxl ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\misa_w__wiri0 ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\misa_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mscratch_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\mscratch_w__value ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mscratch_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mstatus_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_w__fs ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__mie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__mpie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_w__mpp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__mprv ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__mxr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__sd ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__sie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__spie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__spp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__sum ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__tsr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__tvm ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__tw ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__uie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__upie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__wpri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_w__wpri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_w__wpri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [7:0] \$next\mstatus_w__wpri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_w__xs ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mstatus_we ;
  (* src = "minerva/minerva/csr.py:28" *)
  reg \$next\mtvec_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\mtvec_w__base ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mtvec_w__mode ;
  (* src = "minerva/minerva/csr.py:30" *)
  reg \$next\mtvec_we ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\port__data$3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] dat_r__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [30:0] dat_r__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [25:0] dat_r__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_r__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_r__mode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_r__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_r__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] dat_r__value;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \dat_r__value$10 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \dat_r__value$11 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \dat_r__value$8 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] dat_r__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_r__wiri0$9 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] dat_r__wiri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_r__wpri0$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_r__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_r__wpri1$5 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_r__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_r__wpri2$6 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [7:0] dat_r__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] \dat_r__wpri3$7 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_r__xs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] dat_w__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [30:0] dat_w__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [25:0] dat_w__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_w__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_w__mode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_w__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_w__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] dat_w__value;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \dat_w__value$16 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \dat_w__value$18 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \dat_w__value$19 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] dat_w__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_w__wiri0$17 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] dat_w__wiri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_w__wpri0$12 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire dat_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_w__wpri1$13 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \dat_w__wpri2$14 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [7:0] dat_w__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] \dat_w__wpri3$15 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] dat_w__xs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] irq_mask_r__value;
  (* src = "minerva/minerva/csr.py:28" *)
  wire irq_mask_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] irq_mask_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  output irq_mask_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] irq_pending_r__value;
  (* src = "minerva/minerva/csr.py:28" *)
  wire irq_pending_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] irq_pending_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  output irq_pending_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [30:0] mcause_r__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mcause_r__interrupt;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mcause_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [30:0] mcause_w__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mcause_w__interrupt;
  (* src = "minerva/minerva/csr.py:30" *)
  output mcause_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] mepc_r__value;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mepc_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] mepc_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  output mepc_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_r__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [19:0] mie_r__wpri3;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mie_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [19:0] mie_w__wpri3;
  (* src = "minerva/minerva/csr.py:30" *)
  output mie_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_r__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [19:0] mip_r__wiri3;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mip_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_w__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [19:0] mip_w__wiri3;
  (* src = "minerva/minerva/csr.py:30" *)
  output mip_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [25:0] misa_r__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] misa_r__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [3:0] misa_r__wiri0;
  (* src = "minerva/minerva/csr.py:28" *)
  wire misa_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [25:0] misa_w__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] misa_w__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [3:0] misa_w__wiri0;
  (* src = "minerva/minerva/csr.py:30" *)
  output misa_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] mscratch_r__value;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mscratch_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] mscratch_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  output mscratch_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_r__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_r__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_r__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_r__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [7:0] mstatus_r__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_r__xs;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mstatus_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_w__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_w__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [7:0] mstatus_w__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_w__xs;
  (* src = "minerva/minerva/csr.py:30" *)
  output mstatus_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [29:0] mtvec_r__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mtvec_r__mode;
  (* src = "minerva/minerva/csr.py:28" *)
  wire mtvec_re;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [29:0] mtvec_w__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mtvec_w__mode;
  (* src = "minerva/minerva/csr.py:30" *)
  output mtvec_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [12:0] port__addr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [12:0] \port__addr$2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] port__data;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] \port__data$3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input port__en;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input \port__en$1 ;
  always @* begin
    \$next\port__data$3  = 32'd0;
    casez (port__addr)
      13'h0300:
          \$next\port__data$3  = { dat_r__sd, dat_r__wpri3, dat_r__tsr, dat_r__tw, dat_r__tvm, dat_r__mxr, dat_r__sum, dat_r__mprv, dat_r__xs, dat_r__fs, dat_r__mpp, dat_r__wpri2, dat_r__spp, dat_r__mpie, dat_r__wpri1, dat_r__spie, dat_r__upie, dat_r__mie, dat_r__wpri0, dat_r__sie, dat_r__uie };
      13'h0301:
          \$next\port__data$3  = { dat_r__mxl, dat_r__wiri0, dat_r__extensions };
      13'h0304:
          \$next\port__data$3  = { \dat_r__wpri3$7 , dat_r__meie, \dat_r__wpri2$6 , dat_r__seie, dat_r__ueie, dat_r__mtie, \dat_r__wpri1$5 , dat_r__stie, dat_r__utie, dat_r__msie, \dat_r__wpri0$4 , dat_r__ssie, dat_r__usie };
      13'h0305:
          \$next\port__data$3  = { dat_r__base, dat_r__mode };
      13'h0340:
          \$next\port__data$3  = dat_r__value;
      13'h0341:
          \$next\port__data$3  = \dat_r__value$8 ;
      13'h0342:
          \$next\port__data$3  = { dat_r__interrupt, dat_r__ecode };
      13'h0344:
          \$next\port__data$3  = { dat_r__wiri3, dat_r__meip, dat_r__wiri2, dat_r__seip, dat_r__ueip, dat_r__mtip, dat_r__wiri1, dat_r__stip, dat_r__utip, dat_r__msip, \dat_r__wiri0$9 , dat_r__ssip, dat_r__usip };
      13'h0330:
          \$next\port__data$3  = \dat_r__value$10 ;
      13'h0360:
          \$next\port__data$3  = \dat_r__value$11 ;
    endcase
  end
  always @* begin
    \$next\dat_r__uie  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__uie  = mstatus_r__uie;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri2  = 2'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__wpri2  = 2'h0;
    endcase
  end
  always @* begin
    \$next\mstatus_w__mpp  = 2'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__mpp  = dat_w__mpp;
    endcase
  end
  always @* begin
    \$next\mstatus_w__fs  = 2'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__fs  = dat_w__fs;
    endcase
  end
  always @* begin
    \$next\mstatus_w__xs  = 2'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__xs  = dat_w__xs;
    endcase
  end
  always @* begin
    \$next\mstatus_w__mprv  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__mprv  = dat_w__mprv;
    endcase
  end
  always @* begin
    \$next\mstatus_w__sum  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__sum  = dat_w__sum;
    endcase
  end
  always @* begin
    \$next\mstatus_w__mxr  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__mxr  = dat_w__mxr;
    endcase
  end
  always @* begin
    \$next\mstatus_w__tvm  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__tvm  = dat_w__tvm;
    endcase
  end
  always @* begin
    \$next\mstatus_w__tw  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__tw  = dat_w__tw;
    endcase
  end
  always @* begin
    \$next\mstatus_w__tsr  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__tsr  = dat_w__tsr;
    endcase
  end
  always @* begin
    \$next\mstatus_w__wpri3  = 8'h00;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__wpri3  = mstatus_r__wpri3;
    endcase
  end
  always @* begin
    \$next\dat_r__mpp  = 2'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__mpp  = mstatus_r__mpp;
    endcase
  end
  always @* begin
    \$next\mstatus_w__sd  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__sd  = dat_w__sd;
    endcase
  end
  always @* begin
    \$next\mstatus_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__extensions  = 26'h0000000;
    \$next\dat_w__wiri0  = 4'h0;
    \$next\dat_w__mxl  = 2'h0;
    casez (\port__addr$2 )
      13'h0301:
          { \$next\dat_w__mxl , \$next\dat_w__wiri0 , \$next\dat_w__extensions  } = port__data;
    endcase
  end
  always @* begin
    \$next\misa_w__extensions  = 26'h0000000;
    casez (\port__addr$2 )
      13'h0301:
          \$next\misa_w__extensions  = dat_w__extensions;
    endcase
  end
  always @* begin
    \$next\misa_w__wiri0  = 4'h0;
    casez (\port__addr$2 )
      13'h0301:
          \$next\misa_w__wiri0  = misa_r__wiri0;
    endcase
  end
  always @* begin
    \$next\misa_w__mxl  = 2'h0;
    casez (\port__addr$2 )
      13'h0301:
          \$next\misa_w__mxl  = dat_w__mxl;
    endcase
  end
  always @* begin
    \$next\misa_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0301:
          \$next\misa_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__usie  = 1'h0;
    \$next\dat_w__ssie  = 1'h0;
    \$next\dat_w__wpri0$12  = 1'h0;
    \$next\dat_w__msie  = 1'h0;
    \$next\dat_w__utie  = 1'h0;
    \$next\dat_w__stie  = 1'h0;
    \$next\dat_w__wpri1$13  = 1'h0;
    \$next\dat_w__mtie  = 1'h0;
    \$next\dat_w__ueie  = 1'h0;
    \$next\dat_w__seie  = 1'h0;
    \$next\dat_w__wpri2$14  = 1'h0;
    \$next\dat_w__meie  = 1'h0;
    \$next\dat_w__wpri3$15  = 20'h00000;
    casez (\port__addr$2 )
      13'h0304:
          { \$next\dat_w__wpri3$15 , \$next\dat_w__meie , \$next\dat_w__wpri2$14 , \$next\dat_w__seie , \$next\dat_w__ueie , \$next\dat_w__mtie , \$next\dat_w__wpri1$13 , \$next\dat_w__stie , \$next\dat_w__utie , \$next\dat_w__msie , \$next\dat_w__wpri0$12 , \$next\dat_w__ssie , \$next\dat_w__usie  } = port__data;
    endcase
  end
  always @* begin
    \$next\dat_r__fs  = 2'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__fs  = mstatus_r__fs;
    endcase
  end
  always @* begin
    \$next\dat_r__xs  = 2'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__xs  = mstatus_r__xs;
    endcase
  end
  always @* begin
    \$next\mie_w__usie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__usie  = dat_w__usie;
    endcase
  end
  always @* begin
    \$next\mie_w__ssie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__ssie  = dat_w__ssie;
    endcase
  end
  always @* begin
    \$next\mie_w__wpri0  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__wpri0  = mie_r__wpri0;
    endcase
  end
  always @* begin
    \$next\mie_w__msie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__msie  = dat_w__msie;
    endcase
  end
  always @* begin
    \$next\mie_w__utie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__utie  = dat_w__utie;
    endcase
  end
  always @* begin
    \$next\mie_w__stie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__stie  = dat_w__stie;
    endcase
  end
  always @* begin
    \$next\mie_w__wpri1  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__wpri1  = mie_r__wpri1;
    endcase
  end
  always @* begin
    \$next\mie_w__mtie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__mtie  = dat_w__mtie;
    endcase
  end
  always @* begin
    \$next\dat_r__mprv  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__mprv  = mstatus_r__mprv;
    endcase
  end
  always @* begin
    \$next\mie_w__ueie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__ueie  = dat_w__ueie;
    endcase
  end
  always @* begin
    \$next\mie_w__seie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__seie  = dat_w__seie;
    endcase
  end
  always @* begin
    \$next\mie_w__wpri2  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__wpri2  = mie_r__wpri2;
    endcase
  end
  always @* begin
    \$next\mie_w__meie  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__meie  = dat_w__meie;
    endcase
  end
  always @* begin
    \$next\mie_w__wpri3  = 20'h00000;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_w__wpri3  = mie_r__wpri3;
    endcase
  end
  always @* begin
    \$next\mie_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0304:
          \$next\mie_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__mode  = 2'h0;
    \$next\dat_w__base  = 30'h00000000;
    casez (\port__addr$2 )
      13'h0305:
          { \$next\dat_w__base , \$next\dat_w__mode  } = port__data;
    endcase
  end
  always @* begin
    \$next\mtvec_w__mode  = 2'h0;
    casez (\port__addr$2 )
      13'h0305:
          \$next\mtvec_w__mode  = dat_w__mode;
    endcase
  end
  always @* begin
    \$next\mtvec_w__base  = 30'h00000000;
    casez (\port__addr$2 )
      13'h0305:
          \$next\mtvec_w__base  = dat_w__base;
    endcase
  end
  always @* begin
    \$next\dat_r__sum  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__sum  = mstatus_r__sum;
    endcase
  end
  always @* begin
    \$next\mtvec_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0305:
          \$next\mtvec_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__value  = 32'd0;
    casez (\port__addr$2 )
      13'h0340:
          \$next\dat_w__value  = port__data;
    endcase
  end
  always @* begin
    \$next\mscratch_w__value  = 32'd0;
    casez (\port__addr$2 )
      13'h0340:
          \$next\mscratch_w__value  = dat_w__value;
    endcase
  end
  always @* begin
    \$next\mscratch_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0340:
          \$next\mscratch_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__value$16  = 32'd0;
    casez (\port__addr$2 )
      13'h0341:
          \$next\dat_w__value$16  = port__data;
    endcase
  end
  always @* begin
    \$next\mepc_w__value  = 32'd0;
    casez (\port__addr$2 )
      13'h0341:
          \$next\mepc_w__value  = \dat_w__value$16 ;
    endcase
  end
  always @* begin
    \$next\mepc_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0341:
          \$next\mepc_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__ecode  = 31'h00000000;
    \$next\dat_w__interrupt  = 1'h0;
    casez (\port__addr$2 )
      13'h0342:
          { \$next\dat_w__interrupt , \$next\dat_w__ecode  } = port__data;
    endcase
  end
  always @* begin
    \$next\mcause_w__ecode  = 31'h00000000;
    casez (\port__addr$2 )
      13'h0342:
          \$next\mcause_w__ecode  = dat_w__ecode;
    endcase
  end
  always @* begin
    \$next\dat_r__mxr  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__mxr  = mstatus_r__mxr;
    endcase
  end
  always @* begin
    \$next\mcause_w__interrupt  = 1'h0;
    casez (\port__addr$2 )
      13'h0342:
          \$next\mcause_w__interrupt  = dat_w__interrupt;
    endcase
  end
  always @* begin
    \$next\mcause_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0342:
          \$next\mcause_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__usip  = 1'h0;
    \$next\dat_w__ssip  = 1'h0;
    \$next\dat_w__wiri0$17  = 1'h0;
    \$next\dat_w__msip  = 1'h0;
    \$next\dat_w__utip  = 1'h0;
    \$next\dat_w__stip  = 1'h0;
    \$next\dat_w__wiri1  = 1'h0;
    \$next\dat_w__mtip  = 1'h0;
    \$next\dat_w__ueip  = 1'h0;
    \$next\dat_w__seip  = 1'h0;
    \$next\dat_w__wiri2  = 1'h0;
    \$next\dat_w__meip  = 1'h0;
    \$next\dat_w__wiri3  = 20'h00000;
    casez (\port__addr$2 )
      13'h0344:
          { \$next\dat_w__wiri3 , \$next\dat_w__meip , \$next\dat_w__wiri2 , \$next\dat_w__seip , \$next\dat_w__ueip , \$next\dat_w__mtip , \$next\dat_w__wiri1 , \$next\dat_w__stip , \$next\dat_w__utip , \$next\dat_w__msip , \$next\dat_w__wiri0$17 , \$next\dat_w__ssip , \$next\dat_w__usip  } = port__data;
    endcase
  end
  always @* begin
    \$next\dat_r__tvm  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__tvm  = mstatus_r__tvm;
    endcase
  end
  always @* begin
    \$next\mip_w__usip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__usip  = dat_w__usip;
    endcase
  end
  always @* begin
    \$next\mip_w__ssip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__ssip  = dat_w__ssip;
    endcase
  end
  always @* begin
    \$next\mip_w__wiri0  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__wiri0  = mip_r__wiri0;
    endcase
  end
  always @* begin
    \$next\mip_w__msip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__msip  = dat_w__msip;
    endcase
  end
  always @* begin
    \$next\mip_w__utip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__utip  = dat_w__utip;
    endcase
  end
  always @* begin
    \$next\dat_r__tw  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__tw  = mstatus_r__tw;
    endcase
  end
  always @* begin
    \$next\mip_w__stip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__stip  = dat_w__stip;
    endcase
  end
  always @* begin
    \$next\mip_w__wiri1  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__wiri1  = mip_r__wiri1;
    endcase
  end
  always @* begin
    \$next\mip_w__mtip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__mtip  = dat_w__mtip;
    endcase
  end
  always @* begin
    \$next\mip_w__ueip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__ueip  = dat_w__ueip;
    endcase
  end
  always @* begin
    \$next\mip_w__seip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__seip  = dat_w__seip;
    endcase
  end
  always @* begin
    \$next\mip_w__wiri2  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__wiri2  = mip_r__wiri2;
    endcase
  end
  always @* begin
    \$next\mip_w__meip  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__meip  = dat_w__meip;
    endcase
  end
  always @* begin
    \$next\mip_w__wiri3  = 20'h00000;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_w__wiri3  = mip_r__wiri3;
    endcase
  end
  always @* begin
    \$next\mip_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0344:
          \$next\mip_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__value$18  = 32'd0;
    casez (\port__addr$2 )
      13'h0330:
          \$next\dat_w__value$18  = port__data;
    endcase
  end
  always @* begin
    \$next\dat_r__tsr  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__tsr  = mstatus_r__tsr;
    endcase
  end
  always @* begin
    \$next\irq_mask_w__value  = 32'd0;
    casez (\port__addr$2 )
      13'h0330:
          \$next\irq_mask_w__value  = \dat_w__value$18 ;
    endcase
  end
  always @* begin
    \$next\irq_mask_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0330:
          \$next\irq_mask_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_w__value$19  = 32'd0;
    casez (\port__addr$2 )
      13'h0360:
          \$next\dat_w__value$19  = port__data;
    endcase
  end
  always @* begin
    \$next\irq_pending_w__value  = 32'd0;
    casez (\port__addr$2 )
      13'h0360:
          \$next\irq_pending_w__value  = \dat_w__value$19 ;
    endcase
  end
  always @* begin
    \$next\irq_pending_we  = 1'h0;
    casez (\port__addr$2 )
      13'h0360:
          \$next\irq_pending_we  = \port__en$1 ;
    endcase
  end
  always @* begin
    \$next\dat_r__sie  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__sie  = mstatus_r__sie;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri3  = 8'h00;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__wpri3  = 8'h00;
    endcase
  end
  always @* begin
    \$next\dat_r__sd  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__sd  = mstatus_r__sd;
    endcase
  end
  always @* begin
    \$next\mstatus_re  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\mstatus_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__extensions  = 26'h0000000;
    casez (port__addr)
      13'h0301:
          \$next\dat_r__extensions  = misa_r__extensions;
    endcase
  end
  always @* begin
    \$next\dat_r__wiri0  = 4'h0;
    casez (port__addr)
      13'h0301:
          \$next\dat_r__wiri0  = 4'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__mxl  = 2'h0;
    casez (port__addr)
      13'h0301:
          \$next\dat_r__mxl  = misa_r__mxl;
    endcase
  end
  always @* begin
    \$next\misa_re  = 1'h0;
    casez (port__addr)
      13'h0301:
          \$next\misa_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__usie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__usie  = mie_r__usie;
    endcase
  end
  always @* begin
    \$next\dat_r__ssie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__ssie  = mie_r__ssie;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri0$4  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__wpri0$4  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri0  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__wpri0  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__msie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__msie  = mie_r__msie;
    endcase
  end
  always @* begin
    \$next\dat_r__utie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__utie  = mie_r__utie;
    endcase
  end
  always @* begin
    \$next\dat_r__stie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__stie  = mie_r__stie;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri1$5  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__wpri1$5  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__mtie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__mtie  = mie_r__mtie;
    endcase
  end
  always @* begin
    \$next\dat_r__ueie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__ueie  = mie_r__ueie;
    endcase
  end
  always @* begin
    \$next\dat_r__seie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__seie  = mie_r__seie;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri2$6  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__wpri2$6  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__meie  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__meie  = mie_r__meie;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri3$7  = 20'h00000;
    casez (port__addr)
      13'h0304:
          \$next\dat_r__wpri3$7  = 20'h00000;
    endcase
  end
  always @* begin
    \$next\dat_r__mie  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__mie  = mstatus_r__mie;
    endcase
  end
  always @* begin
    \$next\mie_re  = 1'h0;
    casez (port__addr)
      13'h0304:
          \$next\mie_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__mode  = 2'h0;
    casez (port__addr)
      13'h0305:
          \$next\dat_r__mode  = mtvec_r__mode;
    endcase
  end
  always @* begin
    \$next\dat_r__base  = 30'h00000000;
    casez (port__addr)
      13'h0305:
          \$next\dat_r__base  = mtvec_r__base;
    endcase
  end
  always @* begin
    \$next\mtvec_re  = 1'h0;
    casez (port__addr)
      13'h0305:
          \$next\mtvec_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__value  = 32'd0;
    casez (port__addr)
      13'h0340:
          \$next\dat_r__value  = mscratch_r__value;
    endcase
  end
  always @* begin
    \$next\mscratch_re  = 1'h0;
    casez (port__addr)
      13'h0340:
          \$next\mscratch_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__value$8  = 32'd0;
    casez (port__addr)
      13'h0341:
          \$next\dat_r__value$8  = mepc_r__value;
    endcase
  end
  always @* begin
    \$next\mepc_re  = 1'h0;
    casez (port__addr)
      13'h0341:
          \$next\mepc_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__ecode  = 31'h00000000;
    casez (port__addr)
      13'h0342:
          \$next\dat_r__ecode  = mcause_r__ecode;
    endcase
  end
  always @* begin
    \$next\dat_r__interrupt  = 1'h0;
    casez (port__addr)
      13'h0342:
          \$next\dat_r__interrupt  = mcause_r__interrupt;
    endcase
  end
  always @* begin
    \$next\dat_r__upie  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__upie  = mstatus_r__upie;
    endcase
  end
  always @* begin
    \$next\mcause_re  = 1'h0;
    casez (port__addr)
      13'h0342:
          \$next\mcause_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__usip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__usip  = mip_r__usip;
    endcase
  end
  always @* begin
    \$next\dat_r__ssip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__ssip  = mip_r__ssip;
    endcase
  end
  always @* begin
    \$next\dat_r__wiri0$9  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__wiri0$9  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__msip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__msip  = mip_r__msip;
    endcase
  end
  always @* begin
    \$next\dat_r__utip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__utip  = mip_r__utip;
    endcase
  end
  always @* begin
    \$next\dat_r__stip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__stip  = mip_r__stip;
    endcase
  end
  always @* begin
    \$next\dat_r__wiri1  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__wiri1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__mtip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__mtip  = mip_r__mtip;
    endcase
  end
  always @* begin
    \$next\dat_r__ueip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__ueip  = mip_r__ueip;
    endcase
  end
  always @* begin
    \$next\dat_r__spie  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__spie  = mstatus_r__spie;
    endcase
  end
  always @* begin
    \$next\dat_r__seip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__seip  = mip_r__seip;
    endcase
  end
  always @* begin
    \$next\dat_r__wiri2  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__wiri2  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__meip  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__meip  = mip_r__meip;
    endcase
  end
  always @* begin
    \$next\dat_r__wiri3  = 20'h00000;
    casez (port__addr)
      13'h0344:
          \$next\dat_r__wiri3  = 20'h00000;
    endcase
  end
  always @* begin
    \$next\mip_re  = 1'h0;
    casez (port__addr)
      13'h0344:
          \$next\mip_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__value$10  = 32'd0;
    casez (port__addr)
      13'h0330:
          \$next\dat_r__value$10  = irq_mask_r__value;
    endcase
  end
  always @* begin
    \$next\irq_mask_re  = 1'h0;
    casez (port__addr)
      13'h0330:
          \$next\irq_mask_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_r__value$11  = 32'd0;
    casez (port__addr)
      13'h0360:
          \$next\dat_r__value$11  = irq_pending_r__value;
    endcase
  end
  always @* begin
    \$next\irq_pending_re  = 1'h0;
    casez (port__addr)
      13'h0360:
          \$next\irq_pending_re  = port__en;
    endcase
  end
  always @* begin
    \$next\dat_w__uie  = 1'h0;
    \$next\dat_w__sie  = 1'h0;
    \$next\dat_w__wpri0  = 1'h0;
    \$next\dat_w__mie  = 1'h0;
    \$next\dat_w__upie  = 1'h0;
    \$next\dat_w__spie  = 1'h0;
    \$next\dat_w__wpri1  = 1'h0;
    \$next\dat_w__mpie  = 1'h0;
    \$next\dat_w__spp  = 1'h0;
    \$next\dat_w__wpri2  = 2'h0;
    \$next\dat_w__mpp  = 2'h0;
    \$next\dat_w__fs  = 2'h0;
    \$next\dat_w__xs  = 2'h0;
    \$next\dat_w__mprv  = 1'h0;
    \$next\dat_w__sum  = 1'h0;
    \$next\dat_w__mxr  = 1'h0;
    \$next\dat_w__tvm  = 1'h0;
    \$next\dat_w__tw  = 1'h0;
    \$next\dat_w__tsr  = 1'h0;
    \$next\dat_w__wpri3  = 8'h00;
    \$next\dat_w__sd  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          { \$next\dat_w__sd , \$next\dat_w__wpri3 , \$next\dat_w__tsr , \$next\dat_w__tw , \$next\dat_w__tvm , \$next\dat_w__mxr , \$next\dat_w__sum , \$next\dat_w__mprv , \$next\dat_w__xs , \$next\dat_w__fs , \$next\dat_w__mpp , \$next\dat_w__wpri2 , \$next\dat_w__spp , \$next\dat_w__mpie , \$next\dat_w__wpri1 , \$next\dat_w__spie , \$next\dat_w__upie , \$next\dat_w__mie , \$next\dat_w__wpri0 , \$next\dat_w__sie , \$next\dat_w__uie  } = port__data;
    endcase
  end
  always @* begin
    \$next\dat_r__wpri1  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__wpri1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dat_r__mpie  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__mpie  = mstatus_r__mpie;
    endcase
  end
  always @* begin
    \$next\dat_r__spp  = 1'h0;
    casez (port__addr)
      13'h0300:
          \$next\dat_r__spp  = mstatus_r__spp;
    endcase
  end
  always @* begin
    \$next\mstatus_w__uie  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__uie  = dat_w__uie;
    endcase
  end
  always @* begin
    \$next\mstatus_w__sie  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__sie  = dat_w__sie;
    endcase
  end
  always @* begin
    \$next\mstatus_w__wpri0  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__wpri0  = mstatus_r__wpri0;
    endcase
  end
  always @* begin
    \$next\mstatus_w__mie  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__mie  = dat_w__mie;
    endcase
  end
  always @* begin
    \$next\mstatus_w__upie  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__upie  = dat_w__upie;
    endcase
  end
  always @* begin
    \$next\mstatus_w__spie  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__spie  = dat_w__spie;
    endcase
  end
  always @* begin
    \$next\mstatus_w__wpri1  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__wpri1  = mstatus_r__wpri1;
    endcase
  end
  always @* begin
    \$next\mstatus_w__mpie  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__mpie  = dat_w__mpie;
    endcase
  end
  always @* begin
    \$next\mstatus_w__spp  = 1'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__spp  = dat_w__spp;
    endcase
  end
  always @* begin
    \$next\mstatus_w__wpri2  = 2'h0;
    casez (\port__addr$2 )
      13'h0300:
          \$next\mstatus_w__wpri2  = mstatus_r__wpri2;
    endcase
  end
  assign irq_pending_we = \$next\irq_pending_we ;
  assign irq_pending_w__value = \$next\irq_pending_w__value ;
  assign \dat_w__value$19  = \$next\dat_w__value$19 ;
  assign irq_mask_we = \$next\irq_mask_we ;
  assign irq_mask_w__value = \$next\irq_mask_w__value ;
  assign \dat_w__value$18  = \$next\dat_w__value$18 ;
  assign mip_we = \$next\mip_we ;
  assign mip_w__wiri3 = \$next\mip_w__wiri3 ;
  assign mip_w__meip = \$next\mip_w__meip ;
  assign mip_w__wiri2 = \$next\mip_w__wiri2 ;
  assign mip_w__seip = \$next\mip_w__seip ;
  assign mip_w__ueip = \$next\mip_w__ueip ;
  assign mip_w__mtip = \$next\mip_w__mtip ;
  assign mip_w__wiri1 = \$next\mip_w__wiri1 ;
  assign mip_w__stip = \$next\mip_w__stip ;
  assign mip_w__utip = \$next\mip_w__utip ;
  assign mip_w__msip = \$next\mip_w__msip ;
  assign mip_w__wiri0 = \$next\mip_w__wiri0 ;
  assign mip_w__ssip = \$next\mip_w__ssip ;
  assign mip_w__usip = \$next\mip_w__usip ;
  assign dat_w__usip = \$next\dat_w__usip ;
  assign dat_w__ssip = \$next\dat_w__ssip ;
  assign \dat_w__wiri0$17  = \$next\dat_w__wiri0$17 ;
  assign dat_w__msip = \$next\dat_w__msip ;
  assign dat_w__utip = \$next\dat_w__utip ;
  assign dat_w__stip = \$next\dat_w__stip ;
  assign dat_w__wiri1 = \$next\dat_w__wiri1 ;
  assign dat_w__mtip = \$next\dat_w__mtip ;
  assign dat_w__ueip = \$next\dat_w__ueip ;
  assign dat_w__seip = \$next\dat_w__seip ;
  assign dat_w__wiri2 = \$next\dat_w__wiri2 ;
  assign dat_w__meip = \$next\dat_w__meip ;
  assign dat_w__wiri3 = \$next\dat_w__wiri3 ;
  assign mcause_we = \$next\mcause_we ;
  assign mcause_w__interrupt = \$next\mcause_w__interrupt ;
  assign mcause_w__ecode = \$next\mcause_w__ecode ;
  assign dat_w__ecode = \$next\dat_w__ecode ;
  assign dat_w__interrupt = \$next\dat_w__interrupt ;
  assign mepc_we = \$next\mepc_we ;
  assign mepc_w__value = \$next\mepc_w__value ;
  assign \dat_w__value$16  = \$next\dat_w__value$16 ;
  assign mscratch_we = \$next\mscratch_we ;
  assign mscratch_w__value = \$next\mscratch_w__value ;
  assign dat_w__value = \$next\dat_w__value ;
  assign mtvec_we = \$next\mtvec_we ;
  assign mtvec_w__base = \$next\mtvec_w__base ;
  assign mtvec_w__mode = \$next\mtvec_w__mode ;
  assign dat_w__mode = \$next\dat_w__mode ;
  assign dat_w__base = \$next\dat_w__base ;
  assign mie_we = \$next\mie_we ;
  assign mie_w__wpri3 = \$next\mie_w__wpri3 ;
  assign mie_w__meie = \$next\mie_w__meie ;
  assign mie_w__wpri2 = \$next\mie_w__wpri2 ;
  assign mie_w__seie = \$next\mie_w__seie ;
  assign mie_w__ueie = \$next\mie_w__ueie ;
  assign mie_w__mtie = \$next\mie_w__mtie ;
  assign mie_w__wpri1 = \$next\mie_w__wpri1 ;
  assign mie_w__stie = \$next\mie_w__stie ;
  assign mie_w__utie = \$next\mie_w__utie ;
  assign mie_w__msie = \$next\mie_w__msie ;
  assign mie_w__wpri0 = \$next\mie_w__wpri0 ;
  assign mie_w__ssie = \$next\mie_w__ssie ;
  assign mie_w__usie = \$next\mie_w__usie ;
  assign dat_w__usie = \$next\dat_w__usie ;
  assign dat_w__ssie = \$next\dat_w__ssie ;
  assign \dat_w__wpri0$12  = \$next\dat_w__wpri0$12 ;
  assign dat_w__msie = \$next\dat_w__msie ;
  assign dat_w__utie = \$next\dat_w__utie ;
  assign dat_w__stie = \$next\dat_w__stie ;
  assign \dat_w__wpri1$13  = \$next\dat_w__wpri1$13 ;
  assign dat_w__mtie = \$next\dat_w__mtie ;
  assign dat_w__ueie = \$next\dat_w__ueie ;
  assign dat_w__seie = \$next\dat_w__seie ;
  assign \dat_w__wpri2$14  = \$next\dat_w__wpri2$14 ;
  assign dat_w__meie = \$next\dat_w__meie ;
  assign \dat_w__wpri3$15  = \$next\dat_w__wpri3$15 ;
  assign misa_we = \$next\misa_we ;
  assign misa_w__mxl = \$next\misa_w__mxl ;
  assign misa_w__wiri0 = \$next\misa_w__wiri0 ;
  assign misa_w__extensions = \$next\misa_w__extensions ;
  assign dat_w__extensions = \$next\dat_w__extensions ;
  assign dat_w__wiri0 = \$next\dat_w__wiri0 ;
  assign dat_w__mxl = \$next\dat_w__mxl ;
  assign mstatus_we = \$next\mstatus_we ;
  assign mstatus_w__sd = \$next\mstatus_w__sd ;
  assign mstatus_w__wpri3 = \$next\mstatus_w__wpri3 ;
  assign mstatus_w__tsr = \$next\mstatus_w__tsr ;
  assign mstatus_w__tw = \$next\mstatus_w__tw ;
  assign mstatus_w__tvm = \$next\mstatus_w__tvm ;
  assign mstatus_w__mxr = \$next\mstatus_w__mxr ;
  assign mstatus_w__sum = \$next\mstatus_w__sum ;
  assign mstatus_w__mprv = \$next\mstatus_w__mprv ;
  assign mstatus_w__xs = \$next\mstatus_w__xs ;
  assign mstatus_w__fs = \$next\mstatus_w__fs ;
  assign mstatus_w__mpp = \$next\mstatus_w__mpp ;
  assign mstatus_w__wpri2 = \$next\mstatus_w__wpri2 ;
  assign mstatus_w__spp = \$next\mstatus_w__spp ;
  assign mstatus_w__mpie = \$next\mstatus_w__mpie ;
  assign mstatus_w__wpri1 = \$next\mstatus_w__wpri1 ;
  assign mstatus_w__spie = \$next\mstatus_w__spie ;
  assign mstatus_w__upie = \$next\mstatus_w__upie ;
  assign mstatus_w__mie = \$next\mstatus_w__mie ;
  assign mstatus_w__wpri0 = \$next\mstatus_w__wpri0 ;
  assign mstatus_w__sie = \$next\mstatus_w__sie ;
  assign mstatus_w__uie = \$next\mstatus_w__uie ;
  assign dat_w__uie = \$next\dat_w__uie ;
  assign dat_w__sie = \$next\dat_w__sie ;
  assign dat_w__wpri0 = \$next\dat_w__wpri0 ;
  assign dat_w__mie = \$next\dat_w__mie ;
  assign dat_w__upie = \$next\dat_w__upie ;
  assign dat_w__spie = \$next\dat_w__spie ;
  assign dat_w__wpri1 = \$next\dat_w__wpri1 ;
  assign dat_w__mpie = \$next\dat_w__mpie ;
  assign dat_w__spp = \$next\dat_w__spp ;
  assign dat_w__wpri2 = \$next\dat_w__wpri2 ;
  assign dat_w__mpp = \$next\dat_w__mpp ;
  assign dat_w__fs = \$next\dat_w__fs ;
  assign dat_w__xs = \$next\dat_w__xs ;
  assign dat_w__mprv = \$next\dat_w__mprv ;
  assign dat_w__sum = \$next\dat_w__sum ;
  assign dat_w__mxr = \$next\dat_w__mxr ;
  assign dat_w__tvm = \$next\dat_w__tvm ;
  assign dat_w__tw = \$next\dat_w__tw ;
  assign dat_w__tsr = \$next\dat_w__tsr ;
  assign dat_w__wpri3 = \$next\dat_w__wpri3 ;
  assign dat_w__sd = \$next\dat_w__sd ;
  assign irq_pending_re = \$next\irq_pending_re ;
  assign \dat_r__value$11  = \$next\dat_r__value$11 ;
  assign irq_mask_re = \$next\irq_mask_re ;
  assign \dat_r__value$10  = \$next\dat_r__value$10 ;
  assign mip_re = \$next\mip_re ;
  assign dat_r__wiri3 = \$next\dat_r__wiri3 ;
  assign dat_r__meip = \$next\dat_r__meip ;
  assign dat_r__wiri2 = \$next\dat_r__wiri2 ;
  assign dat_r__seip = \$next\dat_r__seip ;
  assign dat_r__ueip = \$next\dat_r__ueip ;
  assign dat_r__mtip = \$next\dat_r__mtip ;
  assign dat_r__wiri1 = \$next\dat_r__wiri1 ;
  assign dat_r__stip = \$next\dat_r__stip ;
  assign dat_r__utip = \$next\dat_r__utip ;
  assign dat_r__msip = \$next\dat_r__msip ;
  assign \dat_r__wiri0$9  = \$next\dat_r__wiri0$9 ;
  assign dat_r__ssip = \$next\dat_r__ssip ;
  assign dat_r__usip = \$next\dat_r__usip ;
  assign mcause_re = \$next\mcause_re ;
  assign dat_r__interrupt = \$next\dat_r__interrupt ;
  assign dat_r__ecode = \$next\dat_r__ecode ;
  assign mepc_re = \$next\mepc_re ;
  assign \dat_r__value$8  = \$next\dat_r__value$8 ;
  assign mscratch_re = \$next\mscratch_re ;
  assign dat_r__value = \$next\dat_r__value ;
  assign mtvec_re = \$next\mtvec_re ;
  assign dat_r__base = \$next\dat_r__base ;
  assign dat_r__mode = \$next\dat_r__mode ;
  assign mie_re = \$next\mie_re ;
  assign \dat_r__wpri3$7  = \$next\dat_r__wpri3$7 ;
  assign dat_r__meie = \$next\dat_r__meie ;
  assign \dat_r__wpri2$6  = \$next\dat_r__wpri2$6 ;
  assign dat_r__seie = \$next\dat_r__seie ;
  assign dat_r__ueie = \$next\dat_r__ueie ;
  assign dat_r__mtie = \$next\dat_r__mtie ;
  assign \dat_r__wpri1$5  = \$next\dat_r__wpri1$5 ;
  assign dat_r__stie = \$next\dat_r__stie ;
  assign dat_r__utie = \$next\dat_r__utie ;
  assign dat_r__msie = \$next\dat_r__msie ;
  assign \dat_r__wpri0$4  = \$next\dat_r__wpri0$4 ;
  assign dat_r__ssie = \$next\dat_r__ssie ;
  assign dat_r__usie = \$next\dat_r__usie ;
  assign misa_re = \$next\misa_re ;
  assign dat_r__mxl = \$next\dat_r__mxl ;
  assign dat_r__wiri0 = \$next\dat_r__wiri0 ;
  assign dat_r__extensions = \$next\dat_r__extensions ;
  assign mstatus_re = \$next\mstatus_re ;
  assign dat_r__sd = \$next\dat_r__sd ;
  assign dat_r__wpri3 = \$next\dat_r__wpri3 ;
  assign dat_r__tsr = \$next\dat_r__tsr ;
  assign dat_r__tw = \$next\dat_r__tw ;
  assign dat_r__tvm = \$next\dat_r__tvm ;
  assign dat_r__mxr = \$next\dat_r__mxr ;
  assign dat_r__sum = \$next\dat_r__sum ;
  assign dat_r__mprv = \$next\dat_r__mprv ;
  assign dat_r__xs = \$next\dat_r__xs ;
  assign dat_r__fs = \$next\dat_r__fs ;
  assign dat_r__mpp = \$next\dat_r__mpp ;
  assign dat_r__wpri2 = \$next\dat_r__wpri2 ;
  assign dat_r__spp = \$next\dat_r__spp ;
  assign dat_r__mpie = \$next\dat_r__mpie ;
  assign dat_r__wpri1 = \$next\dat_r__wpri1 ;
  assign dat_r__spie = \$next\dat_r__spie ;
  assign dat_r__upie = \$next\dat_r__upie ;
  assign dat_r__mie = \$next\dat_r__mie ;
  assign dat_r__wpri0 = \$next\dat_r__wpri0 ;
  assign dat_r__sie = \$next\dat_r__sie ;
  assign dat_r__uie = \$next\dat_r__uie ;
  assign \port__data$3  = \$next\port__data$3 ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.d" *)
(* generator = "nMigen" *)
module d(rst, valid, stall, kill, \valid$1 , \stall$2 , \kill$3 , payload__branch_predict_taken, \valid$4 , m_branch_taken, \valid$5 , \valid$6 , x_lock, m_lock, \stall$7 , clk);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$8 ;
  (* src = "minerva/minerva/stage.py:58" *)
  reg \$next\kill$16 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\kill$3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\stall ;
  (* src = "minerva/minerva/stage.py:59" *)
  reg \$next\stall$7 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\valid$1 ;
  (* src = "minerva/minerva/stage.py:60" *)
  reg \$next\valid$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input kill;
  (* src = "minerva/minerva/stage.py:58" *)
  wire \kill$16 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \kill$3 ;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  input m_branch_taken;
  (* src = "minerva/minerva/core.py:425" *)
  input m_lock;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input payload__branch_predict_taken;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input \stall$2 ;
  (* src = "minerva/minerva/stage.py:59" *)
  output \stall$7 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \valid$1 ;
  reg \valid$1  = 1'h0;
  (* src = "minerva/minerva/stage.py:60" *)
  output \valid$4 ;
  (* src = "minerva/minerva/stage.py:60" *)
  input \valid$5 ;
  (* src = "minerva/minerva/stage.py:60" *)
  input \valid$6 ;
  (* src = "minerva/minerva/core.py:424" *)
  input x_lock;
  assign \$10  = valid & (* src = "minerva/minerva/stage.py:83" *) \$8 ;
  assign \$12  = ~ (* src = "minerva/minerva/stage.py:88" *) \stall$7 ;
  assign \$14  = ~ (* src = "minerva/minerva/stage.py:90" *) \stall$2 ;
  assign \$17  = \$14  | (* src = "minerva/minerva/stage.py:90" *) \kill$16 ;
  assign \$19  = ~ (* src = "minerva/minerva/core.py:568" *) payload__branch_predict_taken;
  assign \$21  = \$19  & (* src = "minerva/minerva/core.py:568" *) m_branch_taken;
  assign \$23  = \$21  & (* src = "minerva/minerva/core.py:568" *) \valid$5 ;
  assign \$25  = 1'h0 | (* src = "minerva/minerva/stage.py:95" *) \$23 ;
  assign \$27  = x_lock & (* src = "minerva/minerva/core.py:445" *) \valid$6 ;
  assign \$29  = m_lock & (* src = "minerva/minerva/core.py:445" *) \valid$5 ;
  assign \$31  = \$27  | (* src = "minerva/minerva/core.py:445" *) \$29 ;
  assign \$33  = \$31  & (* src = "minerva/minerva/core.py:445" *) \valid$4 ;
  assign \$35  = 1'h0 | (* src = "minerva/minerva/stage.py:98" *) \$33 ;
  assign \$37  = \$35  | (* src = "minerva/minerva/stage.py:98" *) \stall$2 ;
  assign \$8  = ~ (* src = "minerva/minerva/stage.py:83" *) kill;
  always @(posedge clk)
      \valid$1  <= \$next\valid$1 ;
  always @* begin
    \$next\valid$4  = 1'h0;
    \$next\valid$4  = \$10 ;
  end
  always @* begin
    \$next\stall  = 1'h0;
    \$next\stall  = \stall$7 ;
  end
  always @* begin
    \$next\valid$1  = \valid$1 ;
    casez ({ \$17 , \$12  })
      2'bz1:
          \$next\valid$1  = \valid$4 ;
      2'b1z:
          \$next\valid$1  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$3  = 1'h0;
    \$next\kill$3  = \kill$16 ;
  end
  always @* begin
    \$next\kill$16  = 1'h0;
    \$next\kill$16  = \$25 ;
  end
  always @* begin
    \$next\stall$7  = 1'h0;
    \$next\stall$7  = \$37 ;
  end
  assign \stall$7  = \$next\stall$7 ;
  assign \kill$16  = \$next\kill$16 ;
  assign \kill$3  = \$next\kill$3 ;
  assign stall = \$next\stall ;
  assign \valid$4  = \$next\valid$4 ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.decoder" *)
(* generator = "nMigen" *)
module decoder(csr, rs1, rs2, immediate, rs1_re, rs2_re, lui, auipc, branch, jump, rd, rd_we, bypass_x, bypass_m, funct3, load, store, adder_sub, compare, \logic , shift, direction, sext, fence_i, csr_we, ecall, ebreak, mret, illegal, instruction);
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire [31:0] \$11 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$15 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$19 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire [31:0] \$2 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$23 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$25 ;
  wire \$251 ;
  wire \$253 ;
  wire \$255 ;
  wire \$257 ;
  wire \$259 ;
  wire \$261 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$27 ;
  wire \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$279 ;
  wire \$281 ;
  wire \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire \$289 ;
  wire \$29 ;
  wire \$291 ;
  wire \$293 ;
  wire \$295 ;
  wire \$297 ;
  wire \$299 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$31 ;
  wire \$311 ;
  wire \$313 ;
  wire \$315 ;
  wire \$317 ;
  wire \$319 ;
  wire \$321 ;
  wire \$323 ;
  wire \$325 ;
  wire \$327 ;
  wire \$329 ;
  wire \$33 ;
  wire \$331 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$341 ;
  wire \$343 ;
  wire \$345 ;
  wire \$347 ;
  wire \$349 ;
  wire \$35 ;
  wire \$351 ;
  wire \$353 ;
  wire \$355 ;
  wire \$357 ;
  wire \$359 ;
  wire \$361 ;
  wire \$363 ;
  wire \$365 ;
  wire \$367 ;
  wire \$369 ;
  wire \$37 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire \$377 ;
  wire \$379 ;
  wire \$381 ;
  wire \$383 ;
  wire \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$39 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire [31:0] \$4 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire \$407 ;
  wire \$409 ;
  wire \$41 ;
  wire \$411 ;
  wire \$413 ;
  wire \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$421 ;
  wire \$423 ;
  wire \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$43 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  wire \$441 ;
  wire \$443 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire \$45 ;
  wire \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$459 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire \$469 ;
  wire \$47 ;
  wire \$471 ;
  wire \$473 ;
  wire \$475 ;
  wire \$477 ;
  wire \$479 ;
  wire \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire \$487 ;
  wire \$489 ;
  wire \$49 ;
  wire \$491 ;
  wire \$493 ;
  wire \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$501 ;
  wire \$503 ;
  wire \$505 ;
  wire \$507 ;
  wire \$509 ;
  wire \$51 ;
  wire \$511 ;
  wire \$513 ;
  wire \$515 ;
  wire \$517 ;
  wire \$519 ;
  wire \$521 ;
  wire \$523 ;
  wire \$525 ;
  wire \$527 ;
  wire \$529 ;
  wire \$53 ;
  wire \$531 ;
  wire \$533 ;
  wire \$535 ;
  wire \$537 ;
  wire \$539 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire \$547 ;
  wire \$549 ;
  wire \$55 ;
  wire \$551 ;
  wire \$553 ;
  wire \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$57 ;
  wire \$571 ;
  wire \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire \$59 ;
  wire \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  wire [31:0] \$6 ;
  wire \$601 ;
  wire \$603 ;
  wire \$605 ;
  wire \$607 ;
  wire \$609 ;
  wire \$61 ;
  wire \$611 ;
  wire \$613 ;
  wire \$614 ;
  wire \$616 ;
  wire \$618 ;
  wire \$620 ;
  wire \$622 ;
  wire \$624 ;
  wire \$626 ;
  wire \$628 ;
  wire \$63 ;
  wire \$630 ;
  wire \$632 ;
  wire \$634 ;
  wire \$636 ;
  wire \$638 ;
  wire \$640 ;
  wire \$642 ;
  wire \$645 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire [34:0] \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire [34:0] \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  (* src = "minerva/minerva/units/decoder.py:40" *)
  reg \$next\adder ;
  (* src = "minerva/minerva/units/decoder.py:41" *)
  reg \$next\adder_sub ;
  (* src = "minerva/minerva/units/decoder.py:49" *)
  reg \$next\auipc ;
  (* src = "minerva/minerva/units/decoder.py:72" *)
  reg [11:0] \$next\bimm12 ;
  (* src = "minerva/minerva/units/decoder.py:51" *)
  reg \$next\branch ;
  (* src = "minerva/minerva/units/decoder.py:36" *)
  reg \$next\bypass_m ;
  (* src = "minerva/minerva/units/decoder.py:35" *)
  reg \$next\bypass_x ;
  (* src = "minerva/minerva/units/decoder.py:52" *)
  reg \$next\compare ;
  (* src = "minerva/minerva/units/decoder.py:53" *)
  reg \$next\csr ;
  (* src = "minerva/minerva/units/decoder.py:54" *)
  reg \$next\csr_we ;
  (* src = "minerva/minerva/units/decoder.py:46" *)
  reg \$next\direction ;
  (* src = "minerva/minerva/units/decoder.py:57" *)
  reg \$next\ebreak ;
  (* src = "minerva/minerva/units/decoder.py:56" *)
  reg \$next\ecall ;
  (* src = "minerva/minerva/units/decoder.py:39" *)
  reg \$next\fence_i ;
  (* src = "minerva/minerva/units/decoder.py:77" *)
  reg [2:0] \$next\fmt ;
  (* src = "minerva/minerva/units/decoder.py:68" *)
  reg [11:0] \$next\funct12 ;
  (* src = "minerva/minerva/units/decoder.py:59" *)
  reg [2:0] \$next\funct3 ;
  (* src = "minerva/minerva/units/decoder.py:66" *)
  reg [2:0] \$next\funct3$1 ;
  (* src = "minerva/minerva/units/decoder.py:67" *)
  reg [6:0] \$next\funct7 ;
  (* src = "minerva/minerva/units/decoder.py:70" *)
  reg [11:0] \$next\iimm12 ;
  (* src = "minerva/minerva/units/decoder.py:60" *)
  reg \$next\illegal ;
  (* src = "minerva/minerva/units/decoder.py:34" *)
  reg [31:0] \$next\immediate ;
  (* src = "minerva/minerva/units/decoder.py:74" *)
  reg [19:0] \$next\jimm20 ;
  (* src = "minerva/minerva/units/decoder.py:50" *)
  reg \$next\jump ;
  (* src = "minerva/minerva/units/decoder.py:37" *)
  reg \$next\load ;
  (* src = "minerva/minerva/units/decoder.py:42" *)
  reg \$next\logic ;
  (* src = "minerva/minerva/units/decoder.py:48" *)
  reg \$next\lui ;
  (* src = "minerva/minerva/units/decoder.py:58" *)
  reg \$next\mret ;
  (* src = "minerva/minerva/units/decoder.py:65" *)
  reg [4:0] \$next\opcode ;
  (* src = "minerva/minerva/units/decoder.py:55" *)
  reg \$next\privileged ;
  (* src = "minerva/minerva/units/decoder.py:28" *)
  reg [4:0] \$next\rd ;
  (* src = "minerva/minerva/units/decoder.py:29" *)
  reg \$next\rd_we ;
  (* src = "minerva/minerva/units/decoder.py:30" *)
  reg [4:0] \$next\rs1 ;
  (* src = "minerva/minerva/units/decoder.py:31" *)
  reg \$next\rs1_re ;
  (* src = "minerva/minerva/units/decoder.py:32" *)
  reg [4:0] \$next\rs2 ;
  (* src = "minerva/minerva/units/decoder.py:33" *)
  reg \$next\rs2_re ;
  (* src = "minerva/minerva/units/decoder.py:47" *)
  reg \$next\sext ;
  (* src = "minerva/minerva/units/decoder.py:45" *)
  reg \$next\shift ;
  (* src = "minerva/minerva/units/decoder.py:71" *)
  reg [11:0] \$next\simm12 ;
  (* src = "minerva/minerva/units/decoder.py:38" *)
  reg \$next\store ;
  (* src = "minerva/minerva/units/decoder.py:73" *)
  reg [19:0] \$next\uimm20 ;
  (* src = "minerva/minerva/units/decoder.py:40" *)
  wire adder;
  (* src = "minerva/minerva/units/decoder.py:41" *)
  output adder_sub;
  (* src = "minerva/minerva/units/decoder.py:49" *)
  output auipc;
  (* src = "minerva/minerva/units/decoder.py:72" *)
  wire [11:0] bimm12;
  (* src = "minerva/minerva/units/decoder.py:51" *)
  output branch;
  (* src = "minerva/minerva/units/decoder.py:36" *)
  output bypass_m;
  (* src = "minerva/minerva/units/decoder.py:35" *)
  output bypass_x;
  (* src = "minerva/minerva/units/decoder.py:52" *)
  output compare;
  (* src = "minerva/minerva/units/decoder.py:53" *)
  output csr;
  (* src = "minerva/minerva/units/decoder.py:54" *)
  output csr_we;
  (* src = "minerva/minerva/units/decoder.py:46" *)
  output direction;
  (* src = "minerva/minerva/units/decoder.py:44" *)
  wire divide;
  (* src = "minerva/minerva/units/decoder.py:57" *)
  output ebreak;
  (* src = "minerva/minerva/units/decoder.py:56" *)
  output ecall;
  (* src = "minerva/minerva/units/decoder.py:39" *)
  output fence_i;
  (* src = "minerva/minerva/units/decoder.py:77" *)
  wire [2:0] fmt;
  (* src = "minerva/minerva/units/decoder.py:68" *)
  wire [11:0] funct12;
  (* src = "minerva/minerva/units/decoder.py:59" *)
  output [2:0] funct3;
  (* src = "minerva/minerva/units/decoder.py:66" *)
  wire [2:0] \funct3$1 ;
  (* src = "minerva/minerva/units/decoder.py:67" *)
  wire [6:0] funct7;
  (* src = "minerva/minerva/units/decoder.py:70" *)
  wire [11:0] iimm12;
  (* src = "minerva/minerva/units/decoder.py:60" *)
  output illegal;
  (* src = "minerva/minerva/units/decoder.py:34" *)
  output [31:0] immediate;
  (* src = "minerva/minerva/units/decoder.py:26" *)
  input [31:0] instruction;
  (* src = "minerva/minerva/units/decoder.py:74" *)
  wire [19:0] jimm20;
  (* src = "minerva/minerva/units/decoder.py:50" *)
  output jump;
  (* src = "minerva/minerva/units/decoder.py:37" *)
  output load;
  (* src = "minerva/minerva/units/decoder.py:42" *)
  output \logic ;
  (* src = "minerva/minerva/units/decoder.py:48" *)
  output lui;
  (* src = "minerva/minerva/units/decoder.py:58" *)
  output mret;
  (* src = "minerva/minerva/units/decoder.py:43" *)
  wire multiply;
  (* src = "minerva/minerva/units/decoder.py:65" *)
  wire [4:0] opcode;
  (* src = "minerva/minerva/units/decoder.py:55" *)
  wire privileged;
  (* src = "minerva/minerva/units/decoder.py:28" *)
  output [4:0] rd;
  (* src = "minerva/minerva/units/decoder.py:29" *)
  output rd_we;
  (* src = "minerva/minerva/units/decoder.py:30" *)
  output [4:0] rs1;
  (* src = "minerva/minerva/units/decoder.py:31" *)
  output rs1_re;
  (* src = "minerva/minerva/units/decoder.py:32" *)
  output [4:0] rs2;
  (* src = "minerva/minerva/units/decoder.py:33" *)
  output rs2_re;
  (* src = "minerva/minerva/units/decoder.py:47" *)
  output sext;
  (* src = "minerva/minerva/units/decoder.py:45" *)
  output shift;
  (* src = "minerva/minerva/units/decoder.py:71" *)
  wire [11:0] simm12;
  (* src = "minerva/minerva/units/decoder.py:38" *)
  output store;
  (* src = "minerva/minerva/units/decoder.py:73" *)
  wire [19:0] uimm20;
  assign \$9  = uimm20 <<< (* src = "minerva/minerva/units/decoder.py:124" *) 4'hc;
  assign \$99  = \$85  | (* src = "minerva/minerva/units/decoder.py:147" *) \$97 ;
  assign \$101  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h18;
  assign \$103  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$105  = \$101  & (* src = "minerva/minerva/units/decoder.py:146" *) \$103 ;
  assign \$107  = \$105  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$109  = \$107  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$111  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h18;
  assign \$113  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$115  = \$111  & (* src = "minerva/minerva/units/decoder.py:146" *) \$113 ;
  assign \$117  = \$115  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$11  = + (* src = "minerva/minerva/units/decoder.py:74" *) $signed(jimm20);
  assign \$119  = \$117  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$121  = \$109  | (* src = "minerva/minerva/units/decoder.py:147" *) \$119 ;
  assign \$123  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h18;
  assign \$125  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$127  = \$123  & (* src = "minerva/minerva/units/decoder.py:146" *) \$125 ;
  assign \$129  = \$127  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$131  = \$129  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$133  = \$121  | (* src = "minerva/minerva/units/decoder.py:147" *) \$131 ;
  assign \$135  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h18;
  assign \$137  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$13  = fmt == (* src = "minerva/minerva/units/decoder.py:133" *) 1'h0;
  assign \$139  = \$135  & (* src = "minerva/minerva/units/decoder.py:146" *) \$137 ;
  assign \$141  = \$139  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$143  = \$141  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$145  = \$133  | (* src = "minerva/minerva/units/decoder.py:147" *) \$143 ;
  assign \$147  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h18;
  assign \$149  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h6;
  assign \$151  = \$147  & (* src = "minerva/minerva/units/decoder.py:146" *) \$149 ;
  assign \$153  = \$151  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$155  = \$153  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$157  = \$145  | (* src = "minerva/minerva/units/decoder.py:147" *) \$155 ;
  assign \$15  = fmt == (* src = "minerva/minerva/units/decoder.py:133" *) 1'h1;
  assign \$159  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h18;
  assign \$161  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h7;
  assign \$163  = \$159  & (* src = "minerva/minerva/units/decoder.py:146" *) \$161 ;
  assign \$165  = \$163  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$167  = \$165  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$169  = \$157  | (* src = "minerva/minerva/units/decoder.py:147" *) \$167 ;
  assign \$171  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$173  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$175  = \$171  & (* src = "minerva/minerva/units/decoder.py:146" *) \$173 ;
  assign \$177  = \$175  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$17  = \$13  | (* src = "minerva/minerva/units/decoder.py:133" *) \$15 ;
  assign \$179  = \$177  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$181  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$183  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$185  = \$181  & (* src = "minerva/minerva/units/decoder.py:146" *) \$183 ;
  assign \$187  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$189  = \$185  & (* src = "minerva/minerva/units/decoder.py:146" *) \$187 ;
  assign \$191  = \$189  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$193  = \$179  | (* src = "minerva/minerva/units/decoder.py:147" *) \$191 ;
  assign \$195  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$197  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$19  = fmt == (* src = "minerva/minerva/units/decoder.py:133" *) 3'h4;
  assign \$199  = \$195  & (* src = "minerva/minerva/units/decoder.py:146" *) \$197 ;
  assign \$201  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 6'h20;
  assign \$203  = \$199  & (* src = "minerva/minerva/units/decoder.py:146" *) \$201 ;
  assign \$205  = \$203  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$207  = \$193  | (* src = "minerva/minerva/units/decoder.py:147" *) \$205 ;
  assign \$209  = funct7 == (* src = "minerva/minerva/units/decoder.py:170" *) 6'h20;
  assign \$211  = rs2_re & (* src = "minerva/minerva/units/decoder.py:170" *) \$209 ;
  assign \$213  = \$211  | (* src = "minerva/minerva/units/decoder.py:170" *) compare;
  assign \$215  = \$213  | (* src = "minerva/minerva/units/decoder.py:170" *) branch;
  assign \$217  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$21  = \$17  | (* src = "minerva/minerva/units/decoder.py:133" *) \$19 ;
  assign \$219  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$221  = \$217  & (* src = "minerva/minerva/units/decoder.py:146" *) \$219 ;
  assign \$223  = \$221  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$225  = \$223  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$227  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$229  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h6;
  assign \$231  = \$227  & (* src = "minerva/minerva/units/decoder.py:146" *) \$229 ;
  assign \$233  = \$231  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$235  = \$233  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$237  = \$225  | (* src = "minerva/minerva/units/decoder.py:147" *) \$235 ;
  assign \$23  = fmt == (* src = "minerva/minerva/units/decoder.py:133" *) 3'h5;
  assign \$239  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$241  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h7;
  assign \$243  = \$239  & (* src = "minerva/minerva/units/decoder.py:146" *) \$241 ;
  assign \$245  = \$243  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$247  = \$245  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$249  = \$237  | (* src = "minerva/minerva/units/decoder.py:147" *) \$247 ;
  assign \$251  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$253  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$255  = \$251  & (* src = "minerva/minerva/units/decoder.py:146" *) \$253 ;
  assign \$257  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$25  = \$21  | (* src = "minerva/minerva/units/decoder.py:133" *) \$23 ;
  assign \$259  = \$255  & (* src = "minerva/minerva/units/decoder.py:146" *) \$257 ;
  assign \$261  = \$259  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$263  = \$249  | (* src = "minerva/minerva/units/decoder.py:147" *) \$261 ;
  assign \$265  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$267  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h6;
  assign \$269  = \$265  & (* src = "minerva/minerva/units/decoder.py:146" *) \$267 ;
  assign \$271  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$273  = \$269  & (* src = "minerva/minerva/units/decoder.py:146" *) \$271 ;
  assign \$275  = \$273  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$277  = \$263  | (* src = "minerva/minerva/units/decoder.py:147" *) \$275 ;
  assign \$27  = fmt == (* src = "minerva/minerva/units/decoder.py:134" *) 1'h0;
  assign \$279  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$281  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h7;
  assign \$283  = \$279  & (* src = "minerva/minerva/units/decoder.py:146" *) \$281 ;
  assign \$285  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$287  = \$283  & (* src = "minerva/minerva/units/decoder.py:146" *) \$285 ;
  assign \$289  = \$287  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$291  = \$277  | (* src = "minerva/minerva/units/decoder.py:147" *) \$289 ;
  assign \$293  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$295  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$297  = \$293  & (* src = "minerva/minerva/units/decoder.py:146" *) \$295 ;
  assign \$2  = + (* src = "minerva/minerva/units/decoder.py:70" *) $signed(iimm12);
  assign \$29  = fmt == (* src = "minerva/minerva/units/decoder.py:134" *) 1'h1;
  assign \$299  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$301  = \$297  & (* src = "minerva/minerva/units/decoder.py:146" *) \$299 ;
  assign \$303  = \$301  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$305  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$307  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$309  = \$305  & (* src = "minerva/minerva/units/decoder.py:146" *) \$307 ;
  assign \$311  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$313  = \$309  & (* src = "minerva/minerva/units/decoder.py:146" *) \$311 ;
  assign \$315  = \$313  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$317  = \$303  | (* src = "minerva/minerva/units/decoder.py:147" *) \$315 ;
  assign \$31  = \$27  | (* src = "minerva/minerva/units/decoder.py:134" *) \$29 ;
  assign \$319  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$321  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$323  = \$319  & (* src = "minerva/minerva/units/decoder.py:146" *) \$321 ;
  assign \$325  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 6'h20;
  assign \$327  = \$323  & (* src = "minerva/minerva/units/decoder.py:146" *) \$325 ;
  assign \$329  = \$327  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$331  = \$317  | (* src = "minerva/minerva/units/decoder.py:147" *) \$329 ;
  assign \$333  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$335  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$337  = \$333  & (* src = "minerva/minerva/units/decoder.py:146" *) \$335 ;
  assign \$33  = fmt == (* src = "minerva/minerva/units/decoder.py:134" *) 2'h2;
  assign \$339  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$341  = \$337  & (* src = "minerva/minerva/units/decoder.py:146" *) \$339 ;
  assign \$343  = \$341  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$345  = \$331  | (* src = "minerva/minerva/units/decoder.py:147" *) \$343 ;
  assign \$347  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$349  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$351  = \$347  & (* src = "minerva/minerva/units/decoder.py:146" *) \$349 ;
  assign \$353  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$355  = \$351  & (* src = "minerva/minerva/units/decoder.py:146" *) \$353 ;
  assign \$357  = \$355  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$35  = \$31  | (* src = "minerva/minerva/units/decoder.py:134" *) \$33 ;
  assign \$359  = \$345  | (* src = "minerva/minerva/units/decoder.py:147" *) \$357 ;
  assign \$361  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$363  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$365  = \$361  & (* src = "minerva/minerva/units/decoder.py:146" *) \$363 ;
  assign \$367  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 6'h20;
  assign \$369  = \$365  & (* src = "minerva/minerva/units/decoder.py:146" *) \$367 ;
  assign \$371  = \$369  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$373  = \$359  | (* src = "minerva/minerva/units/decoder.py:147" *) \$371 ;
  assign \$375  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:208" *) 3'h5;
  assign \$377  = funct7 == (* src = "minerva/minerva/units/decoder.py:209" *) 6'h20;
  assign \$37  = fmt == (* src = "minerva/minerva/units/decoder.py:134" *) 2'h3;
  assign \$379  = opcode == (* src = "minerva/minerva/units/decoder.py:211" *) 4'hd;
  assign \$381  = opcode == (* src = "minerva/minerva/units/decoder.py:212" *) 3'h5;
  assign \$383  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1b;
  assign \$385  = \$383  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$387  = \$385  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$389  = \$387  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$391  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h19;
  assign \$393  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$395  = \$391  & (* src = "minerva/minerva/units/decoder.py:146" *) \$393 ;
  assign \$397  = \$395  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$39  = \$35  | (* src = "minerva/minerva/units/decoder.py:134" *) \$37 ;
  assign \$399  = \$397  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$401  = \$389  | (* src = "minerva/minerva/units/decoder.py:147" *) \$399 ;
  assign \$403  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$405  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$407  = \$403  & (* src = "minerva/minerva/units/decoder.py:146" *) \$405 ;
  assign \$409  = \$407  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$411  = \$409  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$413  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$415  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$417  = \$413  & (* src = "minerva/minerva/units/decoder.py:146" *) \$415 ;
  assign \$41  = fmt == (* src = "minerva/minerva/units/decoder.py:135" *) 1'h0;
  assign \$419  = \$417  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$421  = \$419  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$423  = \$411  | (* src = "minerva/minerva/units/decoder.py:147" *) \$421 ;
  assign \$425  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$427  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$429  = \$425  & (* src = "minerva/minerva/units/decoder.py:146" *) \$427 ;
  assign \$431  = \$429  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$433  = \$431  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$435  = \$423  | (* src = "minerva/minerva/units/decoder.py:147" *) \$433 ;
  assign \$437  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$43  = fmt == (* src = "minerva/minerva/units/decoder.py:135" *) 2'h2;
  assign \$439  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$441  = \$437  & (* src = "minerva/minerva/units/decoder.py:146" *) \$439 ;
  assign \$443  = \$441  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$445  = \$443  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$447  = \$435  | (* src = "minerva/minerva/units/decoder.py:147" *) \$445 ;
  assign \$449  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$451  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h2;
  assign \$453  = \$449  & (* src = "minerva/minerva/units/decoder.py:146" *) \$451 ;
  assign \$455  = \$453  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$457  = \$455  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$45  = \$41  | (* src = "minerva/minerva/units/decoder.py:135" *) \$43 ;
  assign \$459  = \$447  | (* src = "minerva/minerva/units/decoder.py:147" *) \$457 ;
  assign \$461  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'h8;
  assign \$463  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$465  = \$461  & (* src = "minerva/minerva/units/decoder.py:146" *) \$463 ;
  assign \$467  = \$465  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$469  = \$467  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$471  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'h8;
  assign \$473  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$475  = \$471  & (* src = "minerva/minerva/units/decoder.py:146" *) \$473 ;
  assign \$477  = \$475  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$47  = fmt == (* src = "minerva/minerva/units/decoder.py:135" *) 2'h3;
  assign \$479  = \$477  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$481  = \$469  | (* src = "minerva/minerva/units/decoder.py:147" *) \$479 ;
  assign \$483  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'h8;
  assign \$485  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h2;
  assign \$487  = \$483  & (* src = "minerva/minerva/units/decoder.py:146" *) \$485 ;
  assign \$489  = \$487  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$491  = \$489  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$493  = \$481  | (* src = "minerva/minerva/units/decoder.py:147" *) \$491 ;
  assign \$495  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h3;
  assign \$497  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$4  = + (* src = "minerva/minerva/units/decoder.py:71" *) $signed(simm12);
  assign \$49  = \$45  | (* src = "minerva/minerva/units/decoder.py:135" *) \$47 ;
  assign \$499  = \$495  & (* src = "minerva/minerva/units/decoder.py:146" *) \$497 ;
  assign \$501  = \$499  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$503  = \$501  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$505  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1c;
  assign \$507  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$509  = \$505  & (* src = "minerva/minerva/units/decoder.py:146" *) \$507 ;
  assign \$511  = \$509  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$513  = \$511  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$515  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1c;
  assign \$517  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h2;
  assign \$51  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$519  = \$515  & (* src = "minerva/minerva/units/decoder.py:146" *) \$517 ;
  assign \$521  = \$519  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$523  = \$521  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$525  = \$513  | (* src = "minerva/minerva/units/decoder.py:147" *) \$523 ;
  assign \$527  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1c;
  assign \$529  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h3;
  assign \$531  = \$527  & (* src = "minerva/minerva/units/decoder.py:146" *) \$529 ;
  assign \$533  = \$531  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$535  = \$533  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$537  = \$525  | (* src = "minerva/minerva/units/decoder.py:147" *) \$535 ;
  assign \$53  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h2;
  assign \$539  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1c;
  assign \$541  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h5;
  assign \$543  = \$539  & (* src = "minerva/minerva/units/decoder.py:146" *) \$541 ;
  assign \$545  = \$543  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$547  = \$545  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$549  = \$537  | (* src = "minerva/minerva/units/decoder.py:147" *) \$547 ;
  assign \$551  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1c;
  assign \$553  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h6;
  assign \$555  = \$551  & (* src = "minerva/minerva/units/decoder.py:146" *) \$553 ;
  assign \$557  = \$555  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$55  = \$51  & (* src = "minerva/minerva/units/decoder.py:146" *) \$53 ;
  assign \$559  = \$557  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$561  = \$549  | (* src = "minerva/minerva/units/decoder.py:147" *) \$559 ;
  assign \$563  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 5'h1c;
  assign \$565  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h7;
  assign \$567  = \$563  & (* src = "minerva/minerva/units/decoder.py:146" *) \$565 ;
  assign \$569  = \$567  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$571  = \$569  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$573  = \$561  | (* src = "minerva/minerva/units/decoder.py:147" *) \$571 ;
  assign \$575  = ~ (* src = "minerva/minerva/units/decoder.py:244" *) \funct3$1 [1];
  assign \$577  = rs1 != (* src = "minerva/minerva/units/decoder.py:244" *) 1'h0;
  assign \$57  = \$55  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$579  = \$575  | (* src = "minerva/minerva/units/decoder.py:244" *) \$577 ;
  assign \$581  = opcode == (* src = "minerva/minerva/units/decoder.py:246" *) 5'h1c;
  assign \$583  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:246" *) 1'h0;
  assign \$585  = \$581  & (* src = "minerva/minerva/units/decoder.py:246" *) \$583 ;
  assign \$587  = funct12 == (* src = "minerva/minerva/units/decoder.py:247" *) 1'h0;
  assign \$589  = privileged & (* src = "minerva/minerva/units/decoder.py:247" *) \$587 ;
  assign \$591  = funct12 == (* src = "minerva/minerva/units/decoder.py:248" *) 1'h1;
  assign \$593  = privileged & (* src = "minerva/minerva/units/decoder.py:248" *) \$591 ;
  assign \$595  = funct12 == (* src = "minerva/minerva/units/decoder.py:249" *) 10'h302;
  assign \$597  = privileged & (* src = "minerva/minerva/units/decoder.py:249" *) \$595 ;
  assign \$59  = \$57  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$599  = adder | (* src = "minerva/minerva/units/decoder.py:251" *) \logic ;
  assign \$601  = \$599  | (* src = "minerva/minerva/units/decoder.py:251" *) lui;
  assign \$603  = \$601  | (* src = "minerva/minerva/units/decoder.py:251" *) auipc;
  assign \$605  = \$603  | (* src = "minerva/minerva/units/decoder.py:251" *) csr;
  assign \$607  = compare | (* src = "minerva/minerva/units/decoder.py:252" *) divide;
  assign \$609  = \$607  | (* src = "minerva/minerva/units/decoder.py:252" *) shift;
  assign \$611  = instruction[1:0] != (* src = "minerva/minerva/units/decoder.py:254" *) 2'h3;
  assign \$614  = compare | (* src = "minerva/minerva/units/decoder.py:257" *) branch;
  assign \$616  = \$614  | (* src = "minerva/minerva/units/decoder.py:257" *) adder;
  assign \$618  = \$616  | (* src = "minerva/minerva/units/decoder.py:257" *) \logic ;
  assign \$61  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 3'h4;
  assign \$620  = \$618  | (* src = "minerva/minerva/units/decoder.py:257" *) multiply;
  assign \$622  = \$620  | (* src = "minerva/minerva/units/decoder.py:257" *) divide;
  assign \$624  = \$622  | (* src = "minerva/minerva/units/decoder.py:257" *) shift;
  assign \$626  = \$624  | (* src = "minerva/minerva/units/decoder.py:257" *) lui;
  assign \$628  = \$626  | (* src = "minerva/minerva/units/decoder.py:257" *) auipc;
  assign \$630  = \$628  | (* src = "minerva/minerva/units/decoder.py:257" *) jump;
  assign \$632  = \$630  | (* src = "minerva/minerva/units/decoder.py:257" *) load;
  assign \$634  = \$632  | (* src = "minerva/minerva/units/decoder.py:257" *) store;
  assign \$636  = \$634  | (* src = "minerva/minerva/units/decoder.py:257" *) csr;
  assign \$638  = \$636  | (* src = "minerva/minerva/units/decoder.py:257" *) ecall;
  assign \$63  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h3;
  assign \$640  = \$638  | (* src = "minerva/minerva/units/decoder.py:257" *) ebreak;
  assign \$642  = \$640  | (* src = "minerva/minerva/units/decoder.py:257" *) mret;
  assign \$613  = ~ (* src = "minerva/minerva/units/decoder.py:257" *) \$642 ;
  assign \$645  = \$611  | (* src = "minerva/minerva/units/decoder.py:257" *) \$613 ;
  assign \$65  = \$61  & (* src = "minerva/minerva/units/decoder.py:146" *) \$63 ;
  assign \$67  = \$65  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$6  = + (* src = "minerva/minerva/units/decoder.py:72" *) $signed(bimm12);
  assign \$69  = \$67  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$71  = \$59  | (* src = "minerva/minerva/units/decoder.py:147" *) \$69 ;
  assign \$73  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$75  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h2;
  assign \$77  = \$73  & (* src = "minerva/minerva/units/decoder.py:146" *) \$75 ;
  assign \$79  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$81  = \$77  & (* src = "minerva/minerva/units/decoder.py:146" *) \$79 ;
  assign \$83  = \$81  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  assign \$85  = \$71  | (* src = "minerva/minerva/units/decoder.py:147" *) \$83 ;
  assign \$87  = opcode == (* src = "minerva/minerva/units/decoder.py:146" *) 4'hc;
  assign \$89  = \funct3$1  == (* src = "minerva/minerva/units/decoder.py:146" *) 2'h3;
  assign \$91  = \$87  & (* src = "minerva/minerva/units/decoder.py:146" *) \$89 ;
  assign \$93  = funct7 == (* src = "minerva/minerva/units/decoder.py:146" *) 1'h0;
  assign \$95  = \$91  & (* src = "minerva/minerva/units/decoder.py:146" *) \$93 ;
  assign \$97  = \$95  & (* src = "minerva/minerva/units/decoder.py:146" *) 1'h1;
  always @* begin
    \$next\opcode  = 5'h00;
    \$next\opcode  = instruction[6:2];
  end
  always @* begin
    \$next\funct3$1  = 3'h0;
    \$next\funct3$1  = instruction[14:12];
  end
  always @* begin
    \$next\immediate  = 32'd0;
    casez (fmt)
      3'h1:
          \$next\immediate  = \$2 ;
      3'h2:
          \$next\immediate  = \$4 ;
      3'h3:
          \$next\immediate  = \$6 ;
      3'h4:
          \$next\immediate  = \$8 [31:0];
      3'h5:
          \$next\immediate  = \$11 ;
    endcase
  end
  always @* begin
    \$next\rd  = 5'h00;
    \$next\rd  = instruction[11:7];
  end
  always @* begin
    \$next\rs1  = 5'h00;
    \$next\rs1  = instruction[19:15];
  end
  always @* begin
    \$next\rs2  = 5'h00;
    \$next\rs2  = instruction[24:20];
  end
  always @* begin
    \$next\rd_we  = 1'h0;
    \$next\rd_we  = \$25 ;
  end
  always @* begin
    \$next\rs1_re  = 1'h0;
    \$next\rs1_re  = \$39 ;
  end
  always @* begin
    \$next\rs2_re  = 1'h0;
    \$next\rs2_re  = \$49 ;
  end
  always @* begin
    \$next\funct3  = 3'h0;
    \$next\funct3  = \funct3$1 ;
  end
  always @* begin
    \$next\compare  = 1'h0;
    \$next\compare  = \$99 ;
  end
  always @* begin
    \$next\branch  = 1'h0;
    \$next\branch  = \$169 ;
  end
  always @* begin
    \$next\funct7  = 7'h00;
    \$next\funct7  = instruction[31:25];
  end
  always @* begin
    \$next\adder  = 1'h0;
    \$next\adder  = \$207 ;
  end
  always @* begin
    \$next\adder_sub  = 1'h0;
    \$next\adder_sub  = \$215 ;
  end
  always @* begin
    \$next\logic  = 1'h0;
    \$next\logic  = \$291 ;
  end
  always @* begin
    \$next\shift  = 1'h0;
    \$next\shift  = \$373 ;
  end
  always @* begin
    \$next\direction  = 1'h0;
    \$next\direction  = \$375 ;
  end
  always @* begin
    \$next\sext  = 1'h0;
    \$next\sext  = \$377 ;
  end
  always @* begin
    \$next\lui  = 1'h0;
    \$next\lui  = \$379 ;
  end
  always @* begin
    \$next\auipc  = 1'h0;
    \$next\auipc  = \$381 ;
  end
  always @* begin
    \$next\jump  = 1'h0;
    \$next\jump  = \$401 ;
  end
  always @* begin
    \$next\load  = 1'h0;
    \$next\load  = \$459 ;
  end
  always @* begin
    \$next\funct12  = 12'h000;
    \$next\funct12  = instruction[31:20];
  end
  always @* begin
    \$next\store  = 1'h0;
    \$next\store  = \$493 ;
  end
  always @* begin
    \$next\fence_i  = 1'h0;
    \$next\fence_i  = \$503 ;
  end
  always @* begin
    \$next\csr  = 1'h0;
    \$next\csr  = \$573 ;
  end
  always @* begin
    \$next\csr_we  = 1'h0;
    \$next\csr_we  = \$579 ;
  end
  always @* begin
    \$next\privileged  = 1'h0;
    \$next\privileged  = \$585 ;
  end
  always @* begin
    \$next\ecall  = 1'h0;
    \$next\ecall  = \$589 ;
  end
  always @* begin
    \$next\ebreak  = 1'h0;
    \$next\ebreak  = \$593 ;
  end
  always @* begin
    \$next\mret  = 1'h0;
    \$next\mret  = \$597 ;
  end
  always @* begin
    \$next\bypass_x  = 1'h0;
    \$next\bypass_x  = \$605 ;
  end
  always @* begin
    \$next\bypass_m  = 1'h0;
    \$next\bypass_m  = \$609 ;
  end
  always @* begin
    \$next\iimm12  = 12'h000;
    \$next\iimm12  = instruction[31:20];
  end
  always @* begin
    \$next\illegal  = 1'h0;
    \$next\illegal  = \$645 ;
  end
  always @* begin
    \$next\simm12  = 12'h000;
    \$next\simm12  = { instruction[31:25], instruction[11:7] };
  end
  always @* begin
    \$next\bimm12  = 12'h000;
    \$next\bimm12  = { instruction[7], instruction[30:25], instruction[11:8], 1'h0 };
  end
  always @* begin
    \$next\uimm20  = 20'h00000;
    \$next\uimm20  = instruction[31:12];
  end
  always @* begin
    \$next\jimm20  = 20'h00000;
    \$next\jimm20  = { instruction[19:12], instruction[20], instruction[30:21], 1'h0 };
  end
  always @* begin
    \$next\fmt  = 3'h0;
    casez (opcode)
      5'h0d:
          \$next\fmt  = 3'h4;
      5'h05:
          \$next\fmt  = 3'h4;
      5'h1b:
          \$next\fmt  = 3'h5;
      5'h19:
          \$next\fmt  = 3'h1;
      5'h18:
          \$next\fmt  = 3'h3;
      5'h00:
          \$next\fmt  = 3'h1;
      5'h08:
          \$next\fmt  = 3'h2;
      5'h04:
          \$next\fmt  = 3'h1;
      5'h0c:
          \$next\fmt  = 3'h0;
      5'h03:
          \$next\fmt  = 3'h1;
      5'h1c:
          \$next\fmt  = 3'h1;
    endcase
  end
  assign \$8  = \$9 ;
  assign divide = 1'h0;
  assign multiply = 1'h0;
  assign illegal = \$next\illegal ;
  assign bypass_m = \$next\bypass_m ;
  assign bypass_x = \$next\bypass_x ;
  assign mret = \$next\mret ;
  assign ebreak = \$next\ebreak ;
  assign ecall = \$next\ecall ;
  assign privileged = \$next\privileged ;
  assign csr_we = \$next\csr_we ;
  assign csr = \$next\csr ;
  assign fence_i = \$next\fence_i ;
  assign store = \$next\store ;
  assign load = \$next\load ;
  assign jump = \$next\jump ;
  assign auipc = \$next\auipc ;
  assign lui = \$next\lui ;
  assign sext = \$next\sext ;
  assign direction = \$next\direction ;
  assign shift = \$next\shift ;
  assign \logic  = \$next\logic ;
  assign adder_sub = \$next\adder_sub ;
  assign adder = \$next\adder ;
  assign branch = \$next\branch ;
  assign compare = \$next\compare ;
  assign funct3 = \$next\funct3 ;
  assign rs2_re = \$next\rs2_re ;
  assign rs1_re = \$next\rs1_re ;
  assign rd_we = \$next\rd_we ;
  assign rs2 = \$next\rs2 ;
  assign rs1 = \$next\rs1 ;
  assign rd = \$next\rd ;
  assign immediate = \$next\immediate ;
  assign fmt = \$next\fmt ;
  assign jimm20 = \$next\jimm20 ;
  assign uimm20 = \$next\uimm20 ;
  assign bimm12 = \$next\bimm12 ;
  assign simm12 = \$next\simm12 ;
  assign iimm12 = \$next\iimm12 ;
  assign funct12 = \$next\funct12 ;
  assign funct7 = \$next\funct7 ;
  assign \funct3$1  = \$next\funct3$1 ;
  assign opcode = \$next\opcode ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.exception" *)
(* generator = "nMigen" *)
module exception(rst, mtvec_r__base, mepc_r__value, external_interrupt, timer_interrupt, x_pc, x_ecall, x_misaligned_fetch, x_bus_error, x_illegal, x_mret, x_stall, x_valid, x_ebreak, x_raise, mstatus_r__uie, mstatus_r__sie, mstatus_r__mie, mstatus_r__upie, mstatus_r__spie, mstatus_r__mpie, mstatus_r__spp, mstatus_r__mpp, mstatus_r__fs, mstatus_r__xs, mstatus_r__mprv, mstatus_r__sum, mstatus_r__mxr, mstatus_r__tvm, mstatus_r__tw, mstatus_r__tsr, mstatus_r__sd, misa_r__extensions, misa_r__mxl, mie_r__usie, mie_r__ssie, mie_r__msie, mie_r__utie, mie_r__stie, mie_r__mtie, mie_r__ueie, mie_r__seie, mie_r__meie, mtvec_r__mode, mscratch_r__value, mcause_r__ecode, mcause_r__interrupt, mip_r__usip, mip_r__ssip, mip_r__msip, mip_r__utip, mip_r__stip, mip_r__mtip, mip_r__ueip, mip_r__seip, mip_r__meip, irq_mask_r__value, irq_pending_r__value, mstatus_w__uie, mstatus_w__sie, mstatus_w__wpri0, mstatus_r__wpri0, mstatus_w__mie, mstatus_w__upie, mstatus_w__spie, mstatus_w__wpri1, mstatus_r__wpri1, mstatus_w__mpie, mstatus_w__spp, mstatus_w__wpri2, mstatus_r__wpri2, mstatus_w__mpp, mstatus_w__fs, mstatus_w__xs, mstatus_w__mprv, mstatus_w__sum, mstatus_w__mxr, mstatus_w__tvm, mstatus_w__tw, mstatus_w__tsr, mstatus_w__wpri3, mstatus_r__wpri3, mstatus_w__sd, mstatus_we, misa_w__extensions, misa_w__wiri0, misa_r__wiri0, misa_w__mxl, misa_we, mie_w__usie, mie_w__ssie, mie_w__wpri0, mie_r__wpri0, mie_w__msie, mie_w__utie, mie_w__stie, mie_w__wpri1, mie_r__wpri1, mie_w__mtie, mie_w__ueie, mie_w__seie, mie_w__wpri2, mie_r__wpri2, mie_w__meie, mie_w__wpri3, mie_r__wpri3, mie_we, mtvec_w__mode, mtvec_w__base, mtvec_we, mscratch_w__value, mscratch_we, mepc_w__value, mepc_we, mcause_w__ecode, mcause_w__interrupt, mcause_we, mip_w__usip, mip_w__ssip, mip_w__wiri0, mip_r__wiri0, mip_w__msip, mip_w__utip, mip_w__stip, mip_w__wiri1, mip_r__wiri1, mip_w__mtip, mip_w__ueip, mip_w__seip, mip_w__wiri2, mip_r__wiri2, mip_w__meip, mip_w__wiri3, mip_r__wiri3, mip_we, irq_mask_w__value, irq_mask_we, irq_pending_w__value, irq_pending_we, clk);
  wire \$1 ;
  wire [33:0] \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [30:0] \$16 ;
  wire [33:0] \$18 ;
  wire [32:0] \$20 ;
  wire [32:0] \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire [30:0] \$29 ;
  wire \$3 ;
  wire [30:0] \$31 ;
  wire \$33 ;
  wire [31:0] \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:75" *)
  reg [15:0] \$next\interrupt_pe_i ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\irq_mask_r__value ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\irq_pending_r__value ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \$next\mcause_r__ecode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mcause_r__interrupt ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\mepc_r__value ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__meie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__msie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__mtie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__seie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__ssie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__stie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__ueie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__usie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__utie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__wpri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__wpri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mie_r__wpri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\mie_r__wpri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__meip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__msip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__mtip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__seip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__ssip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__stip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__ueip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__usip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__utip ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__wiri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__wiri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mip_r__wiri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [19:0] \$next\mip_r__wiri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [25:0] \$next\misa_r__extensions ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\misa_r__mxl ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\misa_r__wiri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\mscratch_r__value ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_r__fs ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__mie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__mpie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_r__mpp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__mprv ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__mxr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__sd ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__sie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__spie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__spp ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__sum ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__tsr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__tvm ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__tw ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__uie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__upie ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__wpri0 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\mstatus_r__wpri1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_r__wpri2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [7:0] \$next\mstatus_r__wpri3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mstatus_r__xs ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\mtvec_r__base ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\mtvec_r__mode ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:75" *)
  reg [15:0] \$next\trap_pe_i ;
  (* src = "minerva/minerva/units/exception.py:36" *)
  reg \$next\x_raise ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "minerva/minerva/units/exception.py:24" *)
  input [31:0] external_interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:75" *)
  wire [15:0] interrupt_pe_i;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:77" *)
  wire interrupt_pe_n;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *)
  wire [3:0] interrupt_pe_o;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] irq_mask_r__value;
  reg [31:0] irq_mask_r__value = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] irq_mask_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  input irq_mask_we;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] irq_pending_r__value;
  reg [31:0] irq_pending_r__value = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] irq_pending_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  input irq_pending_we;
  (* init = 31'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [30:0] mcause_r__ecode;
  reg [30:0] mcause_r__ecode = 31'h00000000;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mcause_r__interrupt;
  reg mcause_r__interrupt = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [30:0] mcause_w__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mcause_w__interrupt;
  (* src = "minerva/minerva/csr.py:30" *)
  input mcause_we;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] mepc_r__value;
  reg [31:0] mepc_r__value = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] mepc_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  input mepc_we;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__meie;
  reg mie_r__meie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__msie;
  reg mie_r__msie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__mtie;
  reg mie_r__mtie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__seie;
  reg mie_r__seie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__ssie;
  reg mie_r__ssie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__stie;
  reg mie_r__stie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__ueie;
  reg mie_r__ueie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__usie;
  reg mie_r__usie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__utie;
  reg mie_r__utie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__wpri0;
  reg mie_r__wpri0 = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__wpri1;
  reg mie_r__wpri1 = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mie_r__wpri2;
  reg mie_r__wpri2 = 1'h0;
  (* init = 20'h00000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [19:0] mie_r__wpri3;
  reg [19:0] mie_r__wpri3 = 20'h00000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mie_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [19:0] mie_w__wpri3;
  (* src = "minerva/minerva/csr.py:30" *)
  input mie_we;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__meip;
  reg mip_r__meip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__msip;
  reg mip_r__msip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__mtip;
  reg mip_r__mtip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__seip;
  reg mip_r__seip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__ssip;
  reg mip_r__ssip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__stip;
  reg mip_r__stip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__ueip;
  reg mip_r__ueip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__usip;
  reg mip_r__usip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__utip;
  reg mip_r__utip = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__wiri0;
  reg mip_r__wiri0 = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__wiri1;
  reg mip_r__wiri1 = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mip_r__wiri2;
  reg mip_r__wiri2 = 1'h0;
  (* init = 20'h00000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [19:0] mip_r__wiri3;
  reg [19:0] mip_r__wiri3 = 20'h00000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mip_w__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [19:0] mip_w__wiri3;
  (* src = "minerva/minerva/csr.py:30" *)
  input mip_we;
  (* init = 26'h0000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [25:0] misa_r__extensions;
  reg [25:0] misa_r__extensions = 26'h0000000;
  (* init = 2'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] misa_r__mxl;
  reg [1:0] misa_r__mxl = 2'h0;
  (* init = 4'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [3:0] misa_r__wiri0;
  reg [3:0] misa_r__wiri0 = 4'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [25:0] misa_w__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] misa_w__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [3:0] misa_w__wiri0;
  (* src = "minerva/minerva/csr.py:30" *)
  input misa_we;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] mscratch_r__value;
  reg [31:0] mscratch_r__value = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] mscratch_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  input mscratch_we;
  (* init = 2'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_r__fs;
  reg [1:0] mstatus_r__fs = 2'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__mie;
  reg mstatus_r__mie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__mpie;
  reg mstatus_r__mpie = 1'h0;
  (* init = 2'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_r__mpp;
  reg [1:0] mstatus_r__mpp = 2'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__mprv;
  reg mstatus_r__mprv = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__mxr;
  reg mstatus_r__mxr = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__sd;
  reg mstatus_r__sd = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__sie;
  reg mstatus_r__sie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__spie;
  reg mstatus_r__spie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__spp;
  reg mstatus_r__spp = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__sum;
  reg mstatus_r__sum = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__tsr;
  reg mstatus_r__tsr = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__tvm;
  reg mstatus_r__tvm = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__tw;
  reg mstatus_r__tw = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__uie;
  reg mstatus_r__uie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__upie;
  reg mstatus_r__upie = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__wpri0;
  reg mstatus_r__wpri0 = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output mstatus_r__wpri1;
  reg mstatus_r__wpri1 = 1'h0;
  (* init = 2'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_r__wpri2;
  reg [1:0] mstatus_r__wpri2 = 2'h0;
  (* init = 8'h00 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [7:0] mstatus_r__wpri3;
  reg [7:0] mstatus_r__wpri3 = 8'h00;
  (* init = 2'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mstatus_r__xs;
  reg [1:0] mstatus_r__xs = 2'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_w__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_w__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input mstatus_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [7:0] mstatus_w__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mstatus_w__xs;
  (* src = "minerva/minerva/csr.py:30" *)
  input mstatus_we;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [29:0] mtvec_r__base;
  reg [29:0] mtvec_r__base = 30'h00000000;
  (* init = 2'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] mtvec_r__mode;
  reg [1:0] mtvec_r__mode = 2'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [29:0] mtvec_w__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [1:0] mtvec_w__mode;
  (* src = "minerva/minerva/csr.py:30" *)
  input mtvec_we;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "minerva/minerva/units/exception.py:25" *)
  input timer_interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:75" *)
  wire [15:0] trap_pe_i;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:77" *)
  wire trap_pe_n;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *)
  wire [3:0] trap_pe_o;
  (* src = "minerva/minerva/units/exception.py:30" *)
  input x_bus_error;
  (* src = "minerva/minerva/units/exception.py:27" *)
  input x_ebreak;
  (* src = "minerva/minerva/units/exception.py:28" *)
  input x_ecall;
  (* src = "minerva/minerva/units/exception.py:31" *)
  input x_illegal;
  (* src = "minerva/minerva/units/exception.py:29" *)
  input x_misaligned_fetch;
  (* src = "minerva/minerva/units/exception.py:32" *)
  input x_mret;
  (* src = "minerva/minerva/units/exception.py:26" *)
  input [29:0] x_pc;
  (* src = "minerva/minerva/units/exception.py:36" *)
  output x_raise;
  (* src = "minerva/minerva/units/exception.py:33" *)
  input x_stall;
  (* src = "minerva/minerva/units/exception.py:34" *)
  input x_valid;
  assign \$9  = ~ (* src = "minerva/minerva/units/exception.py:75" *) trap_pe_n;
  assign \$13  = x_ebreak | (* src = "minerva/minerva/units/exception.py:79" *) x_ecall;
  assign \$12  = ~ (* src = "minerva/minerva/units/exception.py:79" *) \$13 ;
  assign \$16  = x_pc + (* src = "minerva/minerva/units/exception.py:79" *) \$12 ;
  assign \$18  = \$16  <<< (* src = "minerva/minerva/units/exception.py:79" *) 2'h2;
  assign \$1  = ~ (* src = "minerva/minerva/units/exception.py:69" *) x_stall;
  assign \$21  = x_pc <<< (* src = "minerva/minerva/units/exception.py:85" *) 2'h2;
  assign \$23  = ~ (* src = "minerva/minerva/units/exception.py:69" *) x_stall;
  assign \$25  = x_valid & (* src = "minerva/minerva/units/exception.py:69" *) \$23 ;
  assign \$27  = ~ (* src = "minerva/minerva/units/exception.py:75" *) trap_pe_n;
  assign \$29  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *) trap_pe_o;
  assign \$31  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *) interrupt_pe_o;
  assign \$33  = | (* src = "minerva/minerva/units/exception.py:57" *) irq_pending_r__value;
  assign \$35  = external_interrupt & (* src = "minerva/minerva/units/exception.py:55" *) irq_mask_r__value;
  assign \$37  = mip_r__msip & (* src = "minerva/minerva/units/exception.py:62" *) mie_r__msie;
  assign \$3  = x_valid & (* src = "minerva/minerva/units/exception.py:69" *) \$1 ;
  assign \$39  = mip_r__mtip & (* src = "minerva/minerva/units/exception.py:63" *) mie_r__mtie;
  assign \$41  = mip_r__meip & (* src = "minerva/minerva/units/exception.py:64" *) mie_r__meie;
  assign \$43  = ~ (* src = "minerva/minerva/units/exception.py:67" *) trap_pe_n;
  assign \$45  = ~ (* src = "minerva/minerva/units/exception.py:67" *) interrupt_pe_n;
  assign \$47  = \$45  & (* src = "minerva/minerva/units/exception.py:67" *) mstatus_r__mie;
  assign \$49  = \$43  | (* src = "minerva/minerva/units/exception.py:67" *) \$47 ;
  assign \$5  = ~ (* src = "minerva/minerva/units/exception.py:69" *) x_stall;
  assign \$7  = x_valid & (* src = "minerva/minerva/units/exception.py:69" *) \$5 ;
  always @(posedge clk)
      mip_r__wiri3 <= \$next\mip_r__wiri3 ;
  always @(posedge clk)
      mcause_r__ecode <= \$next\mcause_r__ecode ;
  always @(posedge clk)
      mcause_r__interrupt <= \$next\mcause_r__interrupt ;
  always @(posedge clk)
      mepc_r__value <= \$next\mepc_r__value ;
  always @(posedge clk)
      mscratch_r__value <= \$next\mscratch_r__value ;
  always @(posedge clk)
      mtvec_r__mode <= \$next\mtvec_r__mode ;
  always @(posedge clk)
      mtvec_r__base <= \$next\mtvec_r__base ;
  always @(posedge clk)
      mie_r__usie <= \$next\mie_r__usie ;
  always @(posedge clk)
      mie_r__ssie <= \$next\mie_r__ssie ;
  always @(posedge clk)
      mie_r__wpri0 <= \$next\mie_r__wpri0 ;
  always @(posedge clk)
      mie_r__msie <= \$next\mie_r__msie ;
  always @(posedge clk)
      mie_r__utie <= \$next\mie_r__utie ;
  always @(posedge clk)
      mie_r__stie <= \$next\mie_r__stie ;
  always @(posedge clk)
      mie_r__wpri1 <= \$next\mie_r__wpri1 ;
  always @(posedge clk)
      mie_r__mtie <= \$next\mie_r__mtie ;
  always @(posedge clk)
      mie_r__ueie <= \$next\mie_r__ueie ;
  always @(posedge clk)
      mie_r__seie <= \$next\mie_r__seie ;
  always @(posedge clk)
      mie_r__wpri2 <= \$next\mie_r__wpri2 ;
  always @(posedge clk)
      mie_r__meie <= \$next\mie_r__meie ;
  always @(posedge clk)
      mie_r__wpri3 <= \$next\mie_r__wpri3 ;
  always @(posedge clk)
      misa_r__extensions <= \$next\misa_r__extensions ;
  always @(posedge clk)
      misa_r__wiri0 <= \$next\misa_r__wiri0 ;
  always @(posedge clk)
      misa_r__mxl <= \$next\misa_r__mxl ;
  always @(posedge clk)
      mstatus_r__uie <= \$next\mstatus_r__uie ;
  always @(posedge clk)
      mstatus_r__sie <= \$next\mstatus_r__sie ;
  always @(posedge clk)
      mstatus_r__wpri0 <= \$next\mstatus_r__wpri0 ;
  always @(posedge clk)
      mstatus_r__mie <= \$next\mstatus_r__mie ;
  always @(posedge clk)
      mstatus_r__upie <= \$next\mstatus_r__upie ;
  always @(posedge clk)
      mstatus_r__spie <= \$next\mstatus_r__spie ;
  always @(posedge clk)
      mstatus_r__wpri1 <= \$next\mstatus_r__wpri1 ;
  always @(posedge clk)
      mstatus_r__mpie <= \$next\mstatus_r__mpie ;
  always @(posedge clk)
      mstatus_r__spp <= \$next\mstatus_r__spp ;
  always @(posedge clk)
      mstatus_r__wpri2 <= \$next\mstatus_r__wpri2 ;
  always @(posedge clk)
      mstatus_r__mpp <= \$next\mstatus_r__mpp ;
  always @(posedge clk)
      mstatus_r__fs <= \$next\mstatus_r__fs ;
  always @(posedge clk)
      mstatus_r__xs <= \$next\mstatus_r__xs ;
  always @(posedge clk)
      mstatus_r__mprv <= \$next\mstatus_r__mprv ;
  always @(posedge clk)
      mstatus_r__sum <= \$next\mstatus_r__sum ;
  always @(posedge clk)
      mstatus_r__mxr <= \$next\mstatus_r__mxr ;
  always @(posedge clk)
      mstatus_r__tvm <= \$next\mstatus_r__tvm ;
  always @(posedge clk)
      mstatus_r__tw <= \$next\mstatus_r__tw ;
  always @(posedge clk)
      mstatus_r__tsr <= \$next\mstatus_r__tsr ;
  always @(posedge clk)
      mstatus_r__wpri3 <= \$next\mstatus_r__wpri3 ;
  always @(posedge clk)
      mstatus_r__sd <= \$next\mstatus_r__sd ;
  always @(posedge clk)
      irq_pending_r__value <= \$next\irq_pending_r__value ;
  always @(posedge clk)
      irq_mask_r__value <= \$next\irq_mask_r__value ;
  always @(posedge clk)
      mip_r__usip <= \$next\mip_r__usip ;
  always @(posedge clk)
      mip_r__ssip <= \$next\mip_r__ssip ;
  always @(posedge clk)
      mip_r__wiri0 <= \$next\mip_r__wiri0 ;
  always @(posedge clk)
      mip_r__msip <= \$next\mip_r__msip ;
  always @(posedge clk)
      mip_r__utip <= \$next\mip_r__utip ;
  always @(posedge clk)
      mip_r__stip <= \$next\mip_r__stip ;
  always @(posedge clk)
      mip_r__wiri1 <= \$next\mip_r__wiri1 ;
  always @(posedge clk)
      mip_r__mtip <= \$next\mip_r__mtip ;
  always @(posedge clk)
      mip_r__ueip <= \$next\mip_r__ueip ;
  always @(posedge clk)
      mip_r__seip <= \$next\mip_r__seip ;
  always @(posedge clk)
      mip_r__wiri2 <= \$next\mip_r__wiri2 ;
  always @(posedge clk)
      mip_r__meip <= \$next\mip_r__meip ;
  interrupt_pe interrupt_pe (
    .i(interrupt_pe_i),
    .n(interrupt_pe_n),
    .o(interrupt_pe_o)
  );
  trap_pe trap_pe (
    .i(trap_pe_i),
    .n(trap_pe_n),
    .o(trap_pe_o)
  );
  always @* begin
    \$next\mstatus_r__uie  = mstatus_r__uie;
    \$next\mstatus_r__sie  = mstatus_r__sie;
    \$next\mstatus_r__wpri0  = mstatus_r__wpri0;
    \$next\mstatus_r__mie  = mstatus_r__mie;
    \$next\mstatus_r__upie  = mstatus_r__upie;
    \$next\mstatus_r__spie  = mstatus_r__spie;
    \$next\mstatus_r__wpri1  = mstatus_r__wpri1;
    \$next\mstatus_r__mpie  = mstatus_r__mpie;
    \$next\mstatus_r__spp  = mstatus_r__spp;
    \$next\mstatus_r__wpri2  = mstatus_r__wpri2;
    \$next\mstatus_r__mpp  = mstatus_r__mpp;
    \$next\mstatus_r__fs  = mstatus_r__fs;
    \$next\mstatus_r__xs  = mstatus_r__xs;
    \$next\mstatus_r__mprv  = mstatus_r__mprv;
    \$next\mstatus_r__sum  = mstatus_r__sum;
    \$next\mstatus_r__mxr  = mstatus_r__mxr;
    \$next\mstatus_r__tvm  = mstatus_r__tvm;
    \$next\mstatus_r__tw  = mstatus_r__tw;
    \$next\mstatus_r__tsr  = mstatus_r__tsr;
    \$next\mstatus_r__wpri3  = mstatus_r__wpri3;
    \$next\mstatus_r__sd  = mstatus_r__sd;
    casez (mstatus_we)
      1'h1:
          { \$next\mstatus_r__sd , \$next\mstatus_r__wpri3 , \$next\mstatus_r__tsr , \$next\mstatus_r__tw , \$next\mstatus_r__tvm , \$next\mstatus_r__mxr , \$next\mstatus_r__sum , \$next\mstatus_r__mprv , \$next\mstatus_r__xs , \$next\mstatus_r__fs , \$next\mstatus_r__mpp , \$next\mstatus_r__wpri2 , \$next\mstatus_r__spp , \$next\mstatus_r__mpie , \$next\mstatus_r__wpri1 , \$next\mstatus_r__spie , \$next\mstatus_r__upie , \$next\mstatus_r__mie , \$next\mstatus_r__wpri0 , \$next\mstatus_r__sie , \$next\mstatus_r__uie  } = { mstatus_w__sd, mstatus_w__wpri3, mstatus_w__tsr, mstatus_w__tw, mstatus_w__tvm, mstatus_w__mxr, mstatus_w__sum, mstatus_w__mprv, mstatus_w__xs, mstatus_w__fs, mstatus_w__mpp, mstatus_w__wpri2, mstatus_w__spp, mstatus_w__mpie, mstatus_w__wpri1, mstatus_w__spie, mstatus_w__upie, mstatus_w__mie, mstatus_w__wpri0, mstatus_w__sie, mstatus_w__uie };
    endcase
    casez (\$3 )
      1'h1:
          casez ({ x_mret, x_raise })
            2'bz1:
              begin
                \$next\mstatus_r__mpie  = mstatus_r__mie;
                \$next\mstatus_r__mie  = 1'h0;
              end
            2'b1z:
                \$next\mstatus_r__mie  = mstatus_r__mpie;
          endcase
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\mstatus_r__uie  = 1'h0;
          \$next\mstatus_r__sie  = 1'h0;
          \$next\mstatus_r__wpri0  = 1'h0;
          \$next\mstatus_r__mie  = 1'h0;
          \$next\mstatus_r__upie  = 1'h0;
          \$next\mstatus_r__spie  = 1'h0;
          \$next\mstatus_r__wpri1  = 1'h0;
          \$next\mstatus_r__mpie  = 1'h0;
          \$next\mstatus_r__spp  = 1'h0;
          \$next\mstatus_r__wpri2  = 2'h0;
          \$next\mstatus_r__mpp  = 2'h0;
          \$next\mstatus_r__fs  = 2'h0;
          \$next\mstatus_r__xs  = 2'h0;
          \$next\mstatus_r__mprv  = 1'h0;
          \$next\mstatus_r__sum  = 1'h0;
          \$next\mstatus_r__mxr  = 1'h0;
          \$next\mstatus_r__tvm  = 1'h0;
          \$next\mstatus_r__tw  = 1'h0;
          \$next\mstatus_r__tsr  = 1'h0;
          \$next\mstatus_r__wpri3  = 8'h00;
          \$next\mstatus_r__sd  = 1'h0;
        end
    endcase
  end
  always @* begin
    \$next\misa_r__extensions  = misa_r__extensions;
    \$next\misa_r__wiri0  = misa_r__wiri0;
    \$next\misa_r__mxl  = misa_r__mxl;
    casez (misa_we)
      1'h1:
          { \$next\misa_r__mxl , \$next\misa_r__wiri0 , \$next\misa_r__extensions  } = { misa_w__mxl, misa_w__wiri0, misa_w__extensions };
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\misa_r__extensions  = 26'h0000000;
          \$next\misa_r__wiri0  = 4'h0;
          \$next\misa_r__mxl  = 2'h0;
        end
    endcase
  end
  always @* begin
    \$next\mie_r__usie  = mie_r__usie;
    \$next\mie_r__ssie  = mie_r__ssie;
    \$next\mie_r__wpri0  = mie_r__wpri0;
    \$next\mie_r__msie  = mie_r__msie;
    \$next\mie_r__utie  = mie_r__utie;
    \$next\mie_r__stie  = mie_r__stie;
    \$next\mie_r__wpri1  = mie_r__wpri1;
    \$next\mie_r__mtie  = mie_r__mtie;
    \$next\mie_r__ueie  = mie_r__ueie;
    \$next\mie_r__seie  = mie_r__seie;
    \$next\mie_r__wpri2  = mie_r__wpri2;
    \$next\mie_r__meie  = mie_r__meie;
    \$next\mie_r__wpri3  = mie_r__wpri3;
    casez (mie_we)
      1'h1:
          { \$next\mie_r__wpri3 , \$next\mie_r__meie , \$next\mie_r__wpri2 , \$next\mie_r__seie , \$next\mie_r__ueie , \$next\mie_r__mtie , \$next\mie_r__wpri1 , \$next\mie_r__stie , \$next\mie_r__utie , \$next\mie_r__msie , \$next\mie_r__wpri0 , \$next\mie_r__ssie , \$next\mie_r__usie  } = { mie_w__wpri3, mie_w__meie, mie_w__wpri2, mie_w__seie, mie_w__ueie, mie_w__mtie, mie_w__wpri1, mie_w__stie, mie_w__utie, mie_w__msie, mie_w__wpri0, mie_w__ssie, mie_w__usie };
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\mie_r__usie  = 1'h0;
          \$next\mie_r__ssie  = 1'h0;
          \$next\mie_r__wpri0  = 1'h0;
          \$next\mie_r__msie  = 1'h0;
          \$next\mie_r__utie  = 1'h0;
          \$next\mie_r__stie  = 1'h0;
          \$next\mie_r__wpri1  = 1'h0;
          \$next\mie_r__mtie  = 1'h0;
          \$next\mie_r__ueie  = 1'h0;
          \$next\mie_r__seie  = 1'h0;
          \$next\mie_r__wpri2  = 1'h0;
          \$next\mie_r__meie  = 1'h0;
          \$next\mie_r__wpri3  = 20'h00000;
        end
    endcase
  end
  always @* begin
    \$next\mtvec_r__mode  = mtvec_r__mode;
    \$next\mtvec_r__base  = mtvec_r__base;
    casez (mtvec_we)
      1'h1:
          { \$next\mtvec_r__base , \$next\mtvec_r__mode  } = { mtvec_w__base, mtvec_w__mode };
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\mtvec_r__mode  = 2'h0;
          \$next\mtvec_r__base  = 30'h00000000;
        end
    endcase
  end
  always @* begin
    \$next\mscratch_r__value  = mscratch_r__value;
    casez (mscratch_we)
      1'h1:
          \$next\mscratch_r__value  = mscratch_w__value;
    endcase
    casez (rst)
      1'h1:
          \$next\mscratch_r__value  = 32'd0;
    endcase
  end
  always @* begin
    \$next\mepc_r__value  = mepc_r__value;
    casez (mepc_we)
      1'h1:
          \$next\mepc_r__value  = mepc_w__value;
    endcase
    casez (\$7 )
      1'h1:
          casez ({ x_mret, x_raise })
            2'bz1:
                casez (\$9 )
                  1'h1:
                      \$next\mepc_r__value  = \$11 [31:0];
                  1'hz:
                      \$next\mepc_r__value  = \$20 [31:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\mepc_r__value  = 32'd0;
    endcase
  end
  always @* begin
    \$next\mcause_r__ecode  = mcause_r__ecode;
    \$next\mcause_r__interrupt  = mcause_r__interrupt;
    casez (mcause_we)
      1'h1:
          { \$next\mcause_r__interrupt , \$next\mcause_r__ecode  } = { mcause_w__interrupt, mcause_w__ecode };
    endcase
    casez (\$25 )
      1'h1:
          casez ({ x_mret, x_raise })
            2'bz1:
                casez (\$27 )
                  1'h1:
                    begin
                      \$next\mcause_r__ecode  = \$29 ;
                      \$next\mcause_r__interrupt  = 1'h0;
                    end
                  1'hz:
                    begin
                      \$next\mcause_r__ecode  = \$31 ;
                      \$next\mcause_r__interrupt  = 1'h1;
                    end
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\mcause_r__ecode  = 31'h00000000;
          \$next\mcause_r__interrupt  = 1'h0;
        end
    endcase
  end
  always @* begin
    \$next\mip_r__usip  = mip_r__usip;
    \$next\mip_r__ssip  = mip_r__ssip;
    \$next\mip_r__wiri0  = mip_r__wiri0;
    \$next\mip_r__msip  = mip_r__msip;
    \$next\mip_r__utip  = mip_r__utip;
    \$next\mip_r__stip  = mip_r__stip;
    \$next\mip_r__wiri1  = mip_r__wiri1;
    \$next\mip_r__mtip  = mip_r__mtip;
    \$next\mip_r__ueip  = mip_r__ueip;
    \$next\mip_r__seip  = mip_r__seip;
    \$next\mip_r__wiri2  = mip_r__wiri2;
    \$next\mip_r__meip  = mip_r__meip;
    \$next\mip_r__wiri3  = mip_r__wiri3;
    \$next\mip_r__mtip  = timer_interrupt;
    \$next\mip_r__meip  = \$33 ;
    casez (mip_we)
      1'h1:
          { \$next\mip_r__wiri3 , \$next\mip_r__meip , \$next\mip_r__wiri2 , \$next\mip_r__seip , \$next\mip_r__ueip , \$next\mip_r__mtip , \$next\mip_r__wiri1 , \$next\mip_r__stip , \$next\mip_r__utip , \$next\mip_r__msip , \$next\mip_r__wiri0 , \$next\mip_r__ssip , \$next\mip_r__usip  } = { mip_w__wiri3, mip_w__meip, mip_w__wiri2, mip_w__seip, mip_w__ueip, mip_w__mtip, mip_w__wiri1, mip_w__stip, mip_w__utip, mip_w__msip, mip_w__wiri0, mip_w__ssip, mip_w__usip };
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\mip_r__usip  = 1'h0;
          \$next\mip_r__ssip  = 1'h0;
          \$next\mip_r__wiri0  = 1'h0;
          \$next\mip_r__msip  = 1'h0;
          \$next\mip_r__utip  = 1'h0;
          \$next\mip_r__stip  = 1'h0;
          \$next\mip_r__wiri1  = 1'h0;
          \$next\mip_r__mtip  = 1'h0;
          \$next\mip_r__ueip  = 1'h0;
          \$next\mip_r__seip  = 1'h0;
          \$next\mip_r__wiri2  = 1'h0;
          \$next\mip_r__meip  = 1'h0;
          \$next\mip_r__wiri3  = 20'h00000;
        end
    endcase
  end
  always @* begin
    \$next\irq_mask_r__value  = irq_mask_r__value;
    casez (irq_mask_we)
      1'h1:
          \$next\irq_mask_r__value  = irq_mask_w__value;
    endcase
    casez (rst)
      1'h1:
          \$next\irq_mask_r__value  = 32'd0;
    endcase
  end
  always @* begin
    \$next\irq_pending_r__value  = irq_pending_r__value;
    \$next\irq_pending_r__value  = \$35 ;
    casez (irq_pending_we)
      1'h1:
          \$next\irq_pending_r__value  = irq_pending_w__value;
    endcase
    casez (rst)
      1'h1:
          \$next\irq_pending_r__value  = 32'd0;
    endcase
  end
  always @* begin
    \$next\trap_pe_i  = 16'h0000;
    \$next\trap_pe_i [0] = x_misaligned_fetch;
    \$next\trap_pe_i [1] = x_bus_error;
    \$next\trap_pe_i [2] = x_illegal;
    \$next\trap_pe_i [3] = x_ebreak;
    \$next\trap_pe_i [11] = x_ecall;
  end
  always @* begin
    \$next\interrupt_pe_i  = 16'h0000;
    \$next\interrupt_pe_i [3] = \$37 ;
    \$next\interrupt_pe_i [7] = \$39 ;
    \$next\interrupt_pe_i [11] = \$41 ;
  end
  always @* begin
    \$next\x_raise  = 1'h0;
    \$next\x_raise  = \$49 ;
  end
  assign \$11  = \$18 ;
  assign \$20  = \$21 ;
  assign x_raise = \$next\x_raise ;
  assign interrupt_pe_i = \$next\interrupt_pe_i ;
  assign trap_pe_i = \$next\trap_pe_i ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.f" *)
(* generator = "nMigen" *)
module f(rst, valid, stall, kill, \valid$1 , \stall$2 , \kill$3 , payload__branch_predict_taken, \payload__branch_predict_taken$4 , \stall$5 , m_branch_taken, \valid$6 , \valid$7 , x_raise, clk);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$9 ;
  (* src = "minerva/minerva/stage.py:58" *)
  reg \$next\kill$17 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\kill$3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\stall ;
  (* src = "minerva/minerva/stage.py:59" *)
  reg \$next\stall$5 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\valid$1 ;
  (* src = "minerva/minerva/stage.py:60" *)
  reg \$next\valid$8 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input kill;
  (* src = "minerva/minerva/stage.py:58" *)
  wire \kill$17 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \kill$3 ;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  input m_branch_taken;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input payload__branch_predict_taken;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input \payload__branch_predict_taken$4 ;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input \stall$2 ;
  (* src = "minerva/minerva/stage.py:59" *)
  output \stall$5 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \valid$1 ;
  reg \valid$1  = 1'h0;
  (* src = "minerva/minerva/stage.py:60" *)
  input \valid$6 ;
  (* src = "minerva/minerva/stage.py:60" *)
  input \valid$7 ;
  (* src = "minerva/minerva/stage.py:60" *)
  wire \valid$8 ;
  (* src = "minerva/minerva/units/exception.py:36" *)
  input x_raise;
  assign \$9  = ~ (* src = "minerva/minerva/stage.py:83" *) kill;
  assign \$11  = valid & (* src = "minerva/minerva/stage.py:83" *) \$9 ;
  assign \$13  = ~ (* src = "minerva/minerva/stage.py:88" *) \stall$5 ;
  assign \$15  = ~ (* src = "minerva/minerva/stage.py:90" *) \stall$2 ;
  assign \$18  = \$15  | (* src = "minerva/minerva/stage.py:90" *) \kill$17 ;
  assign \$20  = payload__branch_predict_taken & (* src = "minerva/minerva/core.py:564" *) \valid$7 ;
  assign \$22  = ~ (* src = "minerva/minerva/core.py:564" *) x_raise;
  assign \$24  = \$20  & (* src = "minerva/minerva/core.py:564" *) \$22 ;
  assign \$26  = 1'h0 | (* src = "minerva/minerva/stage.py:95" *) \$24 ;
  assign \$28  = ~ (* src = "minerva/minerva/core.py:566" *) m_branch_taken;
  assign \$30  = \payload__branch_predict_taken$4  & (* src = "minerva/minerva/core.py:566" *) \$28 ;
  assign \$32  = \$30  & (* src = "minerva/minerva/core.py:566" *) \valid$6 ;
  assign \$34  = \$26  | (* src = "minerva/minerva/stage.py:95" *) \$32 ;
  assign \$36  = ~ (* src = "minerva/minerva/core.py:568" *) \payload__branch_predict_taken$4 ;
  assign \$38  = \$36  & (* src = "minerva/minerva/core.py:568" *) m_branch_taken;
  assign \$40  = \$38  & (* src = "minerva/minerva/core.py:568" *) \valid$6 ;
  assign \$42  = \$34  | (* src = "minerva/minerva/stage.py:95" *) \$40 ;
  assign \$44  = 1'h0 | (* src = "minerva/minerva/stage.py:98" *) \stall$2 ;
  always @(posedge clk)
      \valid$1  <= \$next\valid$1 ;
  always @* begin
    \$next\valid$8  = 1'h0;
    \$next\valid$8  = \$11 ;
  end
  always @* begin
    \$next\stall  = 1'h0;
    \$next\stall  = \stall$5 ;
  end
  always @* begin
    \$next\valid$1  = \valid$1 ;
    casez ({ \$18 , \$13  })
      2'bz1:
          \$next\valid$1  = \valid$8 ;
      2'b1z:
          \$next\valid$1  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$3  = 1'h0;
    \$next\kill$3  = \kill$17 ;
  end
  always @* begin
    \$next\kill$17  = 1'h0;
    \$next\kill$17  = \$42 ;
  end
  always @* begin
    \$next\stall$5  = 1'h0;
    \$next\stall$5  = \$44 ;
  end
  assign \stall$5  = \$next\stall$5 ;
  assign \kill$17  = \$next\kill$17 ;
  assign \kill$3  = \$next\kill$3 ;
  assign stall = \$next\stall ;
  assign \valid$8  = \$next\valid$8 ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.fetch" *)
(* generator = "nMigen" *)
module fetch(rst, ibus__adr, ibus__dat_r, ibus__cyc, ibus__stb, ibus__ack, ibus__err, a_stall, f_pc, f_stall, d_branch_predict_taken, d_branch_target, d_valid, x_pc, m_branch_predict_taken, m_branch_taken, m_valid, m_branch_target, f_instruction, a_pc, a_misaligned_fetch, f_bus_error, clk);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire [31:0] \$3 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "minerva/minerva/units/fetch.py:29" *)
  reg \$next\f_bus_error ;
  (* src = "minerva/minerva/units/fetch.py:59" *)
  reg \$next\f_bus_error$5 ;
  (* src = "minerva/minerva/units/fetch.py:60" *)
  reg \$next\f_bus_error_r ;
  (* src = "minerva/minerva/units/fetch.py:28" *)
  reg [31:0] \$next\f_instruction ;
  (* src = "minerva/minerva/units/fetch.py:57" *)
  reg [31:0] \$next\f_instruction$2 ;
  (* src = "minerva/minerva/units/fetch.py:58" *)
  reg [31:0] \$next\f_instruction_r ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\ibus__adr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\ibus__cyc ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\ibus__stb ;
  (* src = "minerva/minerva/units/fetch.py:27" *)
  output a_misaligned_fetch;
  (* src = "minerva/minerva/units/fetch.py:26" *)
  output [29:0] a_pc;
  (* src = "minerva/minerva/units/fetch.py:14" *)
  input a_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "minerva/minerva/units/fetch.py:17" *)
  input d_branch_predict_taken;
  (* src = "minerva/minerva/units/fetch.py:18" *)
  input [31:0] d_branch_target;
  (* src = "minerva/minerva/units/fetch.py:19" *)
  input d_valid;
  (* src = "minerva/minerva/units/fetch.py:29" *)
  output f_bus_error;
  (* init = 1'h0 *)
  (* src = "minerva/minerva/units/fetch.py:59" *)
  reg \f_bus_error$5  = 1'h0;
  (* init = 1'h0 *)
  (* src = "minerva/minerva/units/fetch.py:60" *)
  reg f_bus_error_r = 1'h0;
  (* src = "minerva/minerva/units/fetch.py:28" *)
  output [31:0] f_instruction;
  (* init = 32'd0 *)
  (* src = "minerva/minerva/units/fetch.py:57" *)
  reg [31:0] \f_instruction$2  = 32'd0;
  (* init = 32'd0 *)
  (* src = "minerva/minerva/units/fetch.py:58" *)
  reg [31:0] f_instruction_r = 32'd0;
  (* src = "minerva/minerva/units/fetch.py:15" *)
  input [29:0] f_pc;
  (* src = "minerva/minerva/units/fetch.py:16" *)
  input f_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input ibus__ack;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [29:0] ibus__adr;
  reg [29:0] ibus__adr = 30'h00000000;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output ibus__cyc;
  reg ibus__cyc = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] ibus__dat_r;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input ibus__err;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output ibus__stb;
  reg ibus__stb = 1'h0;
  (* src = "minerva/minerva/units/fetch.py:23" *)
  input m_branch_predict_taken;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  input m_branch_taken;
  (* src = "minerva/minerva/units/fetch.py:22" *)
  input [31:0] m_branch_target;
  (* src = "minerva/minerva/units/fetch.py:24" *)
  input m_valid;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "minerva/minerva/units/fetch.py:20" *)
  input [29:0] x_pc;
  anonymous \$1  (
    .a_misaligned_fetch(a_misaligned_fetch),
    .a_pc(a_pc),
    .d_branch_predict_taken(d_branch_predict_taken),
    .d_branch_target(d_branch_target),
    .d_valid(d_valid),
    .f_pc(f_pc),
    .m_branch_predict_taken(m_branch_predict_taken),
    .m_branch_taken(m_branch_taken),
    .m_branch_target(m_branch_target),
    .m_valid(m_valid),
    .x_pc(x_pc)
  );
  assign \$10  = ibus__ack | (* src = "minerva/minerva/units/fetch.py:68" *) ibus__err;
  assign \$12  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  assign \$14  = ibus__ack | (* src = "minerva/minerva/units/fetch.py:68" *) ibus__err;
  assign \$16  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  assign \$18  = ibus__ack | (* src = "minerva/minerva/units/fetch.py:68" *) ibus__err;
  assign \$20  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  assign \$22  = ibus__ack | (* src = "minerva/minerva/units/fetch.py:68" *) ibus__err;
  assign \$24  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  assign \$26  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  assign \$28  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  assign \$3  = f_stall ? (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ir.py:43" *) f_instruction_r : \f_instruction$2 ;
  assign \$6  = f_stall ? (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ir.py:43" *) f_bus_error_r : \f_bus_error$5 ;
  assign \$8  = ~ (* src = "minerva/minerva/units/fetch.py:75" *) a_stall;
  always @(posedge clk)
      f_bus_error_r <= \$next\f_bus_error_r ;
  always @(posedge clk)
      f_instruction_r <= \$next\f_instruction_r ;
  always @(posedge clk)
      ibus__adr <= \$next\ibus__adr ;
  always @(posedge clk)
      \f_bus_error$5  <= \$next\f_bus_error$5 ;
  always @(posedge clk)
      \f_instruction$2  <= \$next\f_instruction$2 ;
  always @(posedge clk)
      ibus__stb <= \$next\ibus__stb ;
  always @(posedge clk)
      ibus__cyc <= \$next\ibus__cyc ;
  always @* begin
    \$next\f_instruction  = 32'd0;
    \$next\f_instruction  = \$3 ;
  end
  always @* begin
    \$next\f_bus_error  = 1'h0;
    \$next\f_bus_error  = \$6 ;
  end
  always @* begin
    \$next\ibus__cyc  = ibus__cyc;
    casez ({ \$8 , ibus__cyc })
      2'bz1:
          casez (\$10 )
            1'h1:
                \$next\ibus__cyc  = 1'h0;
          endcase
      2'b1z:
          \$next\ibus__cyc  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus__cyc  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ibus__stb  = ibus__stb;
    casez ({ \$12 , ibus__cyc })
      2'bz1:
          casez (\$14 )
            1'h1:
                \$next\ibus__stb  = 1'h0;
          endcase
      2'b1z:
          \$next\ibus__stb  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus__stb  = 1'h0;
    endcase
  end
  always @* begin
    \$next\f_instruction$2  = \f_instruction$2 ;
    casez ({ \$16 , ibus__cyc })
      2'bz1:
          casez (\$18 )
            1'h1:
                \$next\f_instruction$2  = ibus__dat_r;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\f_instruction$2  = 32'd0;
    endcase
  end
  always @* begin
    \$next\f_bus_error$5  = \f_bus_error$5 ;
    casez ({ \$20 , ibus__cyc })
      2'bz1:
          casez (\$22 )
            1'h1:
                \$next\f_bus_error$5  = ibus__err;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\f_bus_error$5  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ibus__adr  = ibus__adr;
    casez ({ \$24 , ibus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          \$next\ibus__adr  = a_pc;
    endcase
    casez (rst)
      1'h1:
          \$next\ibus__adr  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\f_instruction_r  = f_instruction_r;
    casez ({ \$26 , ibus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          \$next\f_instruction_r  = \f_instruction$2 ;
    endcase
    casez (rst)
      1'h1:
          \$next\f_instruction_r  = 32'd0;
    endcase
  end
  always @* begin
    \$next\f_bus_error_r  = f_bus_error_r;
    casez ({ \$28 , ibus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          \$next\f_bus_error_r  = \f_bus_error$5 ;
    endcase
    casez (rst)
      1'h1:
          \$next\f_bus_error_r  = 1'h0;
    endcase
  end
  assign f_bus_error = \$next\f_bus_error ;
  assign f_instruction = \$next\f_instruction ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.exception.interrupt_pe" *)
(* generator = "nMigen" *)
module interrupt_pe(n, o, i);
  wire \$1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:77" *)
  reg \$next\n ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *)
  reg [3:0] \$next\o ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:75" *)
  input [15:0] i;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:77" *)
  output n;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *)
  output [3:0] o;
  assign \$1  = i == (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:84" *) 1'h0;
  always @* begin
    \$next\o  = 4'h0;
    casez (i[15])
      1'h1:
          \$next\o  = 4'hf;
    endcase
    casez (i[14])
      1'h1:
          \$next\o  = 4'he;
    endcase
    casez (i[13])
      1'h1:
          \$next\o  = 4'hd;
    endcase
    casez (i[12])
      1'h1:
          \$next\o  = 4'hc;
    endcase
    casez (i[11])
      1'h1:
          \$next\o  = 4'hb;
    endcase
    casez (i[10])
      1'h1:
          \$next\o  = 4'ha;
    endcase
    casez (i[9])
      1'h1:
          \$next\o  = 4'h9;
    endcase
    casez (i[8])
      1'h1:
          \$next\o  = 4'h8;
    endcase
    casez (i[7])
      1'h1:
          \$next\o  = 4'h7;
    endcase
    casez (i[6])
      1'h1:
          \$next\o  = 4'h6;
    endcase
    casez (i[5])
      1'h1:
          \$next\o  = 4'h5;
    endcase
    casez (i[4])
      1'h1:
          \$next\o  = 4'h4;
    endcase
    casez (i[3])
      1'h1:
          \$next\o  = 4'h3;
    endcase
    casez (i[2])
      1'h1:
          \$next\o  = 4'h2;
    endcase
    casez (i[1])
      1'h1:
          \$next\o  = 4'h1;
    endcase
    casez (i[0])
      1'h1:
          \$next\o  = 4'h0;
    endcase
  end
  always @* begin
    \$next\n  = 1'h0;
    \$next\n  = \$1 ;
  end
  assign n = \$next\n ;
  assign o = \$next\o ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.loadstore" *)
(* generator = "nMigen" *)
module loadstore(rst, x_address, x_load, x_store, x_store_operand, x_mask, x_stall, x_valid, w_address, w_load_mask, w_load_data, dbus__adr, dbus__dat_w, dbus__dat_r, dbus__sel, dbus__cyc, dbus__stb, dbus__ack, dbus__we, dbus__err, w_load_result, x_dbus_sel, x_store_data, m_load_data, clk);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\dbus__adr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dbus__cyc ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dbus__dat_w ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\dbus__sel ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dbus__stb ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dbus__we ;
  (* src = "minerva/minerva/units/loadstore.py:32" *)
  reg \$next\m_bus_error ;
  (* src = "minerva/minerva/units/loadstore.py:33" *)
  reg [31:0] \$next\m_load_data ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input dbus__ack;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [29:0] dbus__adr;
  reg [29:0] dbus__adr = 30'h00000000;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output dbus__cyc;
  reg dbus__cyc = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] dbus__dat_r;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] dbus__dat_w;
  reg [31:0] dbus__dat_w = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input dbus__err;
  (* init = 4'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [3:0] dbus__sel;
  reg [3:0] dbus__sel = 4'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output dbus__stb;
  reg dbus__stb = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output dbus__we;
  reg dbus__we = 1'h0;
  (* init = 1'h0 *)
  (* src = "minerva/minerva/units/loadstore.py:32" *)
  reg m_bus_error = 1'h0;
  (* init = 32'd0 *)
  (* src = "minerva/minerva/units/loadstore.py:33" *)
  output [31:0] m_load_data;
  reg [31:0] m_load_data = 32'd0;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "minerva/minerva/units/loadstore.py:26" *)
  input [31:0] w_address;
  (* src = "minerva/minerva/units/loadstore.py:28" *)
  input [31:0] w_load_data;
  (* src = "minerva/minerva/units/loadstore.py:27" *)
  input [2:0] w_load_mask;
  (* src = "minerva/minerva/units/loadstore.py:34" *)
  output [31:0] w_load_result;
  (* src = "minerva/minerva/units/loadstore.py:19" *)
  input [31:0] x_address;
  (* src = "minerva/minerva/units/loadstore.py:30" *)
  output [3:0] x_dbus_sel;
  (* src = "minerva/minerva/units/loadstore.py:20" *)
  input x_load;
  (* src = "minerva/minerva/units/loadstore.py:23" *)
  input [2:0] x_mask;
  (* src = "minerva/minerva/units/loadstore.py:24" *)
  input x_stall;
  (* src = "minerva/minerva/units/loadstore.py:21" *)
  input x_store;
  (* src = "minerva/minerva/units/loadstore.py:31" *)
  output [31:0] x_store_data;
  (* src = "minerva/minerva/units/loadstore.py:22" *)
  input [31:0] x_store_operand;
  (* src = "minerva/minerva/units/loadstore.py:25" *)
  input x_valid;
  \anonymous$1  \$1  (
    .w_address(w_address),
    .w_load_data(w_load_data),
    .w_load_mask(w_load_mask),
    .w_load_result(w_load_result),
    .x_address(x_address),
    .x_dbus_sel(x_dbus_sel),
    .x_mask(x_mask),
    .x_store_data(x_store_data),
    .x_store_operand(x_store_operand)
  );
  assign \$10  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$8 ;
  assign \$12  = dbus__ack | (* src = "minerva/minerva/units/loadstore.py:108" *) dbus__err;
  assign \$14  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$16  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$14 ;
  assign \$18  = dbus__ack | (* src = "minerva/minerva/units/loadstore.py:108" *) dbus__err;
  assign \$20  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$22  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$20 ;
  assign \$24  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$26  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$24 ;
  assign \$28  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$2  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$30  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$28 ;
  assign \$32  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$34  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$32 ;
  assign \$36  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  assign \$38  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$36 ;
  assign \$4  = x_valid & (* src = "minerva/minerva/units/loadstore.py:115" *) \$2 ;
  assign \$6  = dbus__ack | (* src = "minerva/minerva/units/loadstore.py:108" *) dbus__err;
  assign \$8  = ~ (* src = "minerva/minerva/units/loadstore.py:115" *) x_stall;
  always @(posedge clk)
      dbus__sel <= \$next\dbus__sel ;
  always @(posedge clk)
      dbus__dat_w <= \$next\dbus__dat_w ;
  always @(posedge clk)
      dbus__adr <= \$next\dbus__adr ;
  always @(posedge clk)
      dbus__we <= \$next\dbus__we ;
  always @(posedge clk)
      m_bus_error <= \$next\m_bus_error ;
  always @(posedge clk)
      m_load_data <= \$next\m_load_data ;
  always @(posedge clk)
      dbus__stb <= \$next\dbus__stb ;
  always @(posedge clk)
      dbus__cyc <= \$next\dbus__cyc ;
  always @* begin
    \$next\dbus__cyc  = dbus__cyc;
    casez ({ \$4 , dbus__cyc })
      2'bz1:
          casez (\$6 )
            1'h1:
                \$next\dbus__cyc  = 1'h0;
          endcase
      2'b1z:
          casez ({ x_load, x_store })
            2'bz1:
                \$next\dbus__cyc  = 1'h1;
            2'b1z:
                \$next\dbus__cyc  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\dbus__cyc  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dbus__stb  = dbus__stb;
    casez ({ \$10 , dbus__cyc })
      2'bz1:
          casez (\$12 )
            1'h1:
                \$next\dbus__stb  = 1'h0;
          endcase
      2'b1z:
          casez ({ x_load, x_store })
            2'bz1:
                \$next\dbus__stb  = 1'h1;
            2'b1z:
                \$next\dbus__stb  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\dbus__stb  = 1'h0;
    endcase
  end
  always @* begin
    \$next\m_load_data  = m_load_data;
    casez ({ \$16 , dbus__cyc })
      2'bz1:
          casez (\$18 )
            1'h1:
                \$next\m_load_data  = dbus__dat_r;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\m_load_data  = 32'd0;
    endcase
  end
  always @* begin
    \$next\m_bus_error  = m_bus_error;
    casez ({ \$22 , dbus__cyc })
      2'bz1:
          \$next\m_bus_error  = dbus__err;
    endcase
    casez (rst)
      1'h1:
          \$next\m_bus_error  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dbus__we  = dbus__we;
    casez ({ \$26 , dbus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          casez ({ x_load, x_store })
            2'bz1:
                \$next\dbus__we  = 1'h1;
            2'b1z:
                \$next\dbus__we  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\dbus__we  = 1'h0;
    endcase
  end
  always @* begin
    \$next\dbus__adr  = dbus__adr;
    casez ({ \$30 , dbus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          casez ({ x_load, x_store })
            2'bz1:
                \$next\dbus__adr  = x_address[31:2];
            2'b1z:
                \$next\dbus__adr  = x_address[31:2];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\dbus__adr  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\dbus__dat_w  = dbus__dat_w;
    casez ({ \$34 , dbus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          casez ({ x_load, x_store })
            2'bz1:
                \$next\dbus__dat_w  = x_store_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\dbus__dat_w  = 32'd0;
    endcase
  end
  always @* begin
    \$next\dbus__sel  = dbus__sel;
    casez ({ \$38 , dbus__cyc })
      2'bz1:
          /* empty */;
      2'b1z:
          casez ({ x_load, x_store })
            2'bz1:
                \$next\dbus__sel  = x_dbus_sel;
            2'b1z:
                \$next\dbus__sel  = x_dbus_sel;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\dbus__sel  = 4'h0;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.logic" *)
(* generator = "nMigen" *)
module \logic (src1, src2, result, op);
  wire [31:0] \$1 ;
  wire [31:0] \$3 ;
  wire [31:0] \$5 ;
  (* src = "minerva/minerva/units/logic.py:15" *)
  reg [31:0] \$next\result ;
  (* src = "minerva/minerva/units/logic.py:11" *)
  input [2:0] op;
  (* src = "minerva/minerva/units/logic.py:15" *)
  output [31:0] result;
  (* src = "minerva/minerva/units/logic.py:12" *)
  input [31:0] src1;
  (* src = "minerva/minerva/units/logic.py:13" *)
  input [31:0] src2;
  assign \$1  = src1 ^ (* src = "minerva/minerva/units/logic.py:22" *) src2;
  assign \$3  = src1 | (* src = "minerva/minerva/units/logic.py:24" *) src2;
  assign \$5  = src1 & (* src = "minerva/minerva/units/logic.py:26" *) src2;
  always @* begin
    \$next\result  = 32'd0;
    casez (op)
      3'h4:
          \$next\result  = \$1 ;
      3'h6:
          \$next\result  = \$3 ;
      3'h7:
          \$next\result  = \$5 ;
    endcase
  end
  assign result = \$next\result ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.m" *)
(* generator = "nMigen" *)
module m(rst, valid, stall, kill, \valid$1 , \stall$2 , \kill$3 , ibus__cyc, \valid$4 , dbus__cyc, \stall$5 , clk);
  wire \$10 ;
  wire \$12 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "minerva/minerva/stage.py:58" *)
  reg \$next\kill$14 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\kill$3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\stall ;
  (* src = "minerva/minerva/stage.py:59" *)
  reg \$next\stall$5 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\valid$1 ;
  (* src = "minerva/minerva/stage.py:60" *)
  reg \$next\valid$4 ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input dbus__cyc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input ibus__cyc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input kill;
  (* src = "minerva/minerva/stage.py:58" *)
  wire \kill$14 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \kill$3 ;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input \stall$2 ;
  (* src = "minerva/minerva/stage.py:59" *)
  output \stall$5 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \valid$1 ;
  reg \valid$1  = 1'h0;
  (* src = "minerva/minerva/stage.py:60" *)
  output \valid$4 ;
  assign \$10  = ~ (* src = "minerva/minerva/stage.py:88" *) \stall$5 ;
  assign \$12  = ~ (* src = "minerva/minerva/stage.py:90" *) \stall$2 ;
  assign \$15  = \$12  | (* src = "minerva/minerva/stage.py:90" *) \kill$14 ;
  assign \$17  = 1'h0 | (* src = "minerva/minerva/stage.py:98" *) ibus__cyc;
  assign \$19  = \$17  | (* src = "minerva/minerva/stage.py:98" *) dbus__cyc;
  assign \$21  = \$19  | (* src = "minerva/minerva/stage.py:98" *) \stall$2 ;
  assign \$6  = ~ (* src = "minerva/minerva/stage.py:83" *) kill;
  assign \$8  = valid & (* src = "minerva/minerva/stage.py:83" *) \$6 ;
  always @(posedge clk)
      \valid$1  <= \$next\valid$1 ;
  always @* begin
    \$next\valid$4  = 1'h0;
    \$next\valid$4  = \$8 ;
  end
  always @* begin
    \$next\stall  = 1'h0;
    \$next\stall  = \stall$5 ;
  end
  always @* begin
    \$next\valid$1  = \valid$1 ;
    casez ({ \$15 , \$10  })
      2'bz1:
          \$next\valid$1  = \valid$4 ;
      2'b1z:
          \$next\valid$1  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$3  = 1'h0;
    \$next\kill$3  = \kill$14 ;
  end
  always @* begin
    \$next\kill$14  = 1'h0;
    \$next\kill$14  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\stall$5  = 1'h0;
    \$next\stall$5  = \$21 ;
  end
  assign \stall$5  = \$next\stall$5 ;
  assign \kill$14  = \$next\kill$14 ;
  assign \kill$3  = \$next\kill$3 ;
  assign stall = \$next\stall ;
  assign \valid$4  = \$next\valid$4 ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu" *)
(* top =  1  *)
(* generator = "nMigen" *)
module minerva_cpu(rst, external_interrupt, ibus__ack, ibus__adr, ibus__bte, ibus__cti, ibus__cyc, ibus__dat_r, ibus__dat_w, ibus__sel, ibus__stb, ibus__we, ibus__err, dbus__ack, dbus__adr, dbus__bte, dbus__cti, dbus__cyc, dbus__dat_r, dbus__dat_w, dbus__sel, dbus__stb, dbus__we, dbus__err, clk);
  wire \$133 ;
  wire \$135 ;
  wire [32:0] \$137 ;
  wire [32:0] \$138 ;
  wire \$140 ;
  wire [12:0] \$142 ;
  wire \$144 ;
  wire [2:0] \$146 ;
  wire [2:0] \$148 ;
  wire [31:0] \$150 ;
  wire [31:0] \$151 ;
  wire [31:0] \$153 ;
  wire [31:0] \$156 ;
  wire [31:0] \$158 ;
  wire [31:0] \$160 ;
  wire \$161 ;
  wire [31:0] \$164 ;
  wire [31:0] \$166 ;
  wire [3:0] \$168 ;
  wire [3:0] \$169 ;
  wire [3:0] \$171 ;
  wire [3:0] \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire [31:0] \$207 ;
  wire \$209 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$231 ;
  wire [33:0] \$233 ;
  wire [30:0] \$234 ;
  wire [33:0] \$236 ;
  wire [31:0] \$238 ;
  wire \$240 ;
  wire \$242 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire [12:0] \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$270 ;
  wire [32:0] \$272 ;
  wire [32:0] \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$279 ;
  wire \$281 ;
  wire \$283 ;
  wire \$285 ;
  wire \$287 ;
  wire [30:0] \$289 ;
  wire \$291 ;
  wire \$293 ;
  wire \$295 ;
  wire \$297 ;
  wire \$299 ;
  wire \$301 ;
  wire \$303 ;
  wire \$305 ;
  wire \$307 ;
  wire \$309 ;
  wire \$311 ;
  wire \$313 ;
  wire \$315 ;
  wire \$317 ;
  wire \$319 ;
  wire \$321 ;
  wire \$323 ;
  wire \$325 ;
  wire \$327 ;
  wire \$329 ;
  wire \$331 ;
  wire \$333 ;
  wire \$335 ;
  wire \$337 ;
  wire \$339 ;
  wire \$341 ;
  wire \$343 ;
  wire \$345 ;
  wire \$347 ;
  wire \$349 ;
  wire \$351 ;
  wire \$353 ;
  wire \$355 ;
  wire \$357 ;
  wire \$359 ;
  wire \$361 ;
  wire \$363 ;
  wire \$365 ;
  wire \$367 ;
  wire \$369 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire \$377 ;
  wire \$379 ;
  wire \$381 ;
  wire \$383 ;
  wire \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire \$407 ;
  wire [31:0] \$409 ;
  wire [31:0] \$411 ;
  wire \$412 ;
  wire \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$421 ;
  wire \$423 ;
  wire \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  reg \$next\a_m_branch_taken ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\a_payload__branch_predict_taken ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\a_stall ;
  (* src = "minerva/minerva/stage.py:60" *)
  reg \$next\a_valid$3 ;
  (* src = "minerva/minerva/units/adder.py:10" *)
  reg [31:0] \$next\adder_src1 ;
  (* src = "minerva/minerva/units/adder.py:11" *)
  reg [31:0] \$next\adder_src2 ;
  (* src = "minerva/minerva/units/adder.py:9" *)
  reg \$next\adder_sub ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  reg \$next\clk$1 ;
  (* src = "minerva/minerva/units/compare.py:15" *)
  reg \$next\compare_carry ;
  (* src = "minerva/minerva/units/compare.py:13" *)
  reg \$next\compare_negative ;
  (* src = "minerva/minerva/units/compare.py:11" *)
  reg [2:0] \$next\compare_op ;
  (* src = "minerva/minerva/units/compare.py:14" *)
  reg \$next\compare_overflow ;
  (* src = "minerva/minerva/units/compare.py:12" *)
  reg \$next\compare_zero ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [12:0] \$next\csrf_port__addr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [12:0] \$next\csrf_port__addr$32 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\csrf_port__data ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\csrf_port__en ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\csrf_port__en$31 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\d_kill ;
  (* src = "minerva/minerva/core.py:425" *)
  reg \$next\d_m_lock ;
  (* src = "minerva/minerva/core.py:514" *)
  reg [31:0] \$next\d_src1 ;
  (* src = "minerva/minerva/core.py:515" *)
  reg [31:0] \$next\d_src2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\d_stall$12 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\d_valid ;
  (* src = "minerva/minerva/core.py:424" *)
  reg \$next\d_x_lock ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\dbus__adr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\dbus__bte ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\dbus__cti ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dbus__cyc ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\dbus__dat_w ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\dbus__sel ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dbus__stb ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\dbus__we ;
  (* src = "minerva/minerva/units/decoder.py:26" *)
  reg [31:0] \$next\decoder_instruction ;
  (* src = "minerva/minerva/units/exception.py:24" *)
  reg [31:0] \$next\exception_external_interrupt ;
  (* src = "minerva/minerva/units/exception.py:25" *)
  reg \$next\exception_timer_interrupt ;
  (* src = "minerva/minerva/units/exception.py:30" *)
  reg \$next\exception_x_bus_error ;
  (* src = "minerva/minerva/units/exception.py:27" *)
  reg \$next\exception_x_ebreak ;
  (* src = "minerva/minerva/units/exception.py:28" *)
  reg \$next\exception_x_ecall ;
  (* src = "minerva/minerva/units/exception.py:31" *)
  reg \$next\exception_x_illegal ;
  (* src = "minerva/minerva/units/exception.py:29" *)
  reg \$next\exception_x_misaligned_fetch ;
  (* src = "minerva/minerva/units/exception.py:32" *)
  reg \$next\exception_x_mret ;
  (* src = "minerva/minerva/units/exception.py:26" *)
  reg [29:0] \$next\exception_x_pc ;
  (* src = "minerva/minerva/units/exception.py:33" *)
  reg \$next\exception_x_stall ;
  (* src = "minerva/minerva/units/exception.py:34" *)
  reg \$next\exception_x_valid ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\f_kill ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\f_payload__branch_predict_taken ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\f_stall$7 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\f_valid ;
  (* src = "minerva/minerva/units/fetch.py:14" *)
  reg \$next\fetch_a_stall ;
  (* src = "minerva/minerva/units/fetch.py:17" *)
  reg \$next\fetch_d_branch_predict_taken ;
  (* src = "minerva/minerva/units/fetch.py:18" *)
  reg [31:0] \$next\fetch_d_branch_target ;
  (* src = "minerva/minerva/units/fetch.py:19" *)
  reg \$next\fetch_d_valid ;
  (* src = "minerva/minerva/units/fetch.py:15" *)
  reg [29:0] \$next\fetch_f_pc ;
  (* src = "minerva/minerva/units/fetch.py:16" *)
  reg \$next\fetch_f_stall ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\fetch_ibus__ack ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\fetch_ibus__dat_r ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\fetch_ibus__err ;
  (* src = "minerva/minerva/units/fetch.py:23" *)
  reg \$next\fetch_m_branch_predict_taken ;
  (* src = "minerva/minerva/units/fetch.py:22" *)
  reg [31:0] \$next\fetch_m_branch_target ;
  (* src = "minerva/minerva/units/fetch.py:24" *)
  reg \$next\fetch_m_valid ;
  (* src = "minerva/minerva/units/fetch.py:20" *)
  reg [29:0] \$next\fetch_x_pc ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\gprf_r_addr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\gprf_r_addr$27 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:146" *)
  reg [4:0] \$next\gprf_w_addr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:148" *)
  reg [31:0] \$next\gprf_w_data ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:150" *)
  reg \$next\gprf_w_en ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\ibus__adr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [1:0] \$next\ibus__bte ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\ibus__cti ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\ibus__cyc ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\ibus__dat_w ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\ibus__sel ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\ibus__stb ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\ibus__we ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\loadstore_dbus__ack ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\loadstore_dbus__dat_r ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\loadstore_dbus__err ;
  (* src = "minerva/minerva/units/loadstore.py:26" *)
  reg [31:0] \$next\loadstore_w_address ;
  (* src = "minerva/minerva/units/loadstore.py:28" *)
  reg [31:0] \$next\loadstore_w_load_data ;
  (* src = "minerva/minerva/units/loadstore.py:27" *)
  reg [2:0] \$next\loadstore_w_load_mask ;
  (* src = "minerva/minerva/units/loadstore.py:19" *)
  reg [31:0] \$next\loadstore_x_address ;
  (* src = "minerva/minerva/units/loadstore.py:20" *)
  reg \$next\loadstore_x_load ;
  (* src = "minerva/minerva/units/loadstore.py:23" *)
  reg [2:0] \$next\loadstore_x_mask ;
  (* src = "minerva/minerva/units/loadstore.py:24" *)
  reg \$next\loadstore_x_stall ;
  (* src = "minerva/minerva/units/loadstore.py:21" *)
  reg \$next\loadstore_x_store ;
  (* src = "minerva/minerva/units/loadstore.py:22" *)
  reg [31:0] \$next\loadstore_x_store_operand ;
  (* src = "minerva/minerva/units/loadstore.py:25" *)
  reg \$next\loadstore_x_valid ;
  (* src = "minerva/minerva/units/logic.py:11" *)
  reg [2:0] \$next\logic_op ;
  (* src = "minerva/minerva/units/logic.py:12" *)
  reg [31:0] \$next\logic_src1 ;
  (* src = "minerva/minerva/units/logic.py:13" *)
  reg [31:0] \$next\logic_src2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\m_kill ;
  (* src = "minerva/minerva/core.py:418" *)
  reg \$next\m_raw_rs1 ;
  (* src = "minerva/minerva/core.py:421" *)
  reg \$next\m_raw_rs2 ;
  (* src = "minerva/minerva/core.py:450" *)
  reg [31:0] \$next\m_result ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\m_stall$21 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\m_valid ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__adder_sub ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__adder_sub$58 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__branch ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__branch$67 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__branch_predict_taken ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__branch_predict_taken$107 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__branch_taken ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__branch_taken$106 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__branch_target ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__branch_target$104 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__branch_target$105 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__branch_target$68 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bus_error ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bus_error$41 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bus_error$73 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bus_error$74 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bypass_m ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bypass_m$54 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bypass_m$85 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bypass_m$86 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bypass_x ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__bypass_x$53 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__compare ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__compare$66 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__compare$97 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__compare$98 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__condition_met ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__condition_met$103 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__csr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__csr$70 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [11:0] \$next\payload__csr_adr ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [11:0] \$next\payload__csr_adr$71 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__csr_we ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__csr_we$72 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\payload__dbus_sel ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \$next\payload__dbus_sel$95 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__direction ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__direction$63 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__divide ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__divide$101 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__ebreak ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__ebreak$76 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__ecall ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__ecall$75 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__exception ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__exception$110 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__exception$126 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__exception$127 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__fence_i ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__fence_i$69 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\payload__funct3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\payload__funct3$55 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__illegal ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__illegal$78 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__immediate ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__immediate$52 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__instruction ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__instruction$40 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__jump ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__jump$65 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__load ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__load$119 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__load$120 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__load$56 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__load$90 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__load$91 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__load_data ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__load_data$123 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\payload__load_mask ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\payload__load_mask$121 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\payload__load_mask$122 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \$next\payload__load_mask$92 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__logic ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__logic$59 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__misaligned_fetch ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__misaligned_fetch$35 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__misaligned_fetch$38 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__misaligned_fetch$39 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__misaligned_fetch$44 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__misaligned_fetch$45 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__mret ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__mret$108 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__mret$109 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__mret$77 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__multiply ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__multiply$124 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__multiply$125 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__multiply$99 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \$next\payload__pc ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$111 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$112 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \$next\payload__pc$34 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$36 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$37 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$42 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$43 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$79 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \$next\payload__pc$80 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rd ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rd$113 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rd$114 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rd$46 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rd$81 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rd$82 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rd_we ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rd_we$115 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rd_we$116 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rd_we$48 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rd_we$83 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rd_we$84 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__result ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__result$117 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__result$118 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__result$87 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rs1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \$next\payload__rs1$47 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rs1_re ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__rs1_re$49 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__sext ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__sext$64 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__shift ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__shift$62 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__shift$88 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__shift$89 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__src1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__src1$50 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__src2 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__src2$51 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__store ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__store$57 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__store$93 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\payload__store$94 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__store_data ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \$next\payload__store_data$96 ;
  (* src = "minerva/minerva/units/predict.py:9" *)
  reg \$next\predict_d_branch ;
  (* src = "minerva/minerva/units/predict.py:10" *)
  reg \$next\predict_d_jump ;
  (* src = "minerva/minerva/units/predict.py:11" *)
  reg [31:0] \$next\predict_d_offset ;
  (* src = "minerva/minerva/units/predict.py:12" *)
  reg [29:0] \$next\predict_d_pc ;
  (* src = "minerva/minerva/units/predict.py:13" *)
  reg \$next\predict_d_rs1_re ;
  (* src = "minerva/minerva/core.py:191" *)
  reg \$next\rst$2 ;
  (* src = "minerva/minerva/units/shifter.py:9" *)
  reg \$next\shifter_x_direction ;
  (* src = "minerva/minerva/units/shifter.py:10" *)
  reg \$next\shifter_x_sext ;
  (* src = "minerva/minerva/units/shifter.py:11" *)
  reg [4:0] \$next\shifter_x_shamt ;
  (* src = "minerva/minerva/units/shifter.py:12" *)
  reg [31:0] \$next\shifter_x_src1 ;
  (* src = "minerva/minerva/units/shifter.py:13" *)
  reg \$next\shifter_x_stall ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\w_kill ;
  (* src = "minerva/minerva/core.py:419" *)
  reg \$next\w_raw_rs1 ;
  (* src = "minerva/minerva/core.py:422" *)
  reg \$next\w_raw_rs2 ;
  (* src = "minerva/minerva/core.py:451" *)
  reg [31:0] \$next\w_result ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\w_valid ;
  (* src = "minerva/minerva/core.py:517" *)
  reg \$next\w_valid_r ;
  (* src = "minerva/minerva/core.py:452" *)
  reg [31:0] \$next\x_csr_result ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\x_kill ;
  (* src = "minerva/minerva/core.py:423" *)
  reg \$next\x_raw_csr ;
  (* src = "minerva/minerva/core.py:417" *)
  reg \$next\x_raw_rs1 ;
  (* src = "minerva/minerva/core.py:420" *)
  reg \$next\x_raw_rs2 ;
  (* src = "minerva/minerva/core.py:449" *)
  reg [31:0] \$next\x_result ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\x_stall$17 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\x_valid ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire a_kill;
  (* src = "minerva/minerva/units/fetch.py:21" *)
  wire a_m_branch_taken;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire a_payload__branch_predict_taken;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire a_stall;
  (* src = "minerva/minerva/stage.py:59" *)
  wire \a_stall$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire a_valid;
  (* src = "minerva/minerva/stage.py:60" *)
  wire \a_valid$3 ;
  (* src = "minerva/minerva/stage.py:60" *)
  wire \a_valid$5 ;
  (* src = "minerva/minerva/units/adder.py:14" *)
  wire adder_carry;
  (* src = "minerva/minerva/units/adder.py:15" *)
  wire adder_overflow;
  (* src = "minerva/minerva/units/adder.py:13" *)
  wire [31:0] adder_result;
  (* src = "minerva/minerva/units/adder.py:10" *)
  wire [31:0] adder_src1;
  (* src = "minerva/minerva/units/adder.py:11" *)
  wire [31:0] adder_src2;
  (* src = "minerva/minerva/units/adder.py:9" *)
  wire adder_sub;
  (* src = "minerva/minerva/core.py:142" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  wire \clk$1 ;
  (* src = "minerva/minerva/units/compare.py:15" *)
  wire compare_carry;
  (* src = "minerva/minerva/units/compare.py:17" *)
  wire compare_condition_met;
  (* src = "minerva/minerva/units/compare.py:13" *)
  wire compare_negative;
  (* src = "minerva/minerva/units/compare.py:11" *)
  wire [2:0] compare_op;
  (* src = "minerva/minerva/units/compare.py:14" *)
  wire compare_overflow;
  (* src = "minerva/minerva/units/compare.py:12" *)
  wire compare_zero;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_irq_mask_r__value;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_irq_mask_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_irq_mask_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_irq_pending_r__value;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_irq_pending_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_irq_pending_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [30:0] csrf_mcause_r__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mcause_r__interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [30:0] csrf_mcause_w__ecode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mcause_w__interrupt;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mcause_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_mepc_r__value;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_mepc_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mepc_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_r__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] csrf_mie_r__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__meie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__msie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__mtie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__seie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__ssie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__stie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__ueie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__usie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__utie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mie_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] csrf_mie_w__wpri3;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mie_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_r__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] csrf_mip_r__wiri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__meip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__msip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__mtip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__seip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__ssip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__stip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__ueip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__usip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__utip;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__wiri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mip_w__wiri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [19:0] csrf_mip_w__wiri3;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mip_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [25:0] csrf_misa_r__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_misa_r__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] csrf_misa_r__wiri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [25:0] csrf_misa_w__extensions;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_misa_w__mxl;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] csrf_misa_w__wiri0;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_misa_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_mscratch_r__value;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_mscratch_w__value;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mscratch_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_r__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_r__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_r__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_r__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [7:0] csrf_mstatus_r__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_r__xs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_w__fs;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__mie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__mpie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_w__mpp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__mprv;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__mxr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__sd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__sie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__spie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__spp;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__sum;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__tsr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__tvm;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__tw;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__uie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__upie;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__wpri0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_mstatus_w__wpri1;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_w__wpri2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [7:0] csrf_mstatus_w__wpri3;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mstatus_w__xs;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mstatus_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] csrf_mtvec_r__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mtvec_r__mode;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] csrf_mtvec_w__base;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] csrf_mtvec_w__mode;
  (* src = "minerva/minerva/csr.py:30" *)
  wire csrf_mtvec_we;
  (* init = 13'h0000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [12:0] csrf_port__addr = 13'h0000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [12:0] \csrf_port__addr$32 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] csrf_port__data;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \csrf_port__data$33 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire csrf_port__en;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \csrf_port__en$31 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire d_kill;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \d_kill$13 ;
  (* src = "minerva/minerva/core.py:425" *)
  wire d_m_lock;
  (* src = "minerva/minerva/core.py:514" *)
  wire [31:0] d_src1;
  (* src = "minerva/minerva/core.py:515" *)
  wire [31:0] d_src2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire d_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \d_stall$12 ;
  (* src = "minerva/minerva/stage.py:59" *)
  wire \d_stall$15 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire d_valid;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \d_valid$11 ;
  (* src = "minerva/minerva/stage.py:60" *)
  wire \d_valid$14 ;
  (* src = "minerva/minerva/core.py:424" *)
  wire d_x_lock;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input dbus__ack;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [29:0] dbus__adr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] dbus__bte;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] \dbus__bte$182 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [2:0] dbus__cti;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [2:0] \dbus__cti$181 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output dbus__cyc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] dbus__dat_r;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] dbus__dat_w;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input dbus__err;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [3:0] dbus__sel;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output dbus__stb;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output dbus__we;
  (* src = "minerva/minerva/units/decoder.py:41" *)
  wire decoder_adder_sub;
  (* src = "minerva/minerva/units/decoder.py:49" *)
  wire decoder_auipc;
  (* src = "minerva/minerva/units/decoder.py:51" *)
  wire decoder_branch;
  (* src = "minerva/minerva/units/decoder.py:36" *)
  wire decoder_bypass_m;
  (* src = "minerva/minerva/units/decoder.py:35" *)
  wire decoder_bypass_x;
  (* src = "minerva/minerva/units/decoder.py:52" *)
  wire decoder_compare;
  (* src = "minerva/minerva/units/decoder.py:53" *)
  wire decoder_csr;
  (* src = "minerva/minerva/units/decoder.py:54" *)
  wire decoder_csr_we;
  (* src = "minerva/minerva/units/decoder.py:46" *)
  wire decoder_direction;
  (* src = "minerva/minerva/units/decoder.py:57" *)
  wire decoder_ebreak;
  (* src = "minerva/minerva/units/decoder.py:56" *)
  wire decoder_ecall;
  (* src = "minerva/minerva/units/decoder.py:39" *)
  wire decoder_fence_i;
  (* src = "minerva/minerva/units/decoder.py:59" *)
  wire [2:0] decoder_funct3;
  (* src = "minerva/minerva/units/decoder.py:60" *)
  wire decoder_illegal;
  (* src = "minerva/minerva/units/decoder.py:34" *)
  wire [31:0] decoder_immediate;
  (* src = "minerva/minerva/units/decoder.py:26" *)
  wire [31:0] decoder_instruction;
  (* src = "minerva/minerva/units/decoder.py:50" *)
  wire decoder_jump;
  (* src = "minerva/minerva/units/decoder.py:37" *)
  wire decoder_load;
  (* src = "minerva/minerva/units/decoder.py:42" *)
  wire decoder_logic;
  (* src = "minerva/minerva/units/decoder.py:48" *)
  wire decoder_lui;
  (* src = "minerva/minerva/units/decoder.py:58" *)
  wire decoder_mret;
  (* src = "minerva/minerva/units/decoder.py:28" *)
  wire [4:0] decoder_rd;
  (* src = "minerva/minerva/units/decoder.py:29" *)
  wire decoder_rd_we;
  (* src = "minerva/minerva/units/decoder.py:30" *)
  wire [4:0] decoder_rs1;
  (* src = "minerva/minerva/units/decoder.py:31" *)
  wire decoder_rs1_re;
  (* src = "minerva/minerva/units/decoder.py:32" *)
  wire [4:0] decoder_rs2;
  (* src = "minerva/minerva/units/decoder.py:33" *)
  wire decoder_rs2_re;
  (* src = "minerva/minerva/units/decoder.py:47" *)
  wire decoder_sext;
  (* src = "minerva/minerva/units/decoder.py:45" *)
  wire decoder_shift;
  (* src = "minerva/minerva/units/decoder.py:38" *)
  wire decoder_store;
  (* src = "minerva/minerva/units/exception.py:24" *)
  wire [31:0] exception_external_interrupt;
  (* src = "minerva/minerva/units/exception.py:25" *)
  wire exception_timer_interrupt;
  (* src = "minerva/minerva/units/exception.py:30" *)
  wire exception_x_bus_error;
  (* src = "minerva/minerva/units/exception.py:27" *)
  wire exception_x_ebreak;
  (* src = "minerva/minerva/units/exception.py:28" *)
  wire exception_x_ecall;
  (* src = "minerva/minerva/units/exception.py:31" *)
  wire exception_x_illegal;
  (* src = "minerva/minerva/units/exception.py:29" *)
  wire exception_x_misaligned_fetch;
  (* src = "minerva/minerva/units/exception.py:32" *)
  wire exception_x_mret;
  (* src = "minerva/minerva/units/exception.py:26" *)
  wire [29:0] exception_x_pc;
  (* src = "minerva/minerva/units/exception.py:33" *)
  wire exception_x_stall;
  (* src = "minerva/minerva/units/exception.py:34" *)
  wire exception_x_valid;
  (* src = "minerva/minerva/core.py:136" *)
  input [31:0] external_interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire f_kill;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \f_kill$8 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire f_payload__branch_predict_taken;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire f_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \f_stall$7 ;
  (* src = "minerva/minerva/stage.py:59" *)
  wire \f_stall$9 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire f_valid;
  (* src = "minerva/minerva/stage.py:60" *)
  wire \f_valid$10 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \f_valid$6 ;
  (* src = "minerva/minerva/units/exception.py:36" *)
  wire f_x_raise;
  (* src = "minerva/minerva/units/fetch.py:27" *)
  wire fetch_a_misaligned_fetch;
  (* src = "minerva/minerva/units/fetch.py:26" *)
  wire [29:0] fetch_a_pc;
  (* src = "minerva/minerva/units/fetch.py:14" *)
  wire fetch_a_stall;
  (* src = "minerva/minerva/units/fetch.py:17" *)
  wire fetch_d_branch_predict_taken;
  (* src = "minerva/minerva/units/fetch.py:18" *)
  wire [31:0] fetch_d_branch_target;
  (* src = "minerva/minerva/units/fetch.py:19" *)
  wire fetch_d_valid;
  (* src = "minerva/minerva/units/fetch.py:29" *)
  wire fetch_f_bus_error;
  (* src = "minerva/minerva/units/fetch.py:28" *)
  wire [31:0] fetch_f_instruction;
  (* src = "minerva/minerva/units/fetch.py:15" *)
  wire [29:0] fetch_f_pc;
  (* src = "minerva/minerva/units/fetch.py:16" *)
  wire fetch_f_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire fetch_ibus__ack;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] fetch_ibus__adr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire fetch_ibus__cyc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] fetch_ibus__dat_r;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire fetch_ibus__err;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire fetch_ibus__stb;
  (* src = "minerva/minerva/units/fetch.py:23" *)
  wire fetch_m_branch_predict_taken;
  (* src = "minerva/minerva/units/fetch.py:22" *)
  wire [31:0] fetch_m_branch_target;
  (* src = "minerva/minerva/units/fetch.py:24" *)
  wire fetch_m_valid;
  (* src = "minerva/minerva/units/fetch.py:20" *)
  wire [29:0] fetch_x_pc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:81" *)
  wire [4:0] gprf_r_addr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:81" *)
  wire [4:0] \gprf_r_addr$27 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:83" *)
  wire [31:0] gprf_r_data;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:83" *)
  wire [31:0] \gprf_r_data$28 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:146" *)
  wire [4:0] gprf_w_addr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:148" *)
  wire [31:0] gprf_w_data;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:150" *)
  wire gprf_w_en;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input ibus__ack;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [29:0] ibus__adr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [1:0] ibus__bte;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [1:0] \ibus__bte$132 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [2:0] ibus__cti;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [2:0] \ibus__cti$131 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output ibus__cyc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input [31:0] ibus__dat_r;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [31:0] ibus__dat_w;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \ibus__dat_w$128 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input ibus__err;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output [3:0] ibus__sel;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] \ibus__sel$129 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output ibus__stb;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output ibus__we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \ibus__we$130 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire loadstore_dbus__ack;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] loadstore_dbus__adr;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire loadstore_dbus__cyc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] loadstore_dbus__dat_r;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] loadstore_dbus__dat_w;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire loadstore_dbus__err;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] loadstore_dbus__sel;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire loadstore_dbus__stb;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire loadstore_dbus__we;
  (* src = "minerva/minerva/units/loadstore.py:33" *)
  wire [31:0] loadstore_m_load_data;
  (* src = "minerva/minerva/units/loadstore.py:26" *)
  wire [31:0] loadstore_w_address;
  (* src = "minerva/minerva/units/loadstore.py:28" *)
  wire [31:0] loadstore_w_load_data;
  (* src = "minerva/minerva/units/loadstore.py:27" *)
  wire [2:0] loadstore_w_load_mask;
  (* src = "minerva/minerva/units/loadstore.py:34" *)
  wire [31:0] loadstore_w_load_result;
  (* src = "minerva/minerva/units/loadstore.py:19" *)
  wire [31:0] loadstore_x_address;
  (* src = "minerva/minerva/units/loadstore.py:30" *)
  wire [3:0] loadstore_x_dbus_sel;
  (* src = "minerva/minerva/units/loadstore.py:20" *)
  wire loadstore_x_load;
  (* src = "minerva/minerva/units/loadstore.py:23" *)
  wire [2:0] loadstore_x_mask;
  (* src = "minerva/minerva/units/loadstore.py:24" *)
  wire loadstore_x_stall;
  (* src = "minerva/minerva/units/loadstore.py:21" *)
  wire loadstore_x_store;
  (* src = "minerva/minerva/units/loadstore.py:31" *)
  wire [31:0] loadstore_x_store_data;
  (* src = "minerva/minerva/units/loadstore.py:22" *)
  wire [31:0] loadstore_x_store_operand;
  (* src = "minerva/minerva/units/loadstore.py:25" *)
  wire loadstore_x_valid;
  (* src = "minerva/minerva/units/logic.py:11" *)
  wire [2:0] logic_op;
  (* src = "minerva/minerva/units/logic.py:15" *)
  wire [31:0] logic_result;
  (* src = "minerva/minerva/units/logic.py:12" *)
  wire [31:0] logic_src1;
  (* src = "minerva/minerva/units/logic.py:13" *)
  wire [31:0] logic_src2;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire m_kill;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \m_kill$22 ;
  (* src = "minerva/minerva/core.py:418" *)
  wire m_raw_rs1;
  (* src = "minerva/minerva/core.py:421" *)
  wire m_raw_rs2;
  (* src = "minerva/minerva/core.py:450" *)
  wire [31:0] m_result;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire m_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \m_stall$21 ;
  (* src = "minerva/minerva/stage.py:59" *)
  wire \m_stall$23 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire m_valid;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \m_valid$20 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__adder_sub;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__adder_sub$58  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__branch;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__branch$67  = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg payload__branch_predict_taken = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__branch_predict_taken$107  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__branch_taken;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__branch_taken$106  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__branch_target;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \payload__branch_target$104 ;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__branch_target$105  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__branch_target$68  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__bus_error;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__bus_error$41  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__bus_error$73 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__bus_error$74  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__bypass_m;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__bypass_m$54  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__bypass_m$85 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__bypass_m$86  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__bypass_x;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__bypass_x$53  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__compare;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__compare$66  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__compare$97 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__compare$98  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__condition_met;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__condition_met$103  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__csr;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__csr$70  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [11:0] payload__csr_adr;
  (* init = 12'h000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [11:0] \payload__csr_adr$71  = 12'h000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__csr_we;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__csr_we$72  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [3:0] payload__dbus_sel;
  (* init = 4'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [3:0] \payload__dbus_sel$95  = 4'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__direction;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__direction$63  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__divide;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__divide$101 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__divide$102 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__divide$61 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__ebreak;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__ebreak$76  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__ecall;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__ecall$75  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__exception;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__exception$110  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__exception$126 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__exception$127  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__fence_i;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__fence_i$69  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [2:0] payload__funct3;
  (* init = 3'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \payload__funct3$55  = 3'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__illegal;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__illegal$78  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__immediate;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__immediate$52  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__instruction;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__instruction$40  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__jump;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__jump$65  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__load;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__load$119 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__load$120  = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__load$56  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__load$90 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__load$91  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__load_data;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__load_data$123  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [2:0] payload__load_mask;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [2:0] \payload__load_mask$121 ;
  (* init = 3'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \payload__load_mask$122  = 3'h0;
  (* init = 3'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [2:0] \payload__load_mask$92  = 3'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__logic;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__logic$59  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__misaligned_fetch;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__misaligned_fetch$35  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__misaligned_fetch$38 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__misaligned_fetch$39  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__misaligned_fetch$44 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__misaligned_fetch$45  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__mret;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__mret$108 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__mret$109  = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__mret$77  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__multiply;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__multiply$100 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__multiply$124 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__multiply$125  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__multiply$60 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__multiply$99 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [30:0] payload__pc;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] \payload__pc$111 ;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \payload__pc$112  = 30'h00000000;
  (* init = 31'h7fffffff *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [30:0] \payload__pc$34  = 31'h7fffffff;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] \payload__pc$36 ;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \payload__pc$37  = 30'h00000000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] \payload__pc$42 ;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \payload__pc$43  = 30'h00000000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [29:0] \payload__pc$79 ;
  (* init = 30'h00000000 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [29:0] \payload__pc$80  = 30'h00000000;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [4:0] payload__rd;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [4:0] \payload__rd$113 ;
  (* init = 5'h00 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \payload__rd$114  = 5'h00;
  (* init = 5'h00 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \payload__rd$46  = 5'h00;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [4:0] \payload__rd$81 ;
  (* init = 5'h00 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \payload__rd$82  = 5'h00;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__rd_we;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__rd_we$115 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__rd_we$116  = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__rd_we$48  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__rd_we$83 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__rd_we$84  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__result;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] \payload__result$117 ;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__result$118  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__result$87  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [4:0] payload__rs1;
  (* init = 5'h00 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [4:0] \payload__rs1$47  = 5'h00;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__rs1_re;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__rs1_re$49  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__sext;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__sext$64  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__shift;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__shift$62  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__shift$88 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__shift$89  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__src1;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__src1$50  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__src2;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__src2$51  = 32'd0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire payload__store;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__store$57  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \payload__store$93 ;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \payload__store$94  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire [31:0] payload__store_data;
  (* init = 32'd0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg [31:0] \payload__store_data$96  = 32'd0;
  (* src = "minerva/minerva/units/predict.py:9" *)
  wire predict_d_branch;
  (* src = "minerva/minerva/units/predict.py:15" *)
  wire predict_d_branch_taken;
  (* src = "minerva/minerva/units/predict.py:16" *)
  wire [31:0] predict_d_branch_target;
  (* src = "minerva/minerva/units/predict.py:10" *)
  wire predict_d_jump;
  (* src = "minerva/minerva/units/predict.py:11" *)
  wire [31:0] predict_d_offset;
  (* src = "minerva/minerva/units/predict.py:12" *)
  wire [29:0] predict_d_pc;
  (* src = "minerva/minerva/units/predict.py:13" *)
  wire predict_d_rs1_re;
  (* src = "minerva/minerva/core.py:143" *)
  input rst;
  (* src = "minerva/minerva/core.py:191" *)
  wire \rst$2 ;
  (* src = "minerva/minerva/units/shifter.py:15" *)
  wire [31:0] shifter_m_result;
  (* src = "minerva/minerva/units/shifter.py:9" *)
  wire shifter_x_direction;
  (* src = "minerva/minerva/units/shifter.py:10" *)
  wire shifter_x_sext;
  (* src = "minerva/minerva/units/shifter.py:11" *)
  wire [4:0] shifter_x_shamt;
  (* src = "minerva/minerva/units/shifter.py:12" *)
  wire [31:0] shifter_x_src1;
  (* src = "minerva/minerva/units/shifter.py:13" *)
  wire shifter_x_stall;
  (* src = "minerva/minerva/core.py:137" *)
  wire timer_interrupt;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire w_kill;
  (* src = "minerva/minerva/core.py:419" *)
  wire w_raw_rs1;
  (* src = "minerva/minerva/core.py:422" *)
  wire w_raw_rs2;
  (* src = "minerva/minerva/core.py:451" *)
  wire [31:0] w_result;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire w_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire w_valid;
  (* src = "minerva/minerva/stage.py:60" *)
  wire \w_valid$24 ;
  (* init = 1'h0 *)
  (* src = "minerva/minerva/core.py:517" *)
  reg w_valid_r = 1'h0;
  (* src = "minerva/minerva/core.py:452" *)
  wire [31:0] x_csr_result;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire x_kill;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \x_kill$18 ;
  (* src = "minerva/minerva/core.py:423" *)
  wire x_raw_csr;
  (* src = "minerva/minerva/core.py:417" *)
  wire x_raw_rs1;
  (* src = "minerva/minerva/core.py:420" *)
  wire x_raw_rs2;
  (* src = "minerva/minerva/core.py:449" *)
  wire [31:0] x_result;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire x_stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \x_stall$17 ;
  (* src = "minerva/minerva/stage.py:59" *)
  wire \x_stall$19 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire x_valid;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  wire \x_valid$16 ;
  assign \$133  = payload__branch_taken | (* src = "minerva/minerva/core.py:252" *) payload__exception;
  assign \$135  = \$133  | (* src = "minerva/minerva/core.py:252" *) \payload__mret$108 ;
  assign \$138  = csrf_mtvec_r__base <<< (* src = "minerva/minerva/core.py:257" *) 2'h2;
  assign \$140  = ~ (* src = "minerva/minerva/core.py:291" *) \f_stall$9 ;
  assign \$142  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ast.py:123" *) fetch_f_instruction[31:20];
  assign \$144  = decoder_csr & (* src = "minerva/minerva/core.py:293" *) \d_valid$14 ;
  assign \$146  = payload__funct3 | (* src = "minerva/minerva/core.py:301" *) 3'h4;
  assign \$148  = payload__csr ? (* src = "build.py:43" *) \$146  : payload__funct3;
  assign \$151  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *) payload__rs1;
  assign \$153  = payload__funct3[2] ? (* src = "build.py:43" *) \$151  : payload__src1;
  assign \$150  = ~ (* src = "minerva/minerva/core.py:300" *) \$153 ;
  assign \$156  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *) payload__rs1;
  assign \$158  = payload__funct3[2] ? (* src = "build.py:43" *) \$156  : payload__src1;
  assign \$161  = payload__funct3[1] & (* src = "minerva/minerva/core.py:297" *) payload__funct3[0];
  assign \$160  = \$161  ? (* src = "build.py:43" *) \$150  : \$158 ;
  assign \$164  = payload__csr ? (* src = "build.py:43" *) \$160  : payload__src1;
  assign \$166  = payload__store ? (* src = "build.py:43" *) payload__immediate : payload__src2;
  assign \$169  = payload__funct3 <<< (* src = "minerva/minerva/core.py:343" *) 1'h1;
  assign \$171  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *) payload__funct3;
  assign \$173  = payload__compare ? (* src = "build.py:43" *) \$169  : \$171 ;
  assign \$175  = payload__src1 == (* src = "minerva/minerva/core.py:344" *) payload__src2;
  assign \$177  = ~ (* src = "minerva/minerva/core.py:380" *) f_x_raise;
  assign \$179  = \f_valid$10  & (* src = "minerva/minerva/core.py:380" *) \$177 ;
  assign \$183  = payload__rd == (* src = "minerva/minerva/core.py:428" *) decoder_rs1;
  assign \$185  = \$183  & (* src = "minerva/minerva/core.py:428" *) payload__rd_we;
  assign \$187  = \payload__rd$81  == (* src = "minerva/minerva/core.py:429" *) decoder_rs1;
  assign \$189  = \$187  & (* src = "minerva/minerva/core.py:429" *) \payload__rd_we$83 ;
  assign \$191  = \payload__rd$113  == (* src = "minerva/minerva/core.py:430" *) decoder_rs1;
  assign \$193  = \$191  & (* src = "minerva/minerva/core.py:430" *) \payload__rd_we$115 ;
  assign \$195  = payload__rd == (* src = "minerva/minerva/core.py:432" *) decoder_rs2;
  assign \$197  = \$195  & (* src = "minerva/minerva/core.py:432" *) payload__rd_we;
  assign \$199  = \payload__rd$81  == (* src = "minerva/minerva/core.py:433" *) decoder_rs2;
  assign \$201  = \$199  & (* src = "minerva/minerva/core.py:433" *) \payload__rd_we$83 ;
  assign \$203  = \payload__rd$113  == (* src = "minerva/minerva/core.py:434" *) decoder_rs2;
  assign \$205  = \$203  & (* src = "minerva/minerva/core.py:434" *) \payload__rd_we$115 ;
  assign \$207  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *) payload__csr_adr;
  assign \$209  = $signed(\$207 ) == (* src = "minerva/minerva/core.py:436" *) $signed(decoder_immediate);
  assign \$211  = \$209  & (* src = "minerva/minerva/core.py:436" *) payload__csr_we;
  assign \$213  = ~ (* src = "minerva/minerva/core.py:438" *) payload__bypass_x;
  assign \$215  = decoder_rs1_re & (* src = "minerva/minerva/core.py:438" *) x_raw_rs1;
  assign \$217  = decoder_rs2_re & (* src = "minerva/minerva/core.py:438" *) x_raw_rs2;
  assign \$219  = \$215  | (* src = "minerva/minerva/core.py:438" *) \$217 ;
  assign \$221  = \$213  & (* src = "minerva/minerva/core.py:438" *) \$219 ;
  assign \$223  = ~ (* src = "minerva/minerva/core.py:439" *) \payload__bypass_m$85 ;
  assign \$225  = decoder_rs1_re & (* src = "minerva/minerva/core.py:439" *) m_raw_rs1;
  assign \$227  = decoder_rs2_re & (* src = "minerva/minerva/core.py:439" *) m_raw_rs2;
  assign \$229  = \$225  | (* src = "minerva/minerva/core.py:439" *) \$227 ;
  assign \$231  = \$223  & (* src = "minerva/minerva/core.py:439" *) \$229 ;
  assign \$234  = \payload__pc$42  + (* src = "minerva/minerva/core.py:455" *) 1'h1;
  assign \$236  = \$234  <<< (* src = "minerva/minerva/core.py:455" *) 2'h2;
  assign \$238  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *) payload__condition_met;
  assign \$240  = payload__csr & (* src = "minerva/minerva/core.py:487" *) payload__csr_we;
  assign \$242  = \$240  & (* src = "minerva/minerva/core.py:487" *) \f_valid$10 ;
  assign \$244  = ~ (* src = "minerva/minerva/core.py:487" *) f_x_raise;
  assign \$246  = \$242  & (* src = "minerva/minerva/core.py:487" *) \$244 ;
  assign \$248  = ~ (* src = "minerva/minerva/core.py:487" *) \x_stall$19 ;
  assign \$250  = \$246  & (* src = "minerva/minerva/core.py:487" *) \$248 ;
  assign \$252  = + (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *) payload__csr_adr;
  assign \$254  = \payload__rd$113  != (* src = "minerva/minerva/core.py:507" *) 1'h0;
  assign \$256  = \$254  & (* src = "minerva/minerva/core.py:507" *) \payload__rd_we$115 ;
  assign \$258  = \$256  & (* src = "minerva/minerva/core.py:507" *) \w_valid$24 ;
  assign \$260  = ~ (* src = "minerva/minerva/core.py:518" *) \m_stall$23 ;
  assign \$262  = decoder_rs1 == (* src = "minerva/minerva/core.py:525" *) 1'h0;
  assign \$264  = decoder_rs1_re & (* src = "minerva/minerva/core.py:525" *) \$262 ;
  assign \$266  = x_raw_rs1 & (* src = "minerva/minerva/core.py:527" *) \f_valid$10 ;
  assign \$268  = m_raw_rs1 & (* src = "minerva/minerva/core.py:529" *) \a_valid$5 ;
  assign \$270  = w_raw_rs1 & (* src = "minerva/minerva/core.py:531" *) w_valid_r;
  assign \$273  = \payload__pc$36  <<< (* src = "minerva/minerva/core.py:524" *) 2'h2;
  assign \$275  = ~ (* src = "minerva/minerva/core.py:541" *) decoder_rs2_re;
  assign \$277  = decoder_rs2 == (* src = "minerva/minerva/core.py:543" *) 1'h0;
  assign \$279  = x_raw_rs2 & (* src = "minerva/minerva/core.py:545" *) \f_valid$10 ;
  assign \$281  = m_raw_rs2 & (* src = "minerva/minerva/core.py:547" *) \a_valid$5 ;
  assign \$283  = w_raw_rs2 & (* src = "minerva/minerva/core.py:549" *) w_valid_r;
  assign \$285  = x_raw_csr & (* src = "minerva/minerva/core.py:537" *) \f_valid$10 ;
  assign \$287  = ~ (* src = "minerva/minerva/core.py:631" *) \a_stall$4 ;
  assign \$289  = + (* src = "minerva/minerva/units/fetch.py:26" *) fetch_a_pc;
  assign \$291  = ~ (* src = "minerva/minerva/core.py:631" *) \a_stall$4 ;
  assign \$293  = ~ (* src = "minerva/minerva/core.py:638" *) \f_stall$9 ;
  assign \$295  = ~ (* src = "minerva/minerva/core.py:638" *) \f_stall$9 ;
  assign \$297  = ~ (* src = "minerva/minerva/core.py:638" *) \f_stall$9 ;
  assign \$299  = ~ (* src = "minerva/minerva/core.py:638" *) \f_stall$9 ;
  assign \$301  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$303  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$305  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$307  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$309  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$311  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$313  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$315  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$317  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$319  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$321  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$323  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$325  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$327  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$329  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$331  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$333  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$335  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$337  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$339  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$341  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$343  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$345  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$347  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$349  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$351  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$353  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$355  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$357  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$359  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$361  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$363  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$365  = ~ (* src = "minerva/minerva/core.py:647" *) \d_stall$15 ;
  assign \$367  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$369  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$371  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$373  = ~ (* src = "minerva/minerva/core.py:694" *) f_x_raise;
  assign \$375  = payload__rd_we & (* src = "minerva/minerva/core.py:694" *) \$373 ;
  assign \$377  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$379  = payload__bypass_m | (* src = "minerva/minerva/core.py:695" *) payload__bypass_x;
  assign \$381  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$383  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$385  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$387  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$389  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$391  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$393  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$395  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$397  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$399  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$401  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$403  = payload__branch & (* src = "minerva/minerva/core.py:706" *) compare_condition_met;
  assign \$405  = payload__jump | (* src = "minerva/minerva/core.py:706" *) \$403 ;
  assign \$407  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$409  = adder_result[31:1] <<< (* src = "minerva/minerva/core.py:707" *) 1'h1;
  assign \$412  = payload__jump & (* src = "minerva/minerva/core.py:707" *) payload__rs1_re;
  assign \$411  = \$412  ? (* src = "build.py:43" *) \$409  : payload__branch_target;
  assign \$415  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$417  = ~ (* src = "minerva/minerva/core.py:708" *) f_x_raise;
  assign \$419  = f_payload__branch_predict_taken & (* src = "minerva/minerva/core.py:708" *) \$417 ;
  assign \$421  = ~ (* src = "minerva/minerva/core.py:690" *) \x_stall$19 ;
  assign \$423  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$425  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$427  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$429  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$431  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$433  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$435  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$437  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  assign \$439  = ~ (* src = "minerva/minerva/core.py:718" *) \m_stall$23 ;
  always @(posedge \clk$1 )
      \payload__exception$127  <= \$next\payload__exception$127 ;
  always @(posedge \clk$1 )
      \payload__result$87  <= \$next\payload__result$87 ;
  always @(posedge \clk$1 )
      \payload__branch_predict_taken$107  <= \$next\payload__branch_predict_taken$107 ;
  always @(posedge \clk$1 )
      \payload__branch_target$105  <= \$next\payload__branch_target$105 ;
  always @(posedge \clk$1 )
      \payload__branch_taken$106  <= \$next\payload__branch_taken$106 ;
  always @(posedge \clk$1 )
      \payload__condition_met$103  <= \$next\payload__condition_met$103 ;
  always @(posedge \clk$1 )
      \payload__mret$109  <= \$next\payload__mret$109 ;
  always @(posedge \clk$1 )
      \payload__exception$110  <= \$next\payload__exception$110 ;
  always @(posedge \clk$1 )
      \payload__shift$89  <= \$next\payload__shift$89 ;
  always @(posedge \clk$1 )
      \payload__compare$98  <= \$next\payload__compare$98 ;
  always @(posedge \clk$1 )
      \payload__store_data$96  <= \$next\payload__store_data$96 ;
  always @(posedge \clk$1 )
      \payload__multiply$125  <= \$next\payload__multiply$125 ;
  always @(posedge \clk$1 )
      \payload__dbus_sel$95  <= \$next\payload__dbus_sel$95 ;
  always @(posedge \clk$1 )
      \payload__store$94  <= \$next\payload__store$94 ;
  always @(posedge \clk$1 )
      \payload__load_mask$92  <= \$next\payload__load_mask$92 ;
  always @(posedge \clk$1 )
      \payload__load$91  <= \$next\payload__load$91 ;
  always @(posedge \clk$1 )
      \payload__bypass_m$86  <= \$next\payload__bypass_m$86 ;
  always @(posedge \clk$1 )
      \payload__rd_we$84  <= \$next\payload__rd_we$84 ;
  always @(posedge \clk$1 )
      \payload__rd$82  <= \$next\payload__rd$82 ;
  always @(posedge \clk$1 )
      \payload__pc$80  <= \$next\payload__pc$80 ;
  always @(posedge \clk$1 )
      \payload__branch_target$68  <= \$next\payload__branch_target$68 ;
  always @(posedge \clk$1 )
      payload__branch_predict_taken <= \$next\payload__branch_predict_taken ;
  always @(posedge \clk$1 )
      \payload__result$118  <= \$next\payload__result$118 ;
  always @(posedge \clk$1 )
      \payload__src2$51  <= \$next\payload__src2$51 ;
  always @(posedge \clk$1 )
      \payload__src1$50  <= \$next\payload__src1$50 ;
  always @(posedge \clk$1 )
      \payload__illegal$78  <= \$next\payload__illegal$78 ;
  always @(posedge \clk$1 )
      \payload__mret$77  <= \$next\payload__mret$77 ;
  always @(posedge \clk$1 )
      \payload__ebreak$76  <= \$next\payload__ebreak$76 ;
  always @(posedge \clk$1 )
      \payload__ecall$75  <= \$next\payload__ecall$75 ;
  always @(posedge \clk$1 )
      \payload__csr_we$72  <= \$next\payload__csr_we$72 ;
  always @(posedge \clk$1 )
      \payload__csr_adr$71  <= \$next\payload__csr_adr$71 ;
  always @(posedge \clk$1 )
      \payload__csr$70  <= \$next\payload__csr$70 ;
  always @(posedge \clk$1 )
      \payload__fence_i$69  <= \$next\payload__fence_i$69 ;
  always @(posedge \clk$1 )
      \payload__rd_we$116  <= \$next\payload__rd_we$116 ;
  always @(posedge \clk$1 )
      \payload__branch$67  <= \$next\payload__branch$67 ;
  always @(posedge \clk$1 )
      \payload__jump$65  <= \$next\payload__jump$65 ;
  always @(posedge \clk$1 )
      \payload__sext$64  <= \$next\payload__sext$64 ;
  always @(posedge \clk$1 )
      \payload__direction$63  <= \$next\payload__direction$63 ;
  always @(posedge \clk$1 )
      \payload__shift$62  <= \$next\payload__shift$62 ;
  always @(posedge \clk$1 )
      \payload__logic$59  <= \$next\payload__logic$59 ;
  always @(posedge \clk$1 )
      \payload__compare$66  <= \$next\payload__compare$66 ;
  always @(posedge \clk$1 )
      \payload__adder_sub$58  <= \$next\payload__adder_sub$58 ;
  always @(posedge \clk$1 )
      \payload__store$57  <= \$next\payload__store$57 ;
  always @(posedge \clk$1 )
      \payload__load$56  <= \$next\payload__load$56 ;
  always @(posedge \clk$1 )
      \payload__load_data$123  <= \$next\payload__load_data$123 ;
  always @(posedge \clk$1 )
      \payload__funct3$55  <= \$next\payload__funct3$55 ;
  always @(posedge \clk$1 )
      \payload__bypass_m$54  <= \$next\payload__bypass_m$54 ;
  always @(posedge \clk$1 )
      \payload__bypass_x$53  <= \$next\payload__bypass_x$53 ;
  always @(posedge \clk$1 )
      \payload__immediate$52  <= \$next\payload__immediate$52 ;
  always @(posedge \clk$1 )
      \payload__rs1_re$49  <= \$next\payload__rs1_re$49 ;
  always @(posedge \clk$1 )
      \payload__rd_we$48  <= \$next\payload__rd_we$48 ;
  always @(posedge \clk$1 )
      \payload__rs1$47  <= \$next\payload__rs1$47 ;
  always @(posedge \clk$1 )
      \payload__rd$46  <= \$next\payload__rd$46 ;
  always @(posedge \clk$1 )
      \payload__bus_error$74  <= \$next\payload__bus_error$74 ;
  always @(posedge \clk$1 )
      \payload__misaligned_fetch$45  <= \$next\payload__misaligned_fetch$45 ;
  always @(posedge \clk$1 )
      \payload__load_mask$122  <= \$next\payload__load_mask$122 ;
  always @(posedge \clk$1 )
      \payload__pc$43  <= \$next\payload__pc$43 ;
  always @(posedge \clk$1 )
      \payload__bus_error$41  <= \$next\payload__bus_error$41 ;
  always @(posedge \clk$1 )
      \payload__instruction$40  <= \$next\payload__instruction$40 ;
  always @(posedge \clk$1 )
      \payload__misaligned_fetch$39  <= \$next\payload__misaligned_fetch$39 ;
  always @(posedge \clk$1 )
      \payload__pc$37  <= \$next\payload__pc$37 ;
  always @(posedge \clk$1 )
      \payload__misaligned_fetch$35  <= \$next\payload__misaligned_fetch$35 ;
  always @(posedge \clk$1 )
      \payload__pc$34  <= \$next\payload__pc$34 ;
  always @(posedge \clk$1 )
      w_valid_r <= \$next\w_valid_r ;
  always @(posedge \clk$1 )
      csrf_port__addr <= \$next\csrf_port__addr ;
  always @(posedge \clk$1 )
      \payload__load$120  <= \$next\payload__load$120 ;
  always @(posedge \clk$1 )
      \payload__rd$114  <= \$next\payload__rd$114 ;
  always @(posedge \clk$1 )
      \payload__pc$112  <= \$next\payload__pc$112 ;
  a a (
    .clk(\clk$1 ),
    .kill(a_kill),
    .m_branch_taken(a_m_branch_taken),
    .payload__branch_predict_taken(a_payload__branch_predict_taken),
    .rst(\rst$2 ),
    .stall(a_stall),
    .\stall$2 (\a_stall$4 ),
    .valid(a_valid),
    .\valid$1 (\a_valid$3 ),
    .\valid$3 (\a_valid$5 )
  );
  adder adder (
    .carry(adder_carry),
    .overflow(adder_overflow),
    .result(adder_result),
    .src1(adder_src1),
    .src2(adder_src2),
    .sub(adder_sub)
  );
  compare compare (
    .carry(compare_carry),
    .condition_met(compare_condition_met),
    .negative(compare_negative),
    .op(compare_op),
    .overflow(compare_overflow),
    .zero(compare_zero)
  );
  csrf csrf (
    .irq_mask_r__value(csrf_irq_mask_r__value),
    .irq_mask_w__value(csrf_irq_mask_w__value),
    .irq_mask_we(csrf_irq_mask_we),
    .irq_pending_r__value(csrf_irq_pending_r__value),
    .irq_pending_w__value(csrf_irq_pending_w__value),
    .irq_pending_we(csrf_irq_pending_we),
    .mcause_r__ecode(csrf_mcause_r__ecode),
    .mcause_r__interrupt(csrf_mcause_r__interrupt),
    .mcause_w__ecode(csrf_mcause_w__ecode),
    .mcause_w__interrupt(csrf_mcause_w__interrupt),
    .mcause_we(csrf_mcause_we),
    .mepc_r__value(csrf_mepc_r__value),
    .mepc_w__value(csrf_mepc_w__value),
    .mepc_we(csrf_mepc_we),
    .mie_r__meie(csrf_mie_r__meie),
    .mie_r__msie(csrf_mie_r__msie),
    .mie_r__mtie(csrf_mie_r__mtie),
    .mie_r__seie(csrf_mie_r__seie),
    .mie_r__ssie(csrf_mie_r__ssie),
    .mie_r__stie(csrf_mie_r__stie),
    .mie_r__ueie(csrf_mie_r__ueie),
    .mie_r__usie(csrf_mie_r__usie),
    .mie_r__utie(csrf_mie_r__utie),
    .mie_r__wpri0(csrf_mie_r__wpri0),
    .mie_r__wpri1(csrf_mie_r__wpri1),
    .mie_r__wpri2(csrf_mie_r__wpri2),
    .mie_r__wpri3(csrf_mie_r__wpri3),
    .mie_w__meie(csrf_mie_w__meie),
    .mie_w__msie(csrf_mie_w__msie),
    .mie_w__mtie(csrf_mie_w__mtie),
    .mie_w__seie(csrf_mie_w__seie),
    .mie_w__ssie(csrf_mie_w__ssie),
    .mie_w__stie(csrf_mie_w__stie),
    .mie_w__ueie(csrf_mie_w__ueie),
    .mie_w__usie(csrf_mie_w__usie),
    .mie_w__utie(csrf_mie_w__utie),
    .mie_w__wpri0(csrf_mie_w__wpri0),
    .mie_w__wpri1(csrf_mie_w__wpri1),
    .mie_w__wpri2(csrf_mie_w__wpri2),
    .mie_w__wpri3(csrf_mie_w__wpri3),
    .mie_we(csrf_mie_we),
    .mip_r__meip(csrf_mip_r__meip),
    .mip_r__msip(csrf_mip_r__msip),
    .mip_r__mtip(csrf_mip_r__mtip),
    .mip_r__seip(csrf_mip_r__seip),
    .mip_r__ssip(csrf_mip_r__ssip),
    .mip_r__stip(csrf_mip_r__stip),
    .mip_r__ueip(csrf_mip_r__ueip),
    .mip_r__usip(csrf_mip_r__usip),
    .mip_r__utip(csrf_mip_r__utip),
    .mip_r__wiri0(csrf_mip_r__wiri0),
    .mip_r__wiri1(csrf_mip_r__wiri1),
    .mip_r__wiri2(csrf_mip_r__wiri2),
    .mip_r__wiri3(csrf_mip_r__wiri3),
    .mip_w__meip(csrf_mip_w__meip),
    .mip_w__msip(csrf_mip_w__msip),
    .mip_w__mtip(csrf_mip_w__mtip),
    .mip_w__seip(csrf_mip_w__seip),
    .mip_w__ssip(csrf_mip_w__ssip),
    .mip_w__stip(csrf_mip_w__stip),
    .mip_w__ueip(csrf_mip_w__ueip),
    .mip_w__usip(csrf_mip_w__usip),
    .mip_w__utip(csrf_mip_w__utip),
    .mip_w__wiri0(csrf_mip_w__wiri0),
    .mip_w__wiri1(csrf_mip_w__wiri1),
    .mip_w__wiri2(csrf_mip_w__wiri2),
    .mip_w__wiri3(csrf_mip_w__wiri3),
    .mip_we(csrf_mip_we),
    .misa_r__extensions(csrf_misa_r__extensions),
    .misa_r__mxl(csrf_misa_r__mxl),
    .misa_r__wiri0(csrf_misa_r__wiri0),
    .misa_w__extensions(csrf_misa_w__extensions),
    .misa_w__mxl(csrf_misa_w__mxl),
    .misa_w__wiri0(csrf_misa_w__wiri0),
    .misa_we(csrf_misa_we),
    .mscratch_r__value(csrf_mscratch_r__value),
    .mscratch_w__value(csrf_mscratch_w__value),
    .mscratch_we(csrf_mscratch_we),
    .mstatus_r__fs(csrf_mstatus_r__fs),
    .mstatus_r__mie(csrf_mstatus_r__mie),
    .mstatus_r__mpie(csrf_mstatus_r__mpie),
    .mstatus_r__mpp(csrf_mstatus_r__mpp),
    .mstatus_r__mprv(csrf_mstatus_r__mprv),
    .mstatus_r__mxr(csrf_mstatus_r__mxr),
    .mstatus_r__sd(csrf_mstatus_r__sd),
    .mstatus_r__sie(csrf_mstatus_r__sie),
    .mstatus_r__spie(csrf_mstatus_r__spie),
    .mstatus_r__spp(csrf_mstatus_r__spp),
    .mstatus_r__sum(csrf_mstatus_r__sum),
    .mstatus_r__tsr(csrf_mstatus_r__tsr),
    .mstatus_r__tvm(csrf_mstatus_r__tvm),
    .mstatus_r__tw(csrf_mstatus_r__tw),
    .mstatus_r__uie(csrf_mstatus_r__uie),
    .mstatus_r__upie(csrf_mstatus_r__upie),
    .mstatus_r__wpri0(csrf_mstatus_r__wpri0),
    .mstatus_r__wpri1(csrf_mstatus_r__wpri1),
    .mstatus_r__wpri2(csrf_mstatus_r__wpri2),
    .mstatus_r__wpri3(csrf_mstatus_r__wpri3),
    .mstatus_r__xs(csrf_mstatus_r__xs),
    .mstatus_w__fs(csrf_mstatus_w__fs),
    .mstatus_w__mie(csrf_mstatus_w__mie),
    .mstatus_w__mpie(csrf_mstatus_w__mpie),
    .mstatus_w__mpp(csrf_mstatus_w__mpp),
    .mstatus_w__mprv(csrf_mstatus_w__mprv),
    .mstatus_w__mxr(csrf_mstatus_w__mxr),
    .mstatus_w__sd(csrf_mstatus_w__sd),
    .mstatus_w__sie(csrf_mstatus_w__sie),
    .mstatus_w__spie(csrf_mstatus_w__spie),
    .mstatus_w__spp(csrf_mstatus_w__spp),
    .mstatus_w__sum(csrf_mstatus_w__sum),
    .mstatus_w__tsr(csrf_mstatus_w__tsr),
    .mstatus_w__tvm(csrf_mstatus_w__tvm),
    .mstatus_w__tw(csrf_mstatus_w__tw),
    .mstatus_w__uie(csrf_mstatus_w__uie),
    .mstatus_w__upie(csrf_mstatus_w__upie),
    .mstatus_w__wpri0(csrf_mstatus_w__wpri0),
    .mstatus_w__wpri1(csrf_mstatus_w__wpri1),
    .mstatus_w__wpri2(csrf_mstatus_w__wpri2),
    .mstatus_w__wpri3(csrf_mstatus_w__wpri3),
    .mstatus_w__xs(csrf_mstatus_w__xs),
    .mstatus_we(csrf_mstatus_we),
    .mtvec_r__base(csrf_mtvec_r__base),
    .mtvec_r__mode(csrf_mtvec_r__mode),
    .mtvec_w__base(csrf_mtvec_w__base),
    .mtvec_w__mode(csrf_mtvec_w__mode),
    .mtvec_we(csrf_mtvec_we),
    .port__addr(csrf_port__addr),
    .\port__addr$2 (\csrf_port__addr$32 ),
    .port__data(csrf_port__data),
    .\port__data$3 (\csrf_port__data$33 ),
    .port__en(csrf_port__en),
    .\port__en$1 (\csrf_port__en$31 )
  );
  d d (
    .clk(\clk$1 ),
    .kill(d_kill),
    .\kill$3 (\d_kill$13 ),
    .m_branch_taken(a_m_branch_taken),
    .m_lock(d_m_lock),
    .payload__branch_predict_taken(a_payload__branch_predict_taken),
    .rst(\rst$2 ),
    .stall(d_stall),
    .\stall$2 (\d_stall$12 ),
    .\stall$7 (\d_stall$15 ),
    .valid(d_valid),
    .\valid$1 (\d_valid$11 ),
    .\valid$4 (\d_valid$14 ),
    .\valid$5 (\a_valid$5 ),
    .\valid$6 (\f_valid$10 ),
    .x_lock(d_x_lock)
  );
  decoder decoder (
    .adder_sub(decoder_adder_sub),
    .auipc(decoder_auipc),
    .branch(decoder_branch),
    .bypass_m(decoder_bypass_m),
    .bypass_x(decoder_bypass_x),
    .compare(decoder_compare),
    .csr(decoder_csr),
    .csr_we(decoder_csr_we),
    .direction(decoder_direction),
    .ebreak(decoder_ebreak),
    .ecall(decoder_ecall),
    .fence_i(decoder_fence_i),
    .funct3(decoder_funct3),
    .illegal(decoder_illegal),
    .immediate(decoder_immediate),
    .instruction(decoder_instruction),
    .jump(decoder_jump),
    .load(decoder_load),
    .\logic (decoder_logic),
    .lui(decoder_lui),
    .mret(decoder_mret),
    .rd(decoder_rd),
    .rd_we(decoder_rd_we),
    .rs1(decoder_rs1),
    .rs1_re(decoder_rs1_re),
    .rs2(decoder_rs2),
    .rs2_re(decoder_rs2_re),
    .sext(decoder_sext),
    .shift(decoder_shift),
    .store(decoder_store)
  );
  exception exception (
    .clk(\clk$1 ),
    .external_interrupt(exception_external_interrupt),
    .irq_mask_r__value(csrf_irq_mask_r__value),
    .irq_mask_w__value(csrf_irq_mask_w__value),
    .irq_mask_we(csrf_irq_mask_we),
    .irq_pending_r__value(csrf_irq_pending_r__value),
    .irq_pending_w__value(csrf_irq_pending_w__value),
    .irq_pending_we(csrf_irq_pending_we),
    .mcause_r__ecode(csrf_mcause_r__ecode),
    .mcause_r__interrupt(csrf_mcause_r__interrupt),
    .mcause_w__ecode(csrf_mcause_w__ecode),
    .mcause_w__interrupt(csrf_mcause_w__interrupt),
    .mcause_we(csrf_mcause_we),
    .mepc_r__value(csrf_mepc_r__value),
    .mepc_w__value(csrf_mepc_w__value),
    .mepc_we(csrf_mepc_we),
    .mie_r__meie(csrf_mie_r__meie),
    .mie_r__msie(csrf_mie_r__msie),
    .mie_r__mtie(csrf_mie_r__mtie),
    .mie_r__seie(csrf_mie_r__seie),
    .mie_r__ssie(csrf_mie_r__ssie),
    .mie_r__stie(csrf_mie_r__stie),
    .mie_r__ueie(csrf_mie_r__ueie),
    .mie_r__usie(csrf_mie_r__usie),
    .mie_r__utie(csrf_mie_r__utie),
    .mie_r__wpri0(csrf_mie_r__wpri0),
    .mie_r__wpri1(csrf_mie_r__wpri1),
    .mie_r__wpri2(csrf_mie_r__wpri2),
    .mie_r__wpri3(csrf_mie_r__wpri3),
    .mie_w__meie(csrf_mie_w__meie),
    .mie_w__msie(csrf_mie_w__msie),
    .mie_w__mtie(csrf_mie_w__mtie),
    .mie_w__seie(csrf_mie_w__seie),
    .mie_w__ssie(csrf_mie_w__ssie),
    .mie_w__stie(csrf_mie_w__stie),
    .mie_w__ueie(csrf_mie_w__ueie),
    .mie_w__usie(csrf_mie_w__usie),
    .mie_w__utie(csrf_mie_w__utie),
    .mie_w__wpri0(csrf_mie_w__wpri0),
    .mie_w__wpri1(csrf_mie_w__wpri1),
    .mie_w__wpri2(csrf_mie_w__wpri2),
    .mie_w__wpri3(csrf_mie_w__wpri3),
    .mie_we(csrf_mie_we),
    .mip_r__meip(csrf_mip_r__meip),
    .mip_r__msip(csrf_mip_r__msip),
    .mip_r__mtip(csrf_mip_r__mtip),
    .mip_r__seip(csrf_mip_r__seip),
    .mip_r__ssip(csrf_mip_r__ssip),
    .mip_r__stip(csrf_mip_r__stip),
    .mip_r__ueip(csrf_mip_r__ueip),
    .mip_r__usip(csrf_mip_r__usip),
    .mip_r__utip(csrf_mip_r__utip),
    .mip_r__wiri0(csrf_mip_r__wiri0),
    .mip_r__wiri1(csrf_mip_r__wiri1),
    .mip_r__wiri2(csrf_mip_r__wiri2),
    .mip_r__wiri3(csrf_mip_r__wiri3),
    .mip_w__meip(csrf_mip_w__meip),
    .mip_w__msip(csrf_mip_w__msip),
    .mip_w__mtip(csrf_mip_w__mtip),
    .mip_w__seip(csrf_mip_w__seip),
    .mip_w__ssip(csrf_mip_w__ssip),
    .mip_w__stip(csrf_mip_w__stip),
    .mip_w__ueip(csrf_mip_w__ueip),
    .mip_w__usip(csrf_mip_w__usip),
    .mip_w__utip(csrf_mip_w__utip),
    .mip_w__wiri0(csrf_mip_w__wiri0),
    .mip_w__wiri1(csrf_mip_w__wiri1),
    .mip_w__wiri2(csrf_mip_w__wiri2),
    .mip_w__wiri3(csrf_mip_w__wiri3),
    .mip_we(csrf_mip_we),
    .misa_r__extensions(csrf_misa_r__extensions),
    .misa_r__mxl(csrf_misa_r__mxl),
    .misa_r__wiri0(csrf_misa_r__wiri0),
    .misa_w__extensions(csrf_misa_w__extensions),
    .misa_w__mxl(csrf_misa_w__mxl),
    .misa_w__wiri0(csrf_misa_w__wiri0),
    .misa_we(csrf_misa_we),
    .mscratch_r__value(csrf_mscratch_r__value),
    .mscratch_w__value(csrf_mscratch_w__value),
    .mscratch_we(csrf_mscratch_we),
    .mstatus_r__fs(csrf_mstatus_r__fs),
    .mstatus_r__mie(csrf_mstatus_r__mie),
    .mstatus_r__mpie(csrf_mstatus_r__mpie),
    .mstatus_r__mpp(csrf_mstatus_r__mpp),
    .mstatus_r__mprv(csrf_mstatus_r__mprv),
    .mstatus_r__mxr(csrf_mstatus_r__mxr),
    .mstatus_r__sd(csrf_mstatus_r__sd),
    .mstatus_r__sie(csrf_mstatus_r__sie),
    .mstatus_r__spie(csrf_mstatus_r__spie),
    .mstatus_r__spp(csrf_mstatus_r__spp),
    .mstatus_r__sum(csrf_mstatus_r__sum),
    .mstatus_r__tsr(csrf_mstatus_r__tsr),
    .mstatus_r__tvm(csrf_mstatus_r__tvm),
    .mstatus_r__tw(csrf_mstatus_r__tw),
    .mstatus_r__uie(csrf_mstatus_r__uie),
    .mstatus_r__upie(csrf_mstatus_r__upie),
    .mstatus_r__wpri0(csrf_mstatus_r__wpri0),
    .mstatus_r__wpri1(csrf_mstatus_r__wpri1),
    .mstatus_r__wpri2(csrf_mstatus_r__wpri2),
    .mstatus_r__wpri3(csrf_mstatus_r__wpri3),
    .mstatus_r__xs(csrf_mstatus_r__xs),
    .mstatus_w__fs(csrf_mstatus_w__fs),
    .mstatus_w__mie(csrf_mstatus_w__mie),
    .mstatus_w__mpie(csrf_mstatus_w__mpie),
    .mstatus_w__mpp(csrf_mstatus_w__mpp),
    .mstatus_w__mprv(csrf_mstatus_w__mprv),
    .mstatus_w__mxr(csrf_mstatus_w__mxr),
    .mstatus_w__sd(csrf_mstatus_w__sd),
    .mstatus_w__sie(csrf_mstatus_w__sie),
    .mstatus_w__spie(csrf_mstatus_w__spie),
    .mstatus_w__spp(csrf_mstatus_w__spp),
    .mstatus_w__sum(csrf_mstatus_w__sum),
    .mstatus_w__tsr(csrf_mstatus_w__tsr),
    .mstatus_w__tvm(csrf_mstatus_w__tvm),
    .mstatus_w__tw(csrf_mstatus_w__tw),
    .mstatus_w__uie(csrf_mstatus_w__uie),
    .mstatus_w__upie(csrf_mstatus_w__upie),
    .mstatus_w__wpri0(csrf_mstatus_w__wpri0),
    .mstatus_w__wpri1(csrf_mstatus_w__wpri1),
    .mstatus_w__wpri2(csrf_mstatus_w__wpri2),
    .mstatus_w__wpri3(csrf_mstatus_w__wpri3),
    .mstatus_w__xs(csrf_mstatus_w__xs),
    .mstatus_we(csrf_mstatus_we),
    .mtvec_r__base(csrf_mtvec_r__base),
    .mtvec_r__mode(csrf_mtvec_r__mode),
    .mtvec_w__base(csrf_mtvec_w__base),
    .mtvec_w__mode(csrf_mtvec_w__mode),
    .mtvec_we(csrf_mtvec_we),
    .rst(\rst$2 ),
    .timer_interrupt(exception_timer_interrupt),
    .x_bus_error(exception_x_bus_error),
    .x_ebreak(exception_x_ebreak),
    .x_ecall(exception_x_ecall),
    .x_illegal(exception_x_illegal),
    .x_misaligned_fetch(exception_x_misaligned_fetch),
    .x_mret(exception_x_mret),
    .x_pc(exception_x_pc),
    .x_raise(f_x_raise),
    .x_stall(exception_x_stall),
    .x_valid(exception_x_valid)
  );
  f f (
    .clk(\clk$1 ),
    .kill(f_kill),
    .\kill$3 (\f_kill$8 ),
    .m_branch_taken(a_m_branch_taken),
    .payload__branch_predict_taken(f_payload__branch_predict_taken),
    .\payload__branch_predict_taken$4 (a_payload__branch_predict_taken),
    .rst(\rst$2 ),
    .stall(f_stall),
    .\stall$2 (\f_stall$7 ),
    .\stall$5 (\f_stall$9 ),
    .valid(f_valid),
    .\valid$1 (\f_valid$6 ),
    .\valid$6 (\a_valid$5 ),
    .\valid$7 (\f_valid$10 ),
    .x_raise(f_x_raise)
  );
  fetch fetch (
    .a_misaligned_fetch(fetch_a_misaligned_fetch),
    .a_pc(fetch_a_pc),
    .a_stall(fetch_a_stall),
    .clk(\clk$1 ),
    .d_branch_predict_taken(fetch_d_branch_predict_taken),
    .d_branch_target(fetch_d_branch_target),
    .d_valid(fetch_d_valid),
    .f_bus_error(fetch_f_bus_error),
    .f_instruction(fetch_f_instruction),
    .f_pc(fetch_f_pc),
    .f_stall(fetch_f_stall),
    .ibus__ack(fetch_ibus__ack),
    .ibus__adr(fetch_ibus__adr),
    .ibus__cyc(fetch_ibus__cyc),
    .ibus__dat_r(fetch_ibus__dat_r),
    .ibus__err(fetch_ibus__err),
    .ibus__stb(fetch_ibus__stb),
    .m_branch_predict_taken(fetch_m_branch_predict_taken),
    .m_branch_taken(a_m_branch_taken),
    .m_branch_target(fetch_m_branch_target),
    .m_valid(fetch_m_valid),
    .rst(\rst$2 ),
    .x_pc(fetch_x_pc)
  );
  reg [31:0] gprf [31:0];
  initial begin
    gprf[0] = 32'd0;
    gprf[1] = 32'd0;
    gprf[2] = 32'd0;
    gprf[3] = 32'd0;
    gprf[4] = 32'd0;
    gprf[5] = 32'd0;
    gprf[6] = 32'd0;
    gprf[7] = 32'd0;
    gprf[8] = 32'd0;
    gprf[9] = 32'd0;
    gprf[10] = 32'd0;
    gprf[11] = 32'd0;
    gprf[12] = 32'd0;
    gprf[13] = 32'd0;
    gprf[14] = 32'd0;
    gprf[15] = 32'd0;
    gprf[16] = 32'd0;
    gprf[17] = 32'd0;
    gprf[18] = 32'd0;
    gprf[19] = 32'd0;
    gprf[20] = 32'd0;
    gprf[21] = 32'd0;
    gprf[22] = 32'd0;
    gprf[23] = 32'd0;
    gprf[24] = 32'd0;
    gprf[25] = 32'd0;
    gprf[26] = 32'd0;
    gprf[27] = 32'd0;
    gprf[28] = 32'd0;
    gprf[29] = 32'd0;
    gprf[30] = 32'd0;
    gprf[31] = 32'd0;
  end
  reg [4:0] _0_;
  reg [4:0] _1_;
  always @(posedge \$next\clk$1 ) begin
    _0_ <= \$next\gprf_r_addr ;
    _1_ <= \$next\gprf_r_addr$27 ;
    if (\$next\gprf_w_en ) gprf[\$next\gprf_w_addr ] <= \$next\gprf_w_data ;
  end
  assign gprf_r_data = gprf[_0_];
  assign \gprf_r_data$28  = gprf[_1_];
  loadstore loadstore (
    .clk(\clk$1 ),
    .dbus__ack(loadstore_dbus__ack),
    .dbus__adr(loadstore_dbus__adr),
    .dbus__cyc(loadstore_dbus__cyc),
    .dbus__dat_r(loadstore_dbus__dat_r),
    .dbus__dat_w(loadstore_dbus__dat_w),
    .dbus__err(loadstore_dbus__err),
    .dbus__sel(loadstore_dbus__sel),
    .dbus__stb(loadstore_dbus__stb),
    .dbus__we(loadstore_dbus__we),
    .m_load_data(loadstore_m_load_data),
    .rst(\rst$2 ),
    .w_address(loadstore_w_address),
    .w_load_data(loadstore_w_load_data),
    .w_load_mask(loadstore_w_load_mask),
    .w_load_result(loadstore_w_load_result),
    .x_address(loadstore_x_address),
    .x_dbus_sel(loadstore_x_dbus_sel),
    .x_load(loadstore_x_load),
    .x_mask(loadstore_x_mask),
    .x_stall(loadstore_x_stall),
    .x_store(loadstore_x_store),
    .x_store_data(loadstore_x_store_data),
    .x_store_operand(loadstore_x_store_operand),
    .x_valid(loadstore_x_valid)
  );
  \logic  \logic  (
    .op(logic_op),
    .result(logic_result),
    .src1(logic_src1),
    .src2(logic_src2)
  );
  m m (
    .clk(\clk$1 ),
    .dbus__cyc(dbus__cyc),
    .ibus__cyc(ibus__cyc),
    .kill(m_kill),
    .\kill$3 (\m_kill$22 ),
    .rst(\rst$2 ),
    .stall(m_stall),
    .\stall$2 (\m_stall$21 ),
    .\stall$5 (\m_stall$23 ),
    .valid(m_valid),
    .\valid$1 (\m_valid$20 ),
    .\valid$4 (\a_valid$5 )
  );
  predict predict (
    .d_branch(predict_d_branch),
    .d_branch_taken(predict_d_branch_taken),
    .d_branch_target(predict_d_branch_target),
    .d_jump(predict_d_jump),
    .d_offset(predict_d_offset),
    .d_pc(predict_d_pc),
    .d_rs1_re(predict_d_rs1_re)
  );
  shifter shifter (
    .clk(\clk$1 ),
    .m_result(shifter_m_result),
    .rst(\rst$2 ),
    .x_direction(shifter_x_direction),
    .x_sext(shifter_x_sext),
    .x_shamt(shifter_x_shamt),
    .x_src1(shifter_x_src1),
    .x_stall(shifter_x_stall)
  );
  w w (
    .kill(w_kill),
    .stall(w_stall),
    .valid(w_valid),
    .\valid$1 (\w_valid$24 )
  );
  x x (
    .clk(\clk$1 ),
    .kill(x_kill),
    .\kill$3 (\x_kill$18 ),
    .rst(\rst$2 ),
    .stall(x_stall),
    .\stall$2 (\x_stall$17 ),
    .\stall$4 (\x_stall$19 ),
    .valid(x_valid),
    .\valid$1 (\x_valid$16 ),
    .\valid$5 (\f_valid$10 )
  );
  always @* begin
    \$next\clk$1  = 1'h0;
    \$next\clk$1  = clk;
  end
  always @* begin
    \$next\rst$2  = 1'h0;
    \$next\rst$2  = rst;
  end
  always @* begin
    \$next\payload__pc$36  = 30'h00000000;
    \$next\payload__pc$36  = \payload__pc$37 ;
  end
  always @* begin
    \$next\fetch_f_pc  = 30'h00000000;
    \$next\fetch_f_pc  = payload__pc[29:0];
  end
  always @* begin
    \$next\fetch_f_stall  = 1'h0;
    \$next\fetch_f_stall  = \f_stall$9 ;
  end
  always @* begin
    \$next\fetch_d_branch_predict_taken  = 1'h0;
    \$next\fetch_d_branch_predict_taken  = predict_d_branch_taken;
  end
  always @* begin
    \$next\fetch_d_branch_target  = 32'd0;
    \$next\fetch_d_branch_target  = predict_d_branch_target;
  end
  always @* begin
    \$next\fetch_d_valid  = 1'h0;
    \$next\fetch_d_valid  = \d_valid$14 ;
  end
  always @* begin
    \$next\fetch_x_pc  = 30'h00000000;
    \$next\fetch_x_pc  = \payload__pc$42 ;
  end
  always @* begin
    \$next\fetch_m_branch_predict_taken  = 1'h0;
    \$next\fetch_m_branch_predict_taken  = a_payload__branch_predict_taken;
  end
  always @* begin
    \$next\a_m_branch_taken  = 1'h0;
    \$next\a_m_branch_taken  = \$135 ;
  end
  always @* begin
    \$next\fetch_m_valid  = 1'h0;
    \$next\fetch_m_valid  = \a_valid$5 ;
  end
  always @* begin
    \$next\fetch_m_branch_target  = 32'd0;
    casez ({ \payload__mret$108 , payload__exception })
      2'bz1:
          \$next\fetch_m_branch_target  = \$137 [31:0];
      2'b1z:
          \$next\fetch_m_branch_target  = csrf_mepc_r__value;
      2'hz:
          \$next\fetch_m_branch_target  = \payload__branch_target$104 ;
    endcase
  end
  always @* begin
    \$next\payload__misaligned_fetch$38  = 1'h0;
    \$next\payload__misaligned_fetch$38  = \payload__misaligned_fetch$39 ;
  end
  always @* begin
    \$next\decoder_instruction  = 32'd0;
    \$next\decoder_instruction  = payload__instruction;
  end
  always @* begin
    \$next\gprf_r_addr  = 5'h00;
    \$next\gprf_r_addr  = fetch_f_instruction[19:15];
  end
  always @* begin
    \$next\gprf_r_addr$27  = 5'h00;
    \$next\gprf_r_addr$27  = fetch_f_instruction[24:20];
  end
  always @* begin
    \$next\csrf_port__addr  = csrf_port__addr;
    casez (\$140 )
      1'h1:
          \$next\csrf_port__addr  = \$142 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\csrf_port__addr  = 13'h0000;
    endcase
  end
  always @* begin
    \$next\csrf_port__en  = 1'h0;
    \$next\csrf_port__en  = \$144 ;
  end
  always @* begin
    \$next\logic_op  = 3'h0;
    \$next\logic_op  = \$148 ;
  end
  always @* begin
    \$next\logic_src1  = 32'd0;
    \$next\logic_src1  = \$164 ;
  end
  always @* begin
    \$next\logic_src2  = 32'd0;
    \$next\logic_src2  = payload__src2;
  end
  always @* begin
    \$next\adder_sub  = 1'h0;
    \$next\adder_sub  = payload__adder_sub;
  end
  always @* begin
    \$next\adder_src1  = 32'd0;
    \$next\adder_src1  = payload__src1;
  end
  always @* begin
    \$next\payload__instruction  = 32'd0;
    \$next\payload__instruction  = \payload__instruction$40 ;
  end
  always @* begin
    \$next\adder_src2  = 32'd0;
    \$next\adder_src2  = \$166 ;
  end
  always @* begin
    \$next\shifter_x_direction  = 1'h0;
    \$next\shifter_x_direction  = payload__direction;
  end
  always @* begin
    \$next\shifter_x_sext  = 1'h0;
    \$next\shifter_x_sext  = payload__sext;
  end
  always @* begin
    \$next\shifter_x_shamt  = 5'h00;
    \$next\shifter_x_shamt  = payload__src2[4:0];
  end
  always @* begin
    \$next\shifter_x_src1  = 32'd0;
    \$next\shifter_x_src1  = payload__src1;
  end
  always @* begin
    \$next\shifter_x_stall  = 1'h0;
    \$next\shifter_x_stall  = \x_stall$19 ;
  end
  always @* begin
    \$next\compare_op  = 3'h0;
    \$next\compare_op  = \$168 [2:0];
  end
  always @* begin
    \$next\compare_zero  = 1'h0;
    \$next\compare_zero  = \$175 ;
  end
  always @* begin
    \$next\compare_negative  = 1'h0;
    \$next\compare_negative  = adder_result[31];
  end
  always @* begin
    \$next\compare_overflow  = 1'h0;
    \$next\compare_overflow  = adder_overflow;
  end
  always @* begin
    \$next\payload__bus_error  = 1'h0;
    \$next\payload__bus_error  = \payload__bus_error$41 ;
  end
  always @* begin
    \$next\compare_carry  = 1'h0;
    \$next\compare_carry  = adder_carry;
  end
  always @* begin
    \$next\exception_external_interrupt  = 32'd0;
    \$next\exception_external_interrupt  = external_interrupt;
  end
  always @* begin
    \$next\exception_timer_interrupt  = 1'h0;
    \$next\exception_timer_interrupt  = timer_interrupt;
  end
  always @* begin
    \$next\exception_x_pc  = 30'h00000000;
    \$next\exception_x_pc  = \payload__pc$42 ;
  end
  always @* begin
    \$next\exception_x_ecall  = 1'h0;
    \$next\exception_x_ecall  = payload__ecall;
  end
  always @* begin
    \$next\exception_x_misaligned_fetch  = 1'h0;
    \$next\exception_x_misaligned_fetch  = \payload__misaligned_fetch$44 ;
  end
  always @* begin
    \$next\exception_x_bus_error  = 1'h0;
    \$next\exception_x_bus_error  = \payload__bus_error$73 ;
  end
  always @* begin
    \$next\exception_x_illegal  = 1'h0;
    \$next\exception_x_illegal  = payload__illegal;
  end
  always @* begin
    \$next\exception_x_mret  = 1'h0;
    \$next\exception_x_mret  = payload__mret;
  end
  always @* begin
    \$next\exception_x_stall  = 1'h0;
    \$next\exception_x_stall  = x_stall;
  end
  always @* begin
    \$next\x_valid  = 1'h0;
    \$next\x_valid  = \d_valid$11 ;
  end
  always @* begin
    \$next\exception_x_valid  = 1'h0;
    \$next\exception_x_valid  = \f_valid$10 ;
  end
  always @* begin
    \$next\exception_x_ebreak  = 1'h0;
    \$next\exception_x_ebreak  = payload__ebreak;
  end
  always @* begin
    \$next\loadstore_x_address  = 32'd0;
    \$next\loadstore_x_address  = adder_result;
  end
  always @* begin
    \$next\loadstore_x_load  = 1'h0;
    \$next\loadstore_x_load  = payload__load;
  end
  always @* begin
    \$next\loadstore_x_store  = 1'h0;
    \$next\loadstore_x_store  = payload__store;
  end
  always @* begin
    \$next\loadstore_x_store_operand  = 32'd0;
    \$next\loadstore_x_store_operand  = payload__src2;
  end
  always @* begin
    \$next\loadstore_x_mask  = 3'h0;
    \$next\loadstore_x_mask  = payload__funct3;
  end
  always @* begin
    \$next\loadstore_x_stall  = 1'h0;
    \$next\loadstore_x_stall  = \x_stall$19 ;
  end
  always @* begin
    \$next\loadstore_x_valid  = 1'h0;
    \$next\loadstore_x_valid  = \$179 ;
  end
  always @* begin
    \$next\loadstore_w_address  = 32'd0;
    \$next\loadstore_w_address  = \payload__result$117 ;
  end
  always @* begin
    \$next\d_stall$12  = 1'h0;
    \$next\d_stall$12  = x_stall;
  end
  always @* begin
    \$next\loadstore_w_load_mask  = 3'h0;
    \$next\loadstore_w_load_mask  = \payload__load_mask$121 ;
  end
  always @* begin
    \$next\loadstore_w_load_data  = 32'd0;
    \$next\loadstore_w_load_data  = payload__load_data;
  end
  always @* begin
    \$next\dbus__adr  = 30'h00000000;
    \$next\dbus__adr  = loadstore_dbus__adr;
  end
  always @* begin
    \$next\dbus__dat_w  = 32'd0;
    \$next\dbus__dat_w  = loadstore_dbus__dat_w;
  end
  always @* begin
    \$next\loadstore_dbus__dat_r  = 32'd0;
    \$next\loadstore_dbus__dat_r  = dbus__dat_r;
  end
  always @* begin
    \$next\dbus__sel  = 4'h0;
    \$next\dbus__sel  = loadstore_dbus__sel;
  end
  always @* begin
    \$next\dbus__cyc  = 1'h0;
    \$next\dbus__cyc  = loadstore_dbus__cyc;
  end
  always @* begin
    \$next\dbus__stb  = 1'h0;
    \$next\dbus__stb  = loadstore_dbus__stb;
  end
  always @* begin
    \$next\loadstore_dbus__ack  = 1'h0;
    \$next\loadstore_dbus__ack  = dbus__ack;
  end
  always @* begin
    \$next\dbus__we  = 1'h0;
    \$next\dbus__we  = loadstore_dbus__we;
  end
  always @* begin
    \$next\x_kill  = 1'h0;
    \$next\x_kill  = \d_kill$13 ;
  end
  always @* begin
    \$next\dbus__cti  = 3'h0;
    \$next\dbus__cti  = \dbus__cti$181 ;
  end
  always @* begin
    \$next\dbus__bte  = 2'h0;
    \$next\dbus__bte  = \dbus__bte$182 ;
  end
  always @* begin
    \$next\loadstore_dbus__err  = 1'h0;
    \$next\loadstore_dbus__err  = dbus__err;
  end
  always @* begin
    \$next\x_raw_rs1  = 1'h0;
    \$next\x_raw_rs1  = \$185 ;
  end
  always @* begin
    \$next\m_raw_rs1  = 1'h0;
    \$next\m_raw_rs1  = \$189 ;
  end
  always @* begin
    \$next\w_raw_rs1  = 1'h0;
    \$next\w_raw_rs1  = \$193 ;
  end
  always @* begin
    \$next\x_raw_rs2  = 1'h0;
    \$next\x_raw_rs2  = \$197 ;
  end
  always @* begin
    \$next\m_raw_rs2  = 1'h0;
    \$next\m_raw_rs2  = \$201 ;
  end
  always @* begin
    \$next\w_raw_rs2  = 1'h0;
    \$next\w_raw_rs2  = \$205 ;
  end
  always @* begin
    \$next\x_raw_csr  = 1'h0;
    \$next\x_raw_csr  = \$211 ;
  end
  always @* begin
    \$next\payload__pc$42  = 30'h00000000;
    \$next\payload__pc$42  = \payload__pc$43 ;
  end
  always @* begin
    \$next\d_x_lock  = 1'h0;
    \$next\d_x_lock  = \$221 ;
  end
  always @* begin
    \$next\d_m_lock  = 1'h0;
    \$next\d_m_lock  = \$231 ;
  end
  always @* begin
    \$next\x_result  = 32'd0;
    casez ({ payload__csr, payload__logic, payload__jump })
      3'bzz1:
          \$next\x_result  = \$233 [31:0];
      3'bz1z:
          \$next\x_result  = logic_result;
      3'b1zz:
          \$next\x_result  = payload__src2;
      3'hz:
          \$next\x_result  = adder_result;
    endcase
  end
  always @* begin
    \$next\m_result  = 32'd0;
    casez ({ \payload__shift$88 , \payload__compare$97  })
      2'bz1:
          \$next\m_result  = \$238 ;
      2'b1z:
          \$next\m_result  = shifter_m_result;
      2'hz:
          \$next\m_result  = payload__result;
    endcase
  end
  always @* begin
    \$next\w_result  = 32'd0;
    casez (\payload__load$119 )
      1'h1:
          \$next\w_result  = loadstore_w_load_result;
      1'hz:
          \$next\w_result  = \payload__result$117 ;
    endcase
  end
  always @* begin
    \$next\x_csr_result  = 32'd0;
    casez (payload__funct3[1])
      1'h1:
          \$next\x_csr_result  = logic_result;
      1'hz:
          \$next\x_csr_result  = payload__src1;
    endcase
  end
  always @* begin
    \$next\csrf_port__en$31  = 1'h0;
    \$next\csrf_port__en$31  = \$250 ;
  end
  always @* begin
    \$next\csrf_port__addr$32  = 13'h0000;
    \$next\csrf_port__addr$32  = \$252 ;
  end
  always @* begin
    \$next\csrf_port__data  = 32'd0;
    \$next\csrf_port__data  = x_csr_result;
  end
  always @* begin
    \$next\gprf_w_en  = 1'h0;
    \$next\gprf_w_en  = \$258 ;
  end
  always @* begin
    \$next\payload__misaligned_fetch$44  = 1'h0;
    \$next\payload__misaligned_fetch$44  = \payload__misaligned_fetch$45 ;
  end
  always @* begin
    \$next\gprf_w_addr  = 5'h00;
    \$next\gprf_w_addr  = \payload__rd$113 ;
  end
  always @* begin
    \$next\gprf_w_data  = 32'd0;
    \$next\gprf_w_data  = w_result;
  end
  always @* begin
    \$next\w_valid_r  = w_valid_r;
    casez (\$260 )
      1'h1:
          \$next\w_valid_r  = \a_valid$5 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\w_valid_r  = 1'h0;
    endcase
  end
  always @* begin
    \$next\d_src1  = 32'd0;
    casez ({ \$270 , \$268 , \$266 , \$264 , decoder_auipc, decoder_lui })
      6'bzzzzz1:
          \$next\d_src1  = 32'd0;
      6'bzzzz1z:
          \$next\d_src1  = \$272 [31:0];
      6'bzzz1zz:
          \$next\d_src1  = 32'd0;
      6'bzz1zzz:
          \$next\d_src1  = x_result;
      6'bz1zzzz:
          \$next\d_src1  = m_result;
      6'b1zzzzz:
          \$next\d_src1  = w_result;
      6'hzz:
          \$next\d_src1  = gprf_r_data;
    endcase
  end
  always @* begin
    \$next\d_src2  = 32'd0;
    casez ({ \$283 , \$281 , \$279 , \$277 , \$275 , decoder_csr })
      6'bzzzzz1:
          casez (\$285 )
            1'h1:
                \$next\d_src2  = x_csr_result;
            1'hz:
                \$next\d_src2  = \csrf_port__data$33 ;
          endcase
      6'bzzzz1z:
          \$next\d_src2  = decoder_immediate;
      6'bzzz1zz:
          \$next\d_src2  = 32'd0;
      6'bzz1zzz:
          \$next\d_src2  = x_result;
      6'bz1zzzz:
          \$next\d_src2  = m_result;
      6'b1zzzzz:
          \$next\d_src2  = w_result;
      6'hzz:
          \$next\d_src2  = \gprf_r_data$28 ;
    endcase
  end
  always @* begin
    \$next\predict_d_branch  = 1'h0;
    \$next\predict_d_branch  = decoder_branch;
  end
  always @* begin
    \$next\predict_d_jump  = 1'h0;
    \$next\predict_d_jump  = decoder_jump;
  end
  always @* begin
    \$next\predict_d_offset  = 32'd0;
    \$next\predict_d_offset  = decoder_immediate;
  end
  always @* begin
    \$next\predict_d_pc  = 30'h00000000;
    \$next\predict_d_pc  = \payload__pc$36 ;
  end
  always @* begin
    \$next\predict_d_rs1_re  = 1'h0;
    \$next\predict_d_rs1_re  = decoder_rs1_re;
  end
  always @* begin
    \$next\payload__rd  = 5'h00;
    \$next\payload__rd  = \payload__rd$46 ;
  end
  always @* begin
    \$next\payload__pc$34  = \payload__pc$34 ;
    casez (\$287 )
      1'h1:
          \$next\payload__pc$34  = \$289 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__pc$34  = 31'h7fffffff;
    endcase
  end
  always @* begin
    \$next\payload__misaligned_fetch$35  = \payload__misaligned_fetch$35 ;
    casez (\$291 )
      1'h1:
          \$next\payload__misaligned_fetch$35  = fetch_a_misaligned_fetch;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__misaligned_fetch$35  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__pc$37  = \payload__pc$37 ;
    casez (\$293 )
      1'h1:
          \$next\payload__pc$37  = payload__pc[29:0];
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__pc$37  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload__misaligned_fetch$39  = \payload__misaligned_fetch$39 ;
    casez (\$295 )
      1'h1:
          \$next\payload__misaligned_fetch$39  = payload__misaligned_fetch;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__misaligned_fetch$39  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__instruction$40  = \payload__instruction$40 ;
    casez (\$297 )
      1'h1:
          \$next\payload__instruction$40  = fetch_f_instruction;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__instruction$40  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__bus_error$41  = \payload__bus_error$41 ;
    casez (\$299 )
      1'h1:
          \$next\payload__bus_error$41  = fetch_f_bus_error;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__bus_error$41  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__pc$43  = \payload__pc$43 ;
    casez (\$301 )
      1'h1:
          \$next\payload__pc$43  = \payload__pc$36 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__pc$43  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload__misaligned_fetch$45  = \payload__misaligned_fetch$45 ;
    casez (\$303 )
      1'h1:
          \$next\payload__misaligned_fetch$45  = \payload__misaligned_fetch$38 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__misaligned_fetch$45  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__bus_error$74  = \payload__bus_error$74 ;
    casez (\$305 )
      1'h1:
          \$next\payload__bus_error$74  = payload__bus_error;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__bus_error$74  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__rd$46  = \payload__rd$46 ;
    casez (\$307 )
      1'h1:
          \$next\payload__rd$46  = decoder_rd;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rd$46  = 5'h00;
    endcase
  end
  always @* begin
    \$next\f_valid  = 1'h0;
    \$next\f_valid  = a_valid;
  end
  always @* begin
    \$next\payload__rs1  = 5'h00;
    \$next\payload__rs1  = \payload__rs1$47 ;
  end
  always @* begin
    \$next\payload__rs1$47  = \payload__rs1$47 ;
    casez (\$309 )
      1'h1:
          \$next\payload__rs1$47  = decoder_rs1;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rs1$47  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload__rd_we$48  = \payload__rd_we$48 ;
    casez (\$311 )
      1'h1:
          \$next\payload__rd_we$48  = decoder_rd_we;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rd_we$48  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__rs1_re$49  = \payload__rs1_re$49 ;
    casez (\$313 )
      1'h1:
          \$next\payload__rs1_re$49  = decoder_rs1_re;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rs1_re$49  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__immediate$52  = \payload__immediate$52 ;
    casez (\$315 )
      1'h1:
          \$next\payload__immediate$52  = decoder_immediate;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__immediate$52  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__bypass_x$53  = \payload__bypass_x$53 ;
    casez (\$317 )
      1'h1:
          \$next\payload__bypass_x$53  = decoder_bypass_x;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__bypass_x$53  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__bypass_m$54  = \payload__bypass_m$54 ;
    casez (\$319 )
      1'h1:
          \$next\payload__bypass_m$54  = decoder_bypass_m;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__bypass_m$54  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__funct3$55  = \payload__funct3$55 ;
    casez (\$321 )
      1'h1:
          \$next\payload__funct3$55  = decoder_funct3;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__funct3$55  = 3'h0;
    endcase
  end
  always @* begin
    \$next\payload__load$56  = \payload__load$56 ;
    casez (\$323 )
      1'h1:
          \$next\payload__load$56  = decoder_load;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__load$56  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__store$57  = \payload__store$57 ;
    casez (\$325 )
      1'h1:
          \$next\payload__store$57  = decoder_store;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__store$57  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__adder_sub$58  = \payload__adder_sub$58 ;
    casez (\$327 )
      1'h1:
          \$next\payload__adder_sub$58  = decoder_adder_sub;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__adder_sub$58  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__rd_we  = 1'h0;
    \$next\payload__rd_we  = \payload__rd_we$48 ;
  end
  always @* begin
    \$next\payload__compare$66  = \payload__compare$66 ;
    casez (\$329 )
      1'h1:
          \$next\payload__compare$66  = decoder_compare;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__compare$66  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__logic$59  = \payload__logic$59 ;
    casez (\$331 )
      1'h1:
          \$next\payload__logic$59  = decoder_logic;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__logic$59  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__shift$62  = \payload__shift$62 ;
    casez (\$333 )
      1'h1:
          \$next\payload__shift$62  = decoder_shift;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__shift$62  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__direction$63  = \payload__direction$63 ;
    casez (\$335 )
      1'h1:
          \$next\payload__direction$63  = decoder_direction;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__direction$63  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__sext$64  = \payload__sext$64 ;
    casez (\$337 )
      1'h1:
          \$next\payload__sext$64  = decoder_sext;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__sext$64  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__jump$65  = \payload__jump$65 ;
    casez (\$339 )
      1'h1:
          \$next\payload__jump$65  = decoder_jump;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__jump$65  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__branch$67  = \payload__branch$67 ;
    casez (\$341 )
      1'h1:
          \$next\payload__branch$67  = decoder_branch;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__branch$67  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__fence_i$69  = \payload__fence_i$69 ;
    casez (\$343 )
      1'h1:
          \$next\payload__fence_i$69  = decoder_fence_i;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__fence_i$69  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__csr$70  = \payload__csr$70 ;
    casez (\$345 )
      1'h1:
          \$next\payload__csr$70  = decoder_csr;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__csr$70  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__csr_adr$71  = \payload__csr_adr$71 ;
    casez (\$347 )
      1'h1:
          \$next\payload__csr_adr$71  = decoder_immediate[11:0];
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__csr_adr$71  = 12'h000;
    endcase
  end
  always @* begin
    \$next\payload__rs1_re  = 1'h0;
    \$next\payload__rs1_re  = \payload__rs1_re$49 ;
  end
  always @* begin
    \$next\payload__csr_we$72  = \payload__csr_we$72 ;
    casez (\$349 )
      1'h1:
          \$next\payload__csr_we$72  = decoder_csr_we;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__csr_we$72  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__ecall$75  = \payload__ecall$75 ;
    casez (\$351 )
      1'h1:
          \$next\payload__ecall$75  = decoder_ecall;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__ecall$75  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__ebreak$76  = \payload__ebreak$76 ;
    casez (\$353 )
      1'h1:
          \$next\payload__ebreak$76  = decoder_ebreak;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__ebreak$76  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__mret$77  = \payload__mret$77 ;
    casez (\$355 )
      1'h1:
          \$next\payload__mret$77  = decoder_mret;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__mret$77  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__illegal$78  = \payload__illegal$78 ;
    casez (\$357 )
      1'h1:
          \$next\payload__illegal$78  = decoder_illegal;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__illegal$78  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__src1$50  = \payload__src1$50 ;
    casez (\$359 )
      1'h1:
          \$next\payload__src1$50  = d_src1;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__src1$50  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__src2$51  = \payload__src2$51 ;
    casez (\$361 )
      1'h1:
          \$next\payload__src2$51  = d_src2;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__src2$51  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__branch_predict_taken  = payload__branch_predict_taken;
    casez (\$363 )
      1'h1:
          \$next\payload__branch_predict_taken  = predict_d_branch_taken;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__branch_predict_taken  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__branch_target$68  = \payload__branch_target$68 ;
    casez (\$365 )
      1'h1:
          \$next\payload__branch_target$68  = predict_d_branch_target;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__branch_target$68  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__pc$80  = \payload__pc$80 ;
    casez (\$367 )
      1'h1:
          \$next\payload__pc$80  = \payload__pc$42 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__pc$80  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload__src1  = 32'd0;
    \$next\payload__src1  = \payload__src1$50 ;
  end
  always @* begin
    \$next\payload__rd$82  = \payload__rd$82 ;
    casez (\$369 )
      1'h1:
          \$next\payload__rd$82  = payload__rd;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rd$82  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload__rd_we$84  = \payload__rd_we$84 ;
    casez (\$371 )
      1'h1:
          \$next\payload__rd_we$84  = \$375 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rd_we$84  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__bypass_m$86  = \payload__bypass_m$86 ;
    casez (\$377 )
      1'h1:
          \$next\payload__bypass_m$86  = \$379 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__bypass_m$86  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__load$91  = \payload__load$91 ;
    casez (\$381 )
      1'h1:
          \$next\payload__load$91  = payload__load;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__load$91  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__load_mask$92  = \payload__load_mask$92 ;
    casez (\$383 )
      1'h1:
          \$next\payload__load_mask$92  = payload__funct3;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__load_mask$92  = 3'h0;
    endcase
  end
  always @* begin
    \$next\payload__store$94  = \payload__store$94 ;
    casez (\$385 )
      1'h1:
          \$next\payload__store$94  = payload__store;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__store$94  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__dbus_sel$95  = \payload__dbus_sel$95 ;
    casez (\$387 )
      1'h1:
          \$next\payload__dbus_sel$95  = loadstore_x_dbus_sel;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__dbus_sel$95  = 4'h0;
    endcase
  end
  always @* begin
    \$next\payload__store_data$96  = \payload__store_data$96 ;
    casez (\$389 )
      1'h1:
          \$next\payload__store_data$96  = loadstore_x_store_data;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__store_data$96  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__compare$98  = \payload__compare$98 ;
    casez (\$391 )
      1'h1:
          \$next\payload__compare$98  = payload__compare;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__compare$98  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__shift$89  = \payload__shift$89 ;
    casez (\$393 )
      1'h1:
          \$next\payload__shift$89  = payload__shift;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__shift$89  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__src2  = 32'd0;
    \$next\payload__src2  = \payload__src2$51 ;
  end
  always @* begin
    \$next\payload__exception$110  = \payload__exception$110 ;
    casez (\$395 )
      1'h1:
          \$next\payload__exception$110  = f_x_raise;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__exception$110  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__mret$109  = \payload__mret$109 ;
    casez (\$397 )
      1'h1:
          \$next\payload__mret$109  = payload__mret;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__mret$109  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__condition_met$103  = \payload__condition_met$103 ;
    casez (\$399 )
      1'h1:
          \$next\payload__condition_met$103  = compare_condition_met;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__condition_met$103  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__branch_taken$106  = \payload__branch_taken$106 ;
    casez (\$401 )
      1'h1:
          \$next\payload__branch_taken$106  = \$405 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__branch_taken$106  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__branch_target$105  = \payload__branch_target$105 ;
    casez (\$407 )
      1'h1:
          \$next\payload__branch_target$105  = \$411 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__branch_target$105  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__branch_predict_taken$107  = \payload__branch_predict_taken$107 ;
    casez (\$415 )
      1'h1:
          \$next\payload__branch_predict_taken$107  = \$419 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__branch_predict_taken$107  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__result$87  = \payload__result$87 ;
    casez (\$421 )
      1'h1:
          \$next\payload__result$87  = x_result;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__result$87  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__pc$112  = \payload__pc$112 ;
    casez (\$423 )
      1'h1:
          \$next\payload__pc$112  = \payload__pc$79 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__pc$112  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\payload__rd$114  = \payload__rd$114 ;
    casez (\$425 )
      1'h1:
          \$next\payload__rd$114  = \payload__rd$81 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rd$114  = 5'h00;
    endcase
  end
  always @* begin
    \$next\payload__load$120  = \payload__load$120 ;
    casez (\$427 )
      1'h1:
          \$next\payload__load$120  = \payload__load$90 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__load$120  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__immediate  = 32'd0;
    \$next\payload__immediate  = \payload__immediate$52 ;
  end
  always @* begin
    \$next\payload__load_mask$122  = \payload__load_mask$122 ;
    casez (\$429 )
      1'h1:
          \$next\payload__load_mask$122  = payload__load_mask;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__load_mask$122  = 3'h0;
    endcase
  end
  always @* begin
    \$next\payload__load_data$123  = \payload__load_data$123 ;
    casez (\$431 )
      1'h1:
          \$next\payload__load_data$123  = loadstore_m_load_data;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__load_data$123  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__rd_we$116  = \payload__rd_we$116 ;
    casez (\$433 )
      1'h1:
          \$next\payload__rd_we$116  = \payload__rd_we$83 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__rd_we$116  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__result$118  = \payload__result$118 ;
    casez (\$435 )
      1'h1:
          \$next\payload__result$118  = m_result;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__result$118  = 32'd0;
    endcase
  end
  always @* begin
    \$next\payload__multiply$125  = \payload__multiply$125 ;
    casez (\$437 )
      1'h1:
          \$next\payload__multiply$125  = \payload__multiply$99 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__multiply$125  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__exception$127  = \payload__exception$127 ;
    casez (\$439 )
      1'h1:
          \$next\payload__exception$127  = payload__exception;
    endcase
    casez (\rst$2 )
      1'h1:
          \$next\payload__exception$127  = 1'h0;
    endcase
  end
  always @* begin
    \$next\payload__bypass_x  = 1'h0;
    \$next\payload__bypass_x  = \payload__bypass_x$53 ;
  end
  always @* begin
    \$next\payload__bypass_m  = 1'h0;
    \$next\payload__bypass_m  = \payload__bypass_m$54 ;
  end
  always @* begin
    \$next\payload__funct3  = 3'h0;
    \$next\payload__funct3  = \payload__funct3$55 ;
  end
  always @* begin
    \$next\payload__load  = 1'h0;
    \$next\payload__load  = \payload__load$56 ;
  end
  always @* begin
    \$next\a_stall  = 1'h0;
    \$next\a_stall  = f_stall;
  end
  always @* begin
    \$next\payload__store  = 1'h0;
    \$next\payload__store  = \payload__store$57 ;
  end
  always @* begin
    \$next\payload__adder_sub  = 1'h0;
    \$next\payload__adder_sub  = \payload__adder_sub$58 ;
  end
  always @* begin
    \$next\payload__logic  = 1'h0;
    \$next\payload__logic  = \payload__logic$59 ;
  end
  always @* begin
    \$next\payload__multiply  = 1'h0;
    \$next\payload__multiply  = \payload__multiply$60 ;
  end
  always @* begin
    \$next\payload__divide  = 1'h0;
    \$next\payload__divide  = \payload__divide$61 ;
  end
  always @* begin
    \$next\payload__shift  = 1'h0;
    \$next\payload__shift  = \payload__shift$62 ;
  end
  always @* begin
    \$next\payload__direction  = 1'h0;
    \$next\payload__direction  = \payload__direction$63 ;
  end
  always @* begin
    \$next\payload__sext  = 1'h0;
    \$next\payload__sext  = \payload__sext$64 ;
  end
  always @* begin
    \$next\payload__jump  = 1'h0;
    \$next\payload__jump  = \payload__jump$65 ;
  end
  always @* begin
    \$next\payload__compare  = 1'h0;
    \$next\payload__compare  = \payload__compare$66 ;
  end
  always @* begin
    \$next\f_kill  = 1'h0;
    \$next\f_kill  = a_kill;
  end
  always @* begin
    \$next\payload__branch  = 1'h0;
    \$next\payload__branch  = \payload__branch$67 ;
  end
  always @* begin
    \$next\payload__branch_target  = 32'd0;
    \$next\payload__branch_target  = \payload__branch_target$68 ;
  end
  always @* begin
    \$next\f_payload__branch_predict_taken  = 1'h0;
    \$next\f_payload__branch_predict_taken  = payload__branch_predict_taken;
  end
  always @* begin
    \$next\payload__fence_i  = 1'h0;
    \$next\payload__fence_i  = \payload__fence_i$69 ;
  end
  always @* begin
    \$next\payload__csr  = 1'h0;
    \$next\payload__csr  = \payload__csr$70 ;
  end
  always @* begin
    \$next\payload__csr_adr  = 12'h000;
    \$next\payload__csr_adr  = \payload__csr_adr$71 ;
  end
  always @* begin
    \$next\payload__csr_we  = 1'h0;
    \$next\payload__csr_we  = \payload__csr_we$72 ;
  end
  always @* begin
    \$next\payload__bus_error$73  = 1'h0;
    \$next\payload__bus_error$73  = \payload__bus_error$74 ;
  end
  always @* begin
    \$next\payload__ecall  = 1'h0;
    \$next\payload__ecall  = \payload__ecall$75 ;
  end
  always @* begin
    \$next\payload__ebreak  = 1'h0;
    \$next\payload__ebreak  = \payload__ebreak$76 ;
  end
  always @* begin
    \$next\payload__pc  = 31'h00000000;
    \$next\payload__pc  = \payload__pc$34 ;
  end
  always @* begin
    \$next\payload__mret  = 1'h0;
    \$next\payload__mret  = \payload__mret$77 ;
  end
  always @* begin
    \$next\payload__illegal  = 1'h0;
    \$next\payload__illegal  = \payload__illegal$78 ;
  end
  always @* begin
    \$next\m_valid  = 1'h0;
    \$next\m_valid  = \x_valid$16 ;
  end
  always @* begin
    \$next\x_stall$17  = 1'h0;
    \$next\x_stall$17  = m_stall;
  end
  always @* begin
    \$next\m_kill  = 1'h0;
    \$next\m_kill  = \x_kill$18 ;
  end
  always @* begin
    \$next\payload__pc$79  = 30'h00000000;
    \$next\payload__pc$79  = \payload__pc$80 ;
  end
  always @* begin
    \$next\payload__rd$81  = 5'h00;
    \$next\payload__rd$81  = \payload__rd$82 ;
  end
  always @* begin
    \$next\payload__rd_we$83  = 1'h0;
    \$next\payload__rd_we$83  = \payload__rd_we$84 ;
  end
  always @* begin
    \$next\payload__bypass_m$85  = 1'h0;
    \$next\payload__bypass_m$85  = \payload__bypass_m$86 ;
  end
  always @* begin
    \$next\payload__result  = 32'd0;
    \$next\payload__result  = \payload__result$87 ;
  end
  always @* begin
    \$next\payload__misaligned_fetch  = 1'h0;
    \$next\payload__misaligned_fetch  = \payload__misaligned_fetch$35 ;
  end
  always @* begin
    \$next\payload__shift$88  = 1'h0;
    \$next\payload__shift$88  = \payload__shift$89 ;
  end
  always @* begin
    \$next\payload__load$90  = 1'h0;
    \$next\payload__load$90  = \payload__load$91 ;
  end
  always @* begin
    \$next\payload__load_mask  = 3'h0;
    \$next\payload__load_mask  = \payload__load_mask$92 ;
  end
  always @* begin
    \$next\payload__store$93  = 1'h0;
    \$next\payload__store$93  = \payload__store$94 ;
  end
  always @* begin
    \$next\payload__dbus_sel  = 4'h0;
    \$next\payload__dbus_sel  = \payload__dbus_sel$95 ;
  end
  always @* begin
    \$next\payload__store_data  = 32'd0;
    \$next\payload__store_data  = \payload__store_data$96 ;
  end
  always @* begin
    \$next\payload__compare$97  = 1'h0;
    \$next\payload__compare$97  = \payload__compare$98 ;
  end
  always @* begin
    \$next\payload__multiply$99  = 1'h0;
    \$next\payload__multiply$99  = \payload__multiply$100 ;
  end
  always @* begin
    \$next\payload__divide$101  = 1'h0;
    \$next\payload__divide$101  = \payload__divide$102 ;
  end
  always @* begin
    \$next\payload__condition_met  = 1'h0;
    \$next\payload__condition_met  = \payload__condition_met$103 ;
  end
  always @* begin
    \$next\d_valid  = 1'h0;
    \$next\d_valid  = \f_valid$6 ;
  end
  always @* begin
    \$next\payload__branch_target$104  = 32'd0;
    \$next\payload__branch_target$104  = \payload__branch_target$105 ;
  end
  always @* begin
    \$next\payload__branch_taken  = 1'h0;
    \$next\payload__branch_taken  = \payload__branch_taken$106 ;
  end
  always @* begin
    \$next\a_payload__branch_predict_taken  = 1'h0;
    \$next\a_payload__branch_predict_taken  = \payload__branch_predict_taken$107 ;
  end
  always @* begin
    \$next\payload__mret$108  = 1'h0;
    \$next\payload__mret$108  = \payload__mret$109 ;
  end
  always @* begin
    \$next\payload__exception  = 1'h0;
    \$next\payload__exception  = \payload__exception$110 ;
  end
  always @* begin
    \$next\w_valid  = 1'h0;
    \$next\w_valid  = \m_valid$20 ;
  end
  always @* begin
    \$next\m_stall$21  = 1'h0;
    \$next\m_stall$21  = w_stall;
  end
  always @* begin
    \$next\w_kill  = 1'h0;
    \$next\w_kill  = \m_kill$22 ;
  end
  always @* begin
    \$next\payload__pc$111  = 30'h00000000;
    \$next\payload__pc$111  = \payload__pc$112 ;
  end
  always @* begin
    \$next\payload__rd$113  = 5'h00;
    \$next\payload__rd$113  = \payload__rd$114 ;
  end
  always @* begin
    \$next\f_stall$7  = 1'h0;
    \$next\f_stall$7  = d_stall;
  end
  always @* begin
    \$next\payload__rd_we$115  = 1'h0;
    \$next\payload__rd_we$115  = \payload__rd_we$116 ;
  end
  always @* begin
    \$next\payload__result$117  = 32'd0;
    \$next\payload__result$117  = \payload__result$118 ;
  end
  always @* begin
    \$next\payload__load$119  = 1'h0;
    \$next\payload__load$119  = \payload__load$120 ;
  end
  always @* begin
    \$next\payload__load_mask$121  = 3'h0;
    \$next\payload__load_mask$121  = \payload__load_mask$122 ;
  end
  always @* begin
    \$next\payload__load_data  = 32'd0;
    \$next\payload__load_data  = \payload__load_data$123 ;
  end
  always @* begin
    \$next\payload__multiply$124  = 1'h0;
    \$next\payload__multiply$124  = \payload__multiply$125 ;
  end
  always @* begin
    \$next\payload__exception$126  = 1'h0;
    \$next\payload__exception$126  = \payload__exception$127 ;
  end
  always @* begin
    \$next\a_valid$3  = 1'h0;
    \$next\a_valid$3  = 1'h1;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\ibus__adr  = 30'h00000000;
    \$next\ibus__adr  = fetch_ibus__adr;
  end
  always @* begin
    \$next\ibus__dat_w  = 32'd0;
    \$next\ibus__dat_w  = \ibus__dat_w$128 ;
  end
  always @* begin
    \$next\d_kill  = 1'h0;
    \$next\d_kill  = \f_kill$8 ;
  end
  always @* begin
    \$next\fetch_ibus__dat_r  = 32'd0;
    \$next\fetch_ibus__dat_r  = ibus__dat_r;
  end
  always @* begin
    \$next\ibus__sel  = 4'h0;
    \$next\ibus__sel  = \ibus__sel$129 ;
  end
  always @* begin
    \$next\ibus__cyc  = 1'h0;
    \$next\ibus__cyc  = fetch_ibus__cyc;
  end
  always @* begin
    \$next\ibus__stb  = 1'h0;
    \$next\ibus__stb  = fetch_ibus__stb;
  end
  always @* begin
    \$next\fetch_ibus__ack  = 1'h0;
    \$next\fetch_ibus__ack  = ibus__ack;
  end
  always @* begin
    \$next\ibus__we  = 1'h0;
    \$next\ibus__we  = \ibus__we$130 ;
  end
  always @* begin
    \$next\ibus__cti  = 3'h0;
    \$next\ibus__cti  = \ibus__cti$131 ;
  end
  always @* begin
    \$next\ibus__bte  = 2'h0;
    \$next\ibus__bte  = \ibus__bte$132 ;
  end
  always @* begin
    \$next\fetch_ibus__err  = 1'h0;
    \$next\fetch_ibus__err  = ibus__err;
  end
  always @* begin
    \$next\fetch_a_stall  = 1'h0;
    \$next\fetch_a_stall  = \a_stall$4 ;
  end
  assign \$137  = \$138 ;
  assign \$168  = \$173 ;
  assign \$233  = \$236 ;
  assign \$272  = \$273 ;
  assign \payload__multiply$60  = 1'h0;
  assign \payload__divide$61  = 1'h0;
  assign \payload__multiply$100  = 1'h0;
  assign \payload__divide$102  = 1'h0;
  assign \ibus__dat_w$128  = 32'd0;
  assign \ibus__sel$129  = 4'h0;
  assign \ibus__we$130  = 1'h0;
  assign \ibus__cti$131  = 3'h0;
  assign \ibus__bte$132  = 2'h0;
  assign timer_interrupt = 1'h0;
  assign \dbus__cti$181  = 3'h0;
  assign \dbus__bte$182  = 2'h0;
  assign predict_d_rs1_re = \$next\predict_d_rs1_re ;
  assign predict_d_pc = \$next\predict_d_pc ;
  assign predict_d_offset = \$next\predict_d_offset ;
  assign predict_d_jump = \$next\predict_d_jump ;
  assign predict_d_branch = \$next\predict_d_branch ;
  assign d_src2 = \$next\d_src2 ;
  assign d_src1 = \$next\d_src1 ;
  assign gprf_w_data = \$next\gprf_w_data ;
  assign gprf_w_addr = \$next\gprf_w_addr ;
  assign gprf_w_en = \$next\gprf_w_en ;
  assign csrf_port__data = \$next\csrf_port__data ;
  assign \csrf_port__addr$32  = \$next\csrf_port__addr$32 ;
  assign \csrf_port__en$31  = \$next\csrf_port__en$31 ;
  assign x_csr_result = \$next\x_csr_result ;
  assign w_result = \$next\w_result ;
  assign m_result = \$next\m_result ;
  assign x_result = \$next\x_result ;
  assign d_m_lock = \$next\d_m_lock ;
  assign d_x_lock = \$next\d_x_lock ;
  assign x_raw_csr = \$next\x_raw_csr ;
  assign w_raw_rs2 = \$next\w_raw_rs2 ;
  assign m_raw_rs2 = \$next\m_raw_rs2 ;
  assign x_raw_rs2 = \$next\x_raw_rs2 ;
  assign w_raw_rs1 = \$next\w_raw_rs1 ;
  assign m_raw_rs1 = \$next\m_raw_rs1 ;
  assign x_raw_rs1 = \$next\x_raw_rs1 ;
  assign loadstore_dbus__err = \$next\loadstore_dbus__err ;
  assign dbus__bte = \$next\dbus__bte ;
  assign dbus__cti = \$next\dbus__cti ;
  assign dbus__we = \$next\dbus__we ;
  assign loadstore_dbus__ack = \$next\loadstore_dbus__ack ;
  assign dbus__stb = \$next\dbus__stb ;
  assign dbus__cyc = \$next\dbus__cyc ;
  assign dbus__sel = \$next\dbus__sel ;
  assign loadstore_dbus__dat_r = \$next\loadstore_dbus__dat_r ;
  assign dbus__dat_w = \$next\dbus__dat_w ;
  assign dbus__adr = \$next\dbus__adr ;
  assign loadstore_w_load_data = \$next\loadstore_w_load_data ;
  assign loadstore_w_load_mask = \$next\loadstore_w_load_mask ;
  assign loadstore_w_address = \$next\loadstore_w_address ;
  assign loadstore_x_valid = \$next\loadstore_x_valid ;
  assign loadstore_x_stall = \$next\loadstore_x_stall ;
  assign loadstore_x_mask = \$next\loadstore_x_mask ;
  assign loadstore_x_store_operand = \$next\loadstore_x_store_operand ;
  assign loadstore_x_store = \$next\loadstore_x_store ;
  assign loadstore_x_load = \$next\loadstore_x_load ;
  assign loadstore_x_address = \$next\loadstore_x_address ;
  assign exception_x_ebreak = \$next\exception_x_ebreak ;
  assign exception_x_valid = \$next\exception_x_valid ;
  assign exception_x_stall = \$next\exception_x_stall ;
  assign exception_x_mret = \$next\exception_x_mret ;
  assign exception_x_illegal = \$next\exception_x_illegal ;
  assign exception_x_bus_error = \$next\exception_x_bus_error ;
  assign exception_x_misaligned_fetch = \$next\exception_x_misaligned_fetch ;
  assign exception_x_ecall = \$next\exception_x_ecall ;
  assign exception_x_pc = \$next\exception_x_pc ;
  assign exception_timer_interrupt = \$next\exception_timer_interrupt ;
  assign exception_external_interrupt = \$next\exception_external_interrupt ;
  assign compare_carry = \$next\compare_carry ;
  assign compare_overflow = \$next\compare_overflow ;
  assign compare_negative = \$next\compare_negative ;
  assign compare_zero = \$next\compare_zero ;
  assign compare_op = \$next\compare_op ;
  assign shifter_x_stall = \$next\shifter_x_stall ;
  assign shifter_x_src1 = \$next\shifter_x_src1 ;
  assign shifter_x_shamt = \$next\shifter_x_shamt ;
  assign shifter_x_sext = \$next\shifter_x_sext ;
  assign shifter_x_direction = \$next\shifter_x_direction ;
  assign adder_src2 = \$next\adder_src2 ;
  assign adder_src1 = \$next\adder_src1 ;
  assign adder_sub = \$next\adder_sub ;
  assign logic_src2 = \$next\logic_src2 ;
  assign logic_src1 = \$next\logic_src1 ;
  assign logic_op = \$next\logic_op ;
  assign csrf_port__en = \$next\csrf_port__en ;
  assign \gprf_r_addr$27  = \$next\gprf_r_addr$27 ;
  assign gprf_r_addr = \$next\gprf_r_addr ;
  assign decoder_instruction = \$next\decoder_instruction ;
  assign fetch_m_branch_target = \$next\fetch_m_branch_target ;
  assign fetch_m_valid = \$next\fetch_m_valid ;
  assign a_m_branch_taken = \$next\a_m_branch_taken ;
  assign fetch_m_branch_predict_taken = \$next\fetch_m_branch_predict_taken ;
  assign fetch_x_pc = \$next\fetch_x_pc ;
  assign fetch_d_valid = \$next\fetch_d_valid ;
  assign fetch_d_branch_target = \$next\fetch_d_branch_target ;
  assign fetch_d_branch_predict_taken = \$next\fetch_d_branch_predict_taken ;
  assign fetch_f_stall = \$next\fetch_f_stall ;
  assign fetch_f_pc = \$next\fetch_f_pc ;
  assign fetch_a_stall = \$next\fetch_a_stall ;
  assign fetch_ibus__err = \$next\fetch_ibus__err ;
  assign ibus__bte = \$next\ibus__bte ;
  assign ibus__cti = \$next\ibus__cti ;
  assign ibus__we = \$next\ibus__we ;
  assign fetch_ibus__ack = \$next\fetch_ibus__ack ;
  assign ibus__stb = \$next\ibus__stb ;
  assign ibus__cyc = \$next\ibus__cyc ;
  assign ibus__sel = \$next\ibus__sel ;
  assign fetch_ibus__dat_r = \$next\fetch_ibus__dat_r ;
  assign ibus__dat_w = \$next\ibus__dat_w ;
  assign ibus__adr = \$next\ibus__adr ;
  assign \a_valid$3  = \$next\a_valid$3 ;
  assign \payload__exception$126  = \$next\payload__exception$126 ;
  assign \payload__multiply$124  = \$next\payload__multiply$124 ;
  assign payload__load_data = \$next\payload__load_data ;
  assign \payload__load_mask$121  = \$next\payload__load_mask$121 ;
  assign \payload__load$119  = \$next\payload__load$119 ;
  assign \payload__result$117  = \$next\payload__result$117 ;
  assign \payload__rd_we$115  = \$next\payload__rd_we$115 ;
  assign \payload__rd$113  = \$next\payload__rd$113 ;
  assign \payload__pc$111  = \$next\payload__pc$111 ;
  assign w_kill = \$next\w_kill ;
  assign \m_stall$21  = \$next\m_stall$21 ;
  assign w_valid = \$next\w_valid ;
  assign payload__exception = \$next\payload__exception ;
  assign \payload__mret$108  = \$next\payload__mret$108 ;
  assign a_payload__branch_predict_taken = \$next\a_payload__branch_predict_taken ;
  assign payload__branch_taken = \$next\payload__branch_taken ;
  assign \payload__branch_target$104  = \$next\payload__branch_target$104 ;
  assign payload__condition_met = \$next\payload__condition_met ;
  assign \payload__divide$101  = \$next\payload__divide$101 ;
  assign \payload__multiply$99  = \$next\payload__multiply$99 ;
  assign \payload__compare$97  = \$next\payload__compare$97 ;
  assign payload__store_data = \$next\payload__store_data ;
  assign payload__dbus_sel = \$next\payload__dbus_sel ;
  assign \payload__store$93  = \$next\payload__store$93 ;
  assign payload__load_mask = \$next\payload__load_mask ;
  assign \payload__load$90  = \$next\payload__load$90 ;
  assign \payload__shift$88  = \$next\payload__shift$88 ;
  assign payload__result = \$next\payload__result ;
  assign \payload__bypass_m$85  = \$next\payload__bypass_m$85 ;
  assign \payload__rd_we$83  = \$next\payload__rd_we$83 ;
  assign \payload__rd$81  = \$next\payload__rd$81 ;
  assign \payload__pc$79  = \$next\payload__pc$79 ;
  assign m_kill = \$next\m_kill ;
  assign \x_stall$17  = \$next\x_stall$17 ;
  assign m_valid = \$next\m_valid ;
  assign payload__illegal = \$next\payload__illegal ;
  assign payload__mret = \$next\payload__mret ;
  assign payload__ebreak = \$next\payload__ebreak ;
  assign payload__ecall = \$next\payload__ecall ;
  assign \payload__bus_error$73  = \$next\payload__bus_error$73 ;
  assign payload__csr_we = \$next\payload__csr_we ;
  assign payload__csr_adr = \$next\payload__csr_adr ;
  assign payload__csr = \$next\payload__csr ;
  assign payload__fence_i = \$next\payload__fence_i ;
  assign f_payload__branch_predict_taken = \$next\f_payload__branch_predict_taken ;
  assign payload__branch_target = \$next\payload__branch_target ;
  assign payload__branch = \$next\payload__branch ;
  assign payload__compare = \$next\payload__compare ;
  assign payload__jump = \$next\payload__jump ;
  assign payload__sext = \$next\payload__sext ;
  assign payload__direction = \$next\payload__direction ;
  assign payload__shift = \$next\payload__shift ;
  assign payload__divide = \$next\payload__divide ;
  assign payload__multiply = \$next\payload__multiply ;
  assign payload__logic = \$next\payload__logic ;
  assign payload__adder_sub = \$next\payload__adder_sub ;
  assign payload__store = \$next\payload__store ;
  assign payload__load = \$next\payload__load ;
  assign payload__funct3 = \$next\payload__funct3 ;
  assign payload__bypass_m = \$next\payload__bypass_m ;
  assign payload__bypass_x = \$next\payload__bypass_x ;
  assign payload__immediate = \$next\payload__immediate ;
  assign payload__src2 = \$next\payload__src2 ;
  assign payload__src1 = \$next\payload__src1 ;
  assign payload__rs1_re = \$next\payload__rs1_re ;
  assign payload__rd_we = \$next\payload__rd_we ;
  assign payload__rs1 = \$next\payload__rs1 ;
  assign payload__rd = \$next\payload__rd ;
  assign \payload__misaligned_fetch$44  = \$next\payload__misaligned_fetch$44 ;
  assign \payload__pc$42  = \$next\payload__pc$42 ;
  assign x_kill = \$next\x_kill ;
  assign \d_stall$12  = \$next\d_stall$12 ;
  assign x_valid = \$next\x_valid ;
  assign payload__bus_error = \$next\payload__bus_error ;
  assign payload__instruction = \$next\payload__instruction ;
  assign \payload__misaligned_fetch$38  = \$next\payload__misaligned_fetch$38 ;
  assign \payload__pc$36  = \$next\payload__pc$36 ;
  assign d_kill = \$next\d_kill ;
  assign \f_stall$7  = \$next\f_stall$7 ;
  assign d_valid = \$next\d_valid ;
  assign payload__misaligned_fetch = \$next\payload__misaligned_fetch ;
  assign payload__pc = \$next\payload__pc ;
  assign f_kill = \$next\f_kill ;
  assign a_stall = \$next\a_stall ;
  assign f_valid = \$next\f_valid ;
  assign \rst$2  = \$next\rst$2 ;
  assign \clk$1  = \$next\clk$1 ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.predict" *)
(* generator = "nMigen" *)
module predict(d_branch_target, d_branch, d_jump, d_offset, d_pc, d_rs1_re, d_branch_taken);
  wire \$1 ;
  wire [34:0] \$10 ;
  wire \$3 ;
  wire [34:0] \$5 ;
  wire [32:0] \$6 ;
  wire [32:0] \$8 ;
  (* src = "minerva/minerva/units/predict.py:15" *)
  reg \$next\d_branch_taken ;
  (* src = "minerva/minerva/units/predict.py:16" *)
  reg [31:0] \$next\d_branch_target ;
  (* src = "minerva/minerva/units/predict.py:9" *)
  input d_branch;
  (* src = "minerva/minerva/units/predict.py:15" *)
  output d_branch_taken;
  (* src = "minerva/minerva/units/predict.py:16" *)
  output [31:0] d_branch_target;
  (* src = "minerva/minerva/units/predict.py:10" *)
  input d_jump;
  (* src = "minerva/minerva/units/predict.py:11" *)
  input [31:0] d_offset;
  (* src = "minerva/minerva/units/predict.py:12" *)
  input [29:0] d_pc;
  (* src = "minerva/minerva/units/predict.py:13" *)
  input d_rs1_re;
  assign \$10  = $signed(\$6 ) + (* src = "minerva/minerva/units/predict.py:30" *) $signed(\$8 );
  assign \$1  = ~ (* src = "minerva/minerva/units/predict.py:28" *) d_rs1_re;
  assign \$3  = d_jump & (* src = "minerva/minerva/units/predict.py:28" *) \$1 ;
  assign \$6  = d_pc <<< (* src = "minerva/minerva/units/predict.py:30" *) 2'h2;
  assign \$8  = + (* src = "minerva/minerva/units/predict.py:11" *) $signed(d_offset);
  always @* begin
    \$next\d_branch_taken  = 1'h0;
    casez (d_branch)
      1'h1:
          \$next\d_branch_taken  = d_offset[31];
      1'hz:
          \$next\d_branch_taken  = \$3 ;
    endcase
  end
  always @* begin
    \$next\d_branch_target  = 32'd0;
    \$next\d_branch_target  = \$5 [31:0];
  end
  assign \$5  = \$10 ;
  assign d_branch_target = \$next\d_branch_target ;
  assign d_branch_taken = \$next\d_branch_taken ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.shifter" *)
(* generator = "nMigen" *)
module shifter(rst, x_direction, x_sext, x_shamt, x_src1, x_stall, m_result, clk);
  wire [31:0] \$1 ;
  wire \$10 ;
  wire [63:0] \$12 ;
  wire [63:0] \$13 ;
  wire [31:0] \$15 ;
  wire \$3 ;
  wire \$4 ;
  wire \$7 ;
  (* src = "minerva/minerva/units/shifter.py:22" *)
  reg \$next\m_direction ;
  (* src = "minerva/minerva/units/shifter.py:15" *)
  reg [31:0] \$next\m_result ;
  (* src = "minerva/minerva/units/shifter.py:23" *)
  reg [31:0] \$next\m_result$9 ;
  (* src = "minerva/minerva/units/shifter.py:21" *)
  reg \$next\x_filler ;
  (* src = "minerva/minerva/units/shifter.py:20" *)
  reg [31:0] \$next\x_operand ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "minerva/minerva/units/shifter.py:22" *)
  reg m_direction = 1'h0;
  (* src = "minerva/minerva/units/shifter.py:15" *)
  output [31:0] m_result;
  (* init = 32'd0 *)
  (* src = "minerva/minerva/units/shifter.py:23" *)
  reg [31:0] \m_result$9  = 32'd0;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "minerva/minerva/units/shifter.py:9" *)
  input x_direction;
  (* src = "minerva/minerva/units/shifter.py:21" *)
  wire x_filler;
  (* src = "minerva/minerva/units/shifter.py:20" *)
  wire [31:0] x_operand;
  (* src = "minerva/minerva/units/shifter.py:10" *)
  input x_sext;
  (* src = "minerva/minerva/units/shifter.py:11" *)
  input [4:0] x_shamt;
  (* src = "minerva/minerva/units/shifter.py:12" *)
  input [31:0] x_src1;
  (* src = "minerva/minerva/units/shifter.py:13" *)
  input x_stall;
  assign \$10  = ~ (* src = "minerva/minerva/units/shifter.py:31" *) x_stall;
  assign \$13  = { x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_filler, x_operand } >>> (* src = "minerva/minerva/units/shifter.py:34" *) x_shamt;
  assign \$15  = m_direction ? (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ir.py:43" *) \m_result$9  : { \m_result$9 [0], \m_result$9 [1], \m_result$9 [2], \m_result$9 [3], \m_result$9 [4], \m_result$9 [5], \m_result$9 [6], \m_result$9 [7], \m_result$9 [8], \m_result$9 [9], \m_result$9 [10], \m_result$9 [11], \m_result$9 [12], \m_result$9 [13], \m_result$9 [14], \m_result$9 [15], \m_result$9 [16], \m_result$9 [17], \m_result$9 [18], \m_result$9 [19], \m_result$9 [20], \m_result$9 [21], \m_result$9 [22], \m_result$9 [23], \m_result$9 [24], \m_result$9 [25], \m_result$9 [26], \m_result$9 [27], \m_result$9 [28], \m_result$9 [29], \m_result$9 [30], \m_result$9 [31] };
  assign \$1  = x_direction ? (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ir.py:43" *) x_src1 : { x_src1[0], x_src1[1], x_src1[2], x_src1[3], x_src1[4], x_src1[5], x_src1[6], x_src1[7], x_src1[8], x_src1[9], x_src1[10], x_src1[11], x_src1[12], x_src1[13], x_src1[14], x_src1[15], x_src1[16], x_src1[17], x_src1[18], x_src1[19], x_src1[20], x_src1[21], x_src1[22], x_src1[23], x_src1[24], x_src1[25], x_src1[26], x_src1[27], x_src1[28], x_src1[29], x_src1[30], x_src1[31] };
  assign \$4  = x_direction & (* src = "minerva/minerva/units/shifter.py:28" *) x_sext;
  assign \$3  = \$4  ? (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/ir.py:43" *) x_src1[31] : 1'h0;
  assign \$7  = ~ (* src = "minerva/minerva/units/shifter.py:31" *) x_stall;
  always @(posedge clk)
      \m_result$9  <= \$next\m_result$9 ;
  always @(posedge clk)
      m_direction <= \$next\m_direction ;
  always @* begin
    \$next\x_operand  = 32'd0;
    \$next\x_operand  = \$1 ;
  end
  always @* begin
    \$next\x_filler  = 1'h0;
    \$next\x_filler  = \$3 ;
  end
  always @* begin
    \$next\m_direction  = m_direction;
    casez (\$7 )
      1'h1:
          \$next\m_direction  = x_direction;
    endcase
    casez (rst)
      1'h1:
          \$next\m_direction  = 1'h0;
    endcase
  end
  always @* begin
    \$next\m_result$9  = \m_result$9 ;
    casez (\$10 )
      1'h1:
          \$next\m_result$9  = \$12 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next\m_result$9  = 32'd0;
    endcase
  end
  always @* begin
    \$next\m_result  = 32'd0;
    \$next\m_result  = \$15 ;
  end
  assign \$12  = \$13 ;
  assign m_result = \$next\m_result ;
  assign x_filler = \$next\x_filler ;
  assign x_operand = \$next\x_operand ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.exception.trap_pe" *)
(* generator = "nMigen" *)
module trap_pe(n, o, i);
  wire \$1 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:77" *)
  reg \$next\n ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *)
  reg [3:0] \$next\o ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:75" *)
  input [15:0] i;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:77" *)
  output n;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:76" *)
  output [3:0] o;
  assign \$1  = i == (* src = "/home/florent/dev/mlabs/nmigen/nmigen/lib/coding.py:84" *) 1'h0;
  always @* begin
    \$next\o  = 4'h0;
    casez (i[15])
      1'h1:
          \$next\o  = 4'hf;
    endcase
    casez (i[14])
      1'h1:
          \$next\o  = 4'he;
    endcase
    casez (i[13])
      1'h1:
          \$next\o  = 4'hd;
    endcase
    casez (i[12])
      1'h1:
          \$next\o  = 4'hc;
    endcase
    casez (i[11])
      1'h1:
          \$next\o  = 4'hb;
    endcase
    casez (i[10])
      1'h1:
          \$next\o  = 4'ha;
    endcase
    casez (i[9])
      1'h1:
          \$next\o  = 4'h9;
    endcase
    casez (i[8])
      1'h1:
          \$next\o  = 4'h8;
    endcase
    casez (i[7])
      1'h1:
          \$next\o  = 4'h7;
    endcase
    casez (i[6])
      1'h1:
          \$next\o  = 4'h6;
    endcase
    casez (i[5])
      1'h1:
          \$next\o  = 4'h5;
    endcase
    casez (i[4])
      1'h1:
          \$next\o  = 4'h4;
    endcase
    casez (i[3])
      1'h1:
          \$next\o  = 4'h3;
    endcase
    casez (i[2])
      1'h1:
          \$next\o  = 4'h2;
    endcase
    casez (i[1])
      1'h1:
          \$next\o  = 4'h1;
    endcase
    casez (i[0])
      1'h1:
          \$next\o  = 4'h0;
    endcase
  end
  always @* begin
    \$next\n  = 1'h0;
    \$next\n  = \$1 ;
  end
  assign n = \$next\n ;
  assign o = \$next\o ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.w" *)
(* generator = "nMigen" *)
module w(stall, kill, \valid$1 , valid);
  wire \$2 ;
  wire \$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\stall ;
  (* src = "minerva/minerva/stage.py:59" *)
  reg \$next\stall$6 ;
  (* src = "minerva/minerva/stage.py:60" *)
  reg \$next\valid$1 ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input kill;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output stall;
  (* src = "minerva/minerva/stage.py:59" *)
  wire \stall$6 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input valid;
  (* src = "minerva/minerva/stage.py:60" *)
  output \valid$1 ;
  assign \$2  = ~ (* src = "minerva/minerva/stage.py:83" *) kill;
  assign \$4  = valid & (* src = "minerva/minerva/stage.py:83" *) \$2 ;
  always @* begin
    \$next\valid$1  = 1'h0;
    \$next\valid$1  = \$4 ;
  end
  always @* begin
    \$next\stall  = 1'h0;
    \$next\stall  = \stall$6 ;
  end
  always @* begin
    \$next\stall$6  = 1'h0;
    \$next\stall$6  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  assign \stall$6  = \$next\stall$6 ;
  assign stall = \$next\stall ;
  assign \valid$1  = \$next\valid$1 ;
endmodule

(* \nmigen.hierarchy  = "minerva_cpu.x" *)
(* generator = "nMigen" *)
module x(rst, valid, stall, kill, \valid$1 , \stall$2 , \kill$3 , \stall$4 , \valid$5 , clk);
  wire \$10 ;
  wire \$12 ;
  wire \$15 ;
  wire \$17 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "minerva/minerva/stage.py:58" *)
  reg \$next\kill$14 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\kill$3 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\stall ;
  (* src = "minerva/minerva/stage.py:59" *)
  reg \$next\stall$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  reg \$next\valid$1 ;
  (* src = "minerva/minerva/stage.py:60" *)
  reg \$next\valid$5 ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input kill;
  (* src = "minerva/minerva/stage.py:58" *)
  wire \kill$14 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \kill$3 ;
  (* src = "minerva/minerva/core.py:191" *)
  input rst;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output stall;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input \stall$2 ;
  (* src = "minerva/minerva/stage.py:59" *)
  output \stall$4 ;
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "/home/florent/dev/mlabs/nmigen/nmigen/hdl/rec.py:85" *)
  output \valid$1 ;
  reg \valid$1  = 1'h0;
  (* src = "minerva/minerva/stage.py:60" *)
  output \valid$5 ;
  assign \$10  = ~ (* src = "minerva/minerva/stage.py:88" *) \stall$4 ;
  assign \$12  = ~ (* src = "minerva/minerva/stage.py:90" *) \stall$2 ;
  assign \$15  = \$12  | (* src = "minerva/minerva/stage.py:90" *) \kill$14 ;
  assign \$17  = 1'h0 | (* src = "minerva/minerva/stage.py:98" *) \stall$2 ;
  assign \$6  = ~ (* src = "minerva/minerva/stage.py:83" *) kill;
  assign \$8  = valid & (* src = "minerva/minerva/stage.py:83" *) \$6 ;
  always @(posedge clk)
      \valid$1  <= \$next\valid$1 ;
  always @* begin
    \$next\valid$5  = 1'h0;
    \$next\valid$5  = \$8 ;
  end
  always @* begin
    \$next\stall  = 1'h0;
    \$next\stall  = \stall$4 ;
  end
  always @* begin
    \$next\valid$1  = \valid$1 ;
    casez ({ \$15 , \$10  })
      2'bz1:
          \$next\valid$1  = \valid$5 ;
      2'b1z:
          \$next\valid$1  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\valid$1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\kill$3  = 1'h0;
    \$next\kill$3  = \kill$14 ;
  end
  always @* begin
    \$next\kill$14  = 1'h0;
    \$next\kill$14  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\stall$4  = 1'h0;
    \$next\stall$4  = \$17 ;
  end
  assign \stall$4  = \$next\stall$4 ;
  assign \kill$14  = \$next\kill$14 ;
  assign \kill$3  = \$next\kill$3 ;
  assign stall = \$next\stall ;
  assign \valid$5  = \$next\valid$5 ;
endmodule

